{
    "version": "https://jsonfeed.org/version/1",
    "title": "何必要叹气呢？",
    "subtitle": "路还很长，这不是最终的结果",
    "icon": "https://www.htired.top/assets/favicon.ico",
    "description": "送君南浦，伤如之何？",
    "home_page_url": "https://www.htired.top",
    "items": [
        {
            "id": "https://www.htired.top/2024/08/13/deeplearning-pdf/",
            "url": "https://www.htired.top/2024/08/13/deeplearning-pdf/",
            "title": "deeplearning-pdf",
            "date_published": "2024-08-13T09:16:50.000Z",
            "content_html": "<p>\n\n<!-- 第一种方式，可调整pdf显示的大小，比较灵活 -->\n\n <embed src=\"./AdaCLIP-paper-note.pdf\" width=\"100%\" height=\"750\" type=\"application/pdf\">\n\n\n<!-- 第二种方式 -->\n\n</p>\n<p>\n\n\t<div class=\"row\">\n    <embed src=\"./AdaCLIP-paper-note.pdf\" width=\"100%\" height=\"550\" type=\"application/pdf\">\n\t</div>\n\n\n</p>\n<p>\n\n\t<div class=\"row\">\n    <embed src=\"https://arxiv.org/pdf/2006.09882\" width=\"100%\" height=\"550\" type=\"application/pdf\">\n\t</div>\n\n\n</p>\n",
            "tags": [
                "deeplearning"
            ]
        },
        {
            "id": "https://www.htired.top/2024/07/26/algorithm/c/",
            "url": "https://www.htired.top/2024/07/26/algorithm/c/",
            "title": "",
            "date_published": "2024-07-26T11:34:29.893Z",
            "content_html": "<h1 id=\"字符型数据\"><a class=\"anchor\" href=\"#字符型数据\">#</a> 字符型数据</h1>\n<hr />\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>字节数</th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>signed char</td>\n<td>1</td>\n<td>-128 ~ 127</td>\n</tr>\n<tr>\n<td>unsigned char</td>\n<td>1</td>\n<td>0 ~ 255</td>\n</tr>\n</tbody>\n</table>\n<p>注意：</p>\n<ul>\n<li><code>c99</code>  把字符型数据作为整型类型的一种。</li>\n<li>在使用<strong>有符号</strong>字符型变量时，允许储存的值为负数，但是字符的代码不可能是负值，所以在存储字符时只用到了 0-127 这一部分。</li>\n</ul>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nint main()\n&#123;\n    signed char sc;\n    unsigned char uc;\n    //在 vc++ 中,char类型的变量是 signed char 类型的，在其他的编译器中 char 类型的变量可能是 unsigned char 类型的\n    char ch;\n    printf(&quot;%d, %d, %d\\n&quot;, sizeof(sc), sizeof(uc), sizeof(ch));\n\n    uc = -1;\n    ch = -1;\n    printf(&quot;%d, %d\\n&quot;, ch, uc); // -1, 255\n    /*\n        由于 %d 是 int 类型，相当于\n        int w;\n        printf(&quot;%d, %d\\n&quot;, w = ch, w = uc);\n    */\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<p>由于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span> 是  <code>int</code>  类型的数据，占 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span></span></span></span> 个字节，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>32</mn></mrow><annotation encoding=\"application/x-tex\">32</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">32</span></span></span></span> 个 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mi>i</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">bit</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">bi</span><span class=\"mord mathnormal\">t</span></span></span></span></p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span> 对应的补码：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><munder><munder><mrow><mn>11</mn><mo>⋯</mo><mn>1</mn></mrow><mo stretchy=\"true\">⏟</mo></munder><mn>24</mn></munder><mtext> </mtext><munder><munder><mrow><mn>1</mn><mo>⋯</mo><mn>1</mn></mrow><mo stretchy=\"true\">⏟</mo></munder><mn>8</mn></munder></mrow><annotation encoding=\"application/x-tex\">\\underbrace{11\\cdots1}_{24}\\,\\underbrace{1\\cdots1}_{8}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.9435em;vertical-align:-1.2991em;\"></span><span class=\"mord munder\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6444em;\"><span style=\"top:-1.7009em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">24</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord munder\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6444em;\"><span class=\"svg-align\" style=\"top:-2.352em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"stretchy\" style=\"height:0.548em;min-width:1.6em;\"><span class=\"brace-left\" style=\"height:0.548em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.548em\" viewBox=\"0 0 400000 548\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z\"/></svg></span><span class=\"brace-center\" style=\"height:0.548em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.548em\" viewBox=\"0 0 400000 548\" preserveAspectRatio=\"xMidYMin slice\"><path d=\"M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z\"/></svg></span><span class=\"brace-right\" style=\"height:0.548em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.548em\" viewBox=\"0 0 400000 548\" preserveAspectRatio=\"xMaxYMin slice\"><path d=\"M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z\"/></svg></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">11</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.648em;\"><span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2991em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord munder\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6444em;\"><span style=\"top:-1.7009em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">8</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord munder\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6444em;\"><span class=\"svg-align\" style=\"top:-2.352em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"stretchy\" style=\"height:0.548em;min-width:1.6em;\"><span class=\"brace-left\" style=\"height:0.548em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.548em\" viewBox=\"0 0 400000 548\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z\"/></svg></span><span class=\"brace-center\" style=\"height:0.548em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.548em\" viewBox=\"0 0 400000 548\" preserveAspectRatio=\"xMidYMin slice\"><path d=\"M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z\"/></svg></span><span class=\"brace-right\" style=\"height:0.548em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.548em\" viewBox=\"0 0 400000 548\" preserveAspectRatio=\"xMaxYMin slice\"><path d=\"M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z\"/></svg></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.648em;\"><span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2991em;\"><span></span></span></span></span></span></span></span></span></li>\n</ul>\n<p>对于  <code>unsigned char uc = -1; int w = uc</code></p>\n<ul>\n<li>\n<p>将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span> 赋值给 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">uc</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">c</span></span></span></span> 时候，由于  <code>char</code>  只占一个字节，且 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span> 为  <code>int</code>  类型</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">uc</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">c</span></span></span></span> 对应的补码：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><munder><munder><mrow><mn>1</mn><mo>⋯</mo><mn>1</mn></mrow><mo stretchy=\"true\">⏟</mo></munder><mn>8</mn></munder></mrow><annotation encoding=\"application/x-tex\">\\underbrace{1\\cdots1}_{8}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.9435em;vertical-align:-1.2991em;\"></span><span class=\"mord munder\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6444em;\"><span style=\"top:-1.7009em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">8</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord munder\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6444em;\"><span class=\"svg-align\" style=\"top:-2.352em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"stretchy\" style=\"height:0.548em;min-width:1.6em;\"><span class=\"brace-left\" style=\"height:0.548em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.548em\" viewBox=\"0 0 400000 548\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z\"/></svg></span><span class=\"brace-center\" style=\"height:0.548em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.548em\" viewBox=\"0 0 400000 548\" preserveAspectRatio=\"xMidYMin slice\"><path d=\"M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z\"/></svg></span><span class=\"brace-right\" style=\"height:0.548em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.548em\" viewBox=\"0 0 400000 548\" preserveAspectRatio=\"xMaxYMin slice\"><path d=\"M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z\"/></svg></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.648em;\"><span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2991em;\"><span></span></span></span></span></span></span></span></span>，舍弃其余高的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>24</mn></mrow><annotation encoding=\"application/x-tex\">24</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">24</span></span></span></span> 位</p>\n</li>\n<li>\n<p>将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">uc</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">c</span></span></span></span> 赋值给 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span> 时候，将  <code>unsigned char</code>  转化为  <code>int</code>  类型的数据</p>\n<p>首先 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">uc</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">c</span></span></span></span> 的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>8</mn><mtext> </mtext><mi>b</mi><mi>i</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">8\\,bit</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">bi</span><span class=\"mord mathnormal\">t</span></span></span></span> 全部复制到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span> 的低 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>8</mn><mtext> </mtext><mi>b</mi><mi>i</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">8\\,bit</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">bi</span><span class=\"mord mathnormal\">t</span></span></span></span> 上。</p>\n<p>由于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">uc</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">c</span></span></span></span> 是无有符号的  <code>char</code>  类型数据，那么 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span> 的高 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>24</mn></mrow><annotation encoding=\"application/x-tex\">24</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">24</span></span></span></span> 位的二进制上全部填写 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi><mo>:</mo><munder><munder><mrow><mn>0</mn><mo>⋯</mo><mn>0</mn></mrow><mo stretchy=\"true\">⏟</mo></munder><mn>24</mn></munder><mtext> </mtext><munder><munder><mrow><mn>1</mn><mo>⋯</mo><mn>1</mn></mrow><mo stretchy=\"true\">⏟</mo></munder><mn>8</mn></munder></mrow><annotation encoding=\"application/x-tex\">w:\\underbrace{0\\cdots0}_{24}\\,\\underbrace{1\\cdots1}_{8}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.9435em;vertical-align:-1.2991em;\"></span><span class=\"mord munder\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6444em;\"><span style=\"top:-1.7009em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">24</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord munder\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6444em;\"><span class=\"svg-align\" style=\"top:-2.352em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"stretchy\" style=\"height:0.548em;min-width:1.6em;\"><span class=\"brace-left\" style=\"height:0.548em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.548em\" viewBox=\"0 0 400000 548\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z\"/></svg></span><span class=\"brace-center\" style=\"height:0.548em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.548em\" viewBox=\"0 0 400000 548\" preserveAspectRatio=\"xMidYMin slice\"><path d=\"M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z\"/></svg></span><span class=\"brace-right\" style=\"height:0.548em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.548em\" viewBox=\"0 0 400000 548\" preserveAspectRatio=\"xMaxYMin slice\"><path d=\"M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z\"/></svg></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.648em;\"><span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2991em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord munder\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6444em;\"><span style=\"top:-1.7009em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">8</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord munder\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6444em;\"><span class=\"svg-align\" style=\"top:-2.352em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"stretchy\" style=\"height:0.548em;min-width:1.6em;\"><span class=\"brace-left\" style=\"height:0.548em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.548em\" viewBox=\"0 0 400000 548\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z\"/></svg></span><span class=\"brace-center\" style=\"height:0.548em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.548em\" viewBox=\"0 0 400000 548\" preserveAspectRatio=\"xMidYMin slice\"><path d=\"M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z\"/></svg></span><span class=\"brace-right\" style=\"height:0.548em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.548em\" viewBox=\"0 0 400000 548\" preserveAspectRatio=\"xMaxYMin slice\"><path d=\"M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z\"/></svg></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.648em;\"><span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2991em;\"><span></span></span></span></span></span></span></span></span></p>\n<p>由于采用补码存储，最终转换为原码输出：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi><mo>=</mo><mn>255</mn></mrow><annotation encoding=\"application/x-tex\">w = 255</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">255</span></span></span></span></p>\n</li>\n</ul>\n<p>对于  <code>char ch = -1; int w = ch</code></p>\n<ul>\n<li>\n<p>将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span> 赋值给 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">ch</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">h</span></span></span></span> 时候，由于  <code>char</code>  只占一个字节，且 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span> 为  <code>int</code>  类型</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">uc</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">c</span></span></span></span> 对应的补码：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><munder><munder><mrow><mn>1</mn><mo>⋯</mo><mn>1</mn></mrow><mo stretchy=\"true\">⏟</mo></munder><mn>8</mn></munder></mrow><annotation encoding=\"application/x-tex\">\\underbrace{1\\cdots1}_{8}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.9435em;vertical-align:-1.2991em;\"></span><span class=\"mord munder\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6444em;\"><span style=\"top:-1.7009em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">8</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord munder\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6444em;\"><span class=\"svg-align\" style=\"top:-2.352em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"stretchy\" style=\"height:0.548em;min-width:1.6em;\"><span class=\"brace-left\" style=\"height:0.548em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.548em\" viewBox=\"0 0 400000 548\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z\"/></svg></span><span class=\"brace-center\" style=\"height:0.548em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.548em\" viewBox=\"0 0 400000 548\" preserveAspectRatio=\"xMidYMin slice\"><path d=\"M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z\"/></svg></span><span class=\"brace-right\" style=\"height:0.548em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.548em\" viewBox=\"0 0 400000 548\" preserveAspectRatio=\"xMaxYMin slice\"><path d=\"M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z\"/></svg></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.648em;\"><span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2991em;\"><span></span></span></span></span></span></span></span></span>，舍弃其余高的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>24</mn></mrow><annotation encoding=\"application/x-tex\">24</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">24</span></span></span></span> 位</p>\n</li>\n<li>\n<p>将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">ch</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">h</span></span></span></span> 赋值给 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span> 时候，将  <code>char</code>  转化为  <code>int</code>  类型的数据</p>\n<p>首先 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">ch</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">h</span></span></span></span> 的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>8</mn><mtext> </mtext><mi>b</mi><mi>i</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">8\\,bit</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">bi</span><span class=\"mord mathnormal\">t</span></span></span></span> 全部复制到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span> 的低 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>8</mn><mtext> </mtext><mi>b</mi><mi>i</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">8\\,bit</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">bi</span><span class=\"mord mathnormal\">t</span></span></span></span> 上。</p>\n<p>由于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">ch</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">h</span></span></span></span> 是有符号的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>h</mi><mi>a</mi><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">char</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">ha</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> 类型数据，并且最高位为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>，那么 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span> 的高 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>24</mn></mrow><annotation encoding=\"application/x-tex\">24</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">24</span></span></span></span> 位的二进制上全部填写 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi><mo>:</mo><munder><munder><mrow><mn>11</mn><mo>⋯</mo><mn>1</mn></mrow><mo stretchy=\"true\">⏟</mo></munder><mn>24</mn></munder><mtext> </mtext><munder><munder><mrow><mn>1</mn><mo>⋯</mo><mn>1</mn></mrow><mo stretchy=\"true\">⏟</mo></munder><mn>8</mn></munder></mrow><annotation encoding=\"application/x-tex\">w:\\underbrace{11\\cdots1}_{24}\\,\\underbrace{1\\cdots1}_{8}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.9435em;vertical-align:-1.2991em;\"></span><span class=\"mord munder\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6444em;\"><span style=\"top:-1.7009em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">24</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord munder\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6444em;\"><span class=\"svg-align\" style=\"top:-2.352em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"stretchy\" style=\"height:0.548em;min-width:1.6em;\"><span class=\"brace-left\" style=\"height:0.548em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.548em\" viewBox=\"0 0 400000 548\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z\"/></svg></span><span class=\"brace-center\" style=\"height:0.548em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.548em\" viewBox=\"0 0 400000 548\" preserveAspectRatio=\"xMidYMin slice\"><path d=\"M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z\"/></svg></span><span class=\"brace-right\" style=\"height:0.548em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.548em\" viewBox=\"0 0 400000 548\" preserveAspectRatio=\"xMaxYMin slice\"><path d=\"M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z\"/></svg></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">11</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.648em;\"><span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2991em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord munder\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6444em;\"><span style=\"top:-1.7009em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">8</span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord munder\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6444em;\"><span class=\"svg-align\" style=\"top:-2.352em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"stretchy\" style=\"height:0.548em;min-width:1.6em;\"><span class=\"brace-left\" style=\"height:0.548em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.548em\" viewBox=\"0 0 400000 548\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z\"/></svg></span><span class=\"brace-center\" style=\"height:0.548em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.548em\" viewBox=\"0 0 400000 548\" preserveAspectRatio=\"xMidYMin slice\"><path d=\"M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z\"/></svg></span><span class=\"brace-right\" style=\"height:0.548em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.548em\" viewBox=\"0 0 400000 548\" preserveAspectRatio=\"xMaxYMin slice\"><path d=\"M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z\"/></svg></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.648em;\"><span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.2991em;\"><span></span></span></span></span></span></span></span></span></p>\n<p>由于采用补码存储，最终转换为原码输出：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi><mo>=</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">w = -1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span></p>\n</li>\n</ul>\n<h1 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h1>\n<h2 id=\"数组作为函数参数\"><a class=\"anchor\" href=\"#数组作为函数参数\">#</a> 数组作为函数参数</h2>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n//1. 形参是数组的形式，传入的是首元素的地址\n//  - 地址是应该使用指针来接收\n//    所以 arr[] 这里看似是数组，本质是指针变量\n//\t  其实z arr[] = *p\nvoid bubbleSort(int arr[])\n&#123;\n    //这里 arr 是指针变量，在 64 位中大小为 8 bit\n    for (int i = 0; i &lt; n; i++) &#123;\n        for (int j = 0; j &lt; n - i; j++) &#123;\n            if (arr[j] &lt; arr[j - 1]) &#123;\n                int t = arr[j];\n                arr[j] = arr[j - 1];\n                arr[j - 1] = t;\n            &#125;\n        &#125;\n    &#125;\n&#125;\nint main()\n&#123;\n    int arr[10] = &#123;9, 8, 7, 6, 5, 4, 3, 2, 1, 0&#125;;\n    //数组名本质是：数组首元素的地址\n    bubbleSort(arr);\n    for (int i = 0; i &lt; n; i++) &#123;\n        cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;;\n    &#125;\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<hr />\n<p>上述的解决方式</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#include <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>#include <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>iostream<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//1. 形参是数组的形式，传入的是首元素的地址</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//  - 地址是应该使用指针来接收</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//    所以 arr 这里看似是数组，本质是指针变量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 这里 arr 是指针变量，在 64 位中大小为 8 字节</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 数组名本质是：数组首元素的地址</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token function\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token function\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"数组名\"><a class=\"anchor\" href=\"#数组名\">#</a> 数组名</h2>\n<h3 id=\"一维数组的数组名\"><a class=\"anchor\" href=\"#一维数组的数组名\">#</a> 一维数组的数组名</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#include <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>#include <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>iostream<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 000000000061FDF0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 000000000061FDF0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token function\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 40</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 既然说 arr 为数组首元素地址</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">//  为什么 sizeof (arr) 为 40? 而不是 4 或者 8</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>数组名确实能表示首元素地址，但是有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> 个例外</p>\n<ol>\n<li>\n<p><code>sizeof(数组名)</code> ，这里的数组名<strong>表示整个数组</strong>，计算的是整个数组的大小，单位是字节</p>\n</li>\n<li>\n<p><code>&amp;数组名</code> ，这里的数组名表示整个数组，取出的是<strong>整个数组的地址</strong></p>\n<blockquote>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n&#123;\n   int arr[10] = &#123;9, 8, 7, 6, 5, 4, 3, 2, 1, 0&#125;;\n   printf(&quot;%p\\n&quot;, arr);         // 00D5F940\n   printf(&quot;%p\\n&quot;, arr + 1);     // 00D5F944\n\n   printf(&quot;%p\\n&quot;, &amp;arr[0]);     // 00D5F940\n   printf(&quot;%p\\n&quot;, &amp;arr[0] + 1); // 00D5F944\n\n   printf(&quot;%p\\n&quot;, &amp;arr);        // 00D5F940\n   printf(&quot;%p\\n&quot;, &amp;arr + 1);    // 00D5F968\n\n   system(&quot;pause&quot;);\n   return 0;\n&#125;\n</code></pre>\n</blockquote>\n<p>可以发现， <code>&amp;数组名 + 1</code>  为数组增长了 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mi>x</mi><mn>2</mn><msub><mn>8</mn><mn>16</mn></msub><mo>=</mo><mn>2</mn><mo>×</mo><mn>1</mn><msup><mn>6</mn><mn>1</mn></msup><mo>+</mo><mn>8</mn><mo>×</mo><mn>1</mn><msup><mn>6</mn><mn>0</mn></msup><mo>=</mo><mn>40</mn></mrow><annotation encoding=\"application/x-tex\">0x28_{16} = 2\\times 16^1 + 8\\times 16^0 = 40</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7944em;vertical-align:-0.15em;\"></span><span class=\"mord\">0</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord\">8</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">16</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">40</span></span></span></span>。</p>\n<p>即为数组的大小</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#include <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>#include <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>iostream<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 1. 形参是指针的形式，传入的是首元素的地址</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//   - 地址是应该使用指针来接收</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 这里 arr 是指针变量，在 64 位中大小为 8 字节</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 数组名本质是：数组首元素的地址</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token function\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token function\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h3 id=\"二维数组的数组名\"><a class=\"anchor\" href=\"#二维数组的数组名\">#</a> 二维数组的数组名</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#include <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>#include <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>iostream<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token function\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 48</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    arr<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 二维数组的数组名也表示数组首元素的地址</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//arr 表示是的第一行的地址（一维数组的地址）</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//arr + 1 表示是的第二行的地址（一维数组的地址）</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 000000000061FDE0</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 000000000061FDF0，比上述增长了 16 个字节</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 行数 = 总数组大小 / 第一行数组大小</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> rs <span class=\"token operator\">=</span> <span class=\"token function\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token function\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 48 / 16;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"行数：%d\\n\"</span><span class=\"token punctuation\">,</span> rs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 列数 = 第一行数组大小 / 第一个数组元素大小</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span> cs <span class=\"token operator\">=</span> <span class=\"token function\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token function\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 16 / 4;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"列数：%d\\n\"</span><span class=\"token punctuation\">,</span> cs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>类似的，若  <code>arr</code>  是二维数组，那么  <code>&amp;arr</code>  就是整个二维数组的地址</p>\n<h1 id=\"指针\"><a class=\"anchor\" href=\"#指针\">#</a> 指针</h1>\n<h2 id=\"指针-2\"><a class=\"anchor\" href=\"#指针-2\">#</a> 指针</h2>\n<p>指针就是内存中一个<strong>最小</strong>单元的编号，也就是<strong>地址</strong>。</p>\n<blockquote>\n<p>通常指的是指针变量，用来存放内存地址的变量</p>\n</blockquote>\n<p>即：指针就是地址，口语中说的指针通常指的是指针变量</p>\n<blockquote>\n<p><strong>指针变量：存放地址</strong></p>\n</blockquote>\n<p>那我们就可以这样理解：</p>\n<blockquote>\n<p>把内存单元的编号就称为地址（指针）</p>\n<p>指针其实就是地址，地址就是编号</p>\n<p>指针就是内存单元的编号</p>\n</blockquote>\n<p><img loading=\"lazy\" data-src=\"/images/c-1\" alt=\"img\" /></p>\n<p>指针变量，用来存放地址的变量。（存放在指针中的值都被当成地址处理）。</p>\n<p>那这里的问题是：</p>\n<ul>\n<li>一个小的单元到底是多大？（1 个字节）</li>\n<li>如何编址？</li>\n</ul>\n<p>在 32 位的机器上，地址是 32 个 0 或者 1 组成二进制序列，那地址就得用 4 个字节的空间来存储，所以 一个指针变量的大小就应该是 4 个字节。</p>\n<p>那如果在 64 位机器上，如果有 64 个地址线，那一个指针变量的大小是 8 个字节，才能存放一个地 址。</p>\n<p>总结：</p>\n<ul>\n<li>\n<p>指针变量是用来存放地址的，地址是唯一标示一块地址空间的。</p>\n</li>\n<li>\n<p><strong>指针的大小在 32 位平台是 4 个字节，在 64 位平台是 8 个字节</strong></p>\n</li>\n</ul>\n<hr />\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#include <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>#include <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>iostream<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pc <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">short</span> <span class=\"token operator\">*</span>ps <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>pi <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">double</span> <span class=\"token operator\">*</span>pd <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//ptr_t pt = NULL; 不采用统一的类型</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">//sizeof 返回的值的类型是无符号整型</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%zu\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sizeof</span><span class=\"token punctuation\">(</span>pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 给 sizeof () 的返回值打印</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%zu\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sizeof</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%zu\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sizeof</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%zu\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sizeof</span><span class=\"token punctuation\">(</span>pd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>int *pa;</code> ： <code>pa</code>  是指针， <code>pa</code>  指向的对象是  <code>int</code>  类型</p>\n<h2 id=\"指针类型\"><a class=\"anchor\" href=\"#指针类型\">#</a> 指针类型</h2>\n<h3 id=\"意义一\"><a class=\"anchor\" href=\"#意义一\">#</a> 意义一</h3>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nint main()\n&#123;\n    // 0001 0001 0010 0010 ...\n    // 第一个字节：44\n    // 第二个字节：33\n    // 第三个字节：22\n    // 第四个字节：11\n    int a = 0x11223344;\n    int *pa = &amp;a;\n    // 找到 a 的地址，将 a 的值改为 0\n    // 第一个字节：00\n    // 第二个字节：00\n    // 第三个字节：00\n    // 第四个字节：00u\n    *pa = 0;\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"/images/c-2\" alt=\"img\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#include <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>#include <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>iostream<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0x11223344</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// int *pa = &amp;a;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// *pa = 0;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 由于 &amp;a 取出的是 a 的地址，指针变量照样存储</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// int *</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token operator\">*</span>pc <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"/images/c-3\" alt=\"img\" /></p>\n<p>指针类型决定了指针在被解引用操作访问几个字节</p>\n<ul>\n<li><code>int *</code>  类型解引用访问 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span></span></span></span> 个字节</li>\n<li><code>char *</code>  类型解引用访问 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 个字节</li>\n<li>......</li>\n</ul>\n<blockquote>\n<p>相同长度的类型也不能混用</p>\n</blockquote>\n<h3 id=\"意义二\"><a class=\"anchor\" href=\"#意义二\">#</a> 意义二</h3>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nint main()\n&#123;\n    int a = 0x11223344;\n    int *pa = &amp;a;\n    char *pc = (char *)&amp;a;\n\n    printf(&quot;pa = %p\\n&quot;, pa); // 000000000061FE0C\n    printf(&quot;pa + 1 = %p\\n&quot;, pa + 1); // 000000000061FE10\n\n    printf(&quot;pc = %p\\n&quot;, pc); // 000000000061FE0C\n    printf(&quot;pc + 1 = %p\\n&quot;, pc + 1); // 000000000061FE0D\n    // 十进制 100 = 十六进制 0x64\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"/images/c-4\" alt=\"img\" /></p>\n<p>发现  <code>pa</code>  增加了 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span></span></span></span> 个字节， <code>pc</code>  增加了一个字节</p>\n<hr />\n<p>** 结论：** 指针的类型决定了 +- 1 的操作，跳过了几个字节</p>\n<blockquote>\n<p>决定了<mark>指针的步长</mark></p>\n</blockquote>\n<p><img loading=\"lazy\" data-src=\"/images/c-5\" alt=\"img\" /></p>\n<h3 id=\"类型不能通用\"><a class=\"anchor\" href=\"#类型不能通用\">#</a> 类型不能通用</h3>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nint main()\n&#123;\n    int a = 0;\n    int *pi = &amp;a;            // pi 解引用访问 4 个字节， pi + 1 也是跳过 4 个字节\n    float *pf = (float *)&amp;a; // pf 解引用访问 4 个字节， pf + 1 也是跳过 4 个字节\n    // int * 和 float * 是不是可以通用？\n    //   不能！\n    *pi = 100;\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"/images/c-6\" alt=\"img\" /></p>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nint main()\n&#123;\n    int a = 0;\n    int *pi = &amp;a;            // pi 解引用访问 4 个字节， pi + 1 也是跳过 4 个字节\n    float *pf = (float *)&amp;a; // pf 解引用访问 4 个字节， pf + 1 也是跳过 4 个字节\n    // int * 和 float * 是不是可以通用？\n    //   不能！\n    *pf = 100.0;//浮点数是分数，存放的方式与整数不同\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"/images/c-7\" alt=\"img\" /></p>\n<h2 id=\"野指针\"><a class=\"anchor\" href=\"#野指针\">#</a> 野指针</h2>\n<blockquote>\n<p>概念： 野指针就是指针指向的位置是不可知的（随机的、不正确的、没有明确限制的）</p>\n</blockquote>\n<h3 id=\"指针为初始化\"><a class=\"anchor\" href=\"#指针为初始化\">#</a> 指针为初始化</h3>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nint main()\n&#123;\n    int *p; // p 没有初始化，就意味着没有明确的指向\n    // 一个局部变量不初始化的化，默认是随机值: 0xcccccccc\n    //  - 一个非法的地址\n    *p = 10; // 非法访问内存，这里的 p 就是野指针\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"指针越界\"><a class=\"anchor\" href=\"#指针越界\">#</a> 指针越界</h3>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nint main()\n&#123;\n    int arr[10] = &#123;0&#125;;\n    int *p = arr; // arr：首元素地址, &amp;arr[0]\n    for (int i = 0; i &lt;= 10; i++)\n    &#123;\n        // 当指针指向的范围超出数组 arr 的范围时，p 就是野指针\n        *p = i;\n        p++;\n    &#125;\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"指针指向的空间释放\"><a class=\"anchor\" href=\"#指针指向的空间释放\">#</a> 指针指向的空间释放</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#include <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>stdio<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>#include <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>iostream<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 由于 a 是局部变量，调用完 test () 函数后，a 会销毁</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//   - a 的空间释放还给操作系统，不属于当前程序了</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 返回的是 a 的地址</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 此时指针变量 p 获取的是 a 释放后的地址</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">//\t此时 p 属于野指针</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">//a 释放后的该地址没有被覆盖</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 10</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 原先 a 释放后的地址可能会被其他数据覆盖</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ffff\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//a 释放后的该地址可能被覆盖</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 5, 6, 7 等等</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>类似于，女朋友换电话了，你打她之前的电话，发现是别人</p>\n</blockquote>\n<h3 id=\"避免野指针\"><a class=\"anchor\" href=\"#避免野指针\">#</a> 避免野指针</h3>\n<ol>\n<li>指针初始化</li>\n<li>小心指针越界</li>\n<li>指针指向空间释放及时置 NULL</li>\n<li>避免返回局部变量的地址</li>\n<li>指针使用之前检查有效性</li>\n</ol>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n&#123;\n    int a = 10;\n    int *p = &amp;a;\n\n    // NULL -&gt; 0\n    int *p2 = NULL;\n    /*\n    \t// 写入访问权限冲突，0 地址空间不能访问\n\t    *p2 = 100;\n    */\n    if (p2 != NULL) &#123; // if (p3)\n        *p2 = 100;// ok\n    &#125;\n    cout &lt;&lt; p2;\n\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<h2 id=\"指针运算\"><a class=\"anchor\" href=\"#指针运算\">#</a> 指针运算</h2>\n<h3 id=\"指针-正数访问数组\"><a class=\"anchor\" href=\"#指针-正数访问数组\">#</a> 指针 + 正数（访问数组）</h3>\n<p><code>arr[i] = *(arr + i)</code>  等价</p>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n&#123;\n#define N 5\n    float arr[N];\n    float *p;\n    // 虽然 &amp;arr[N] 不属于我，但是可以看他\n    for (p = &amp;arr[0]; p &lt; &amp;arr[N];)\n    &#123;\n        *p++ = 0;\n        //*p = 0;\n        // p++;\n        cout &lt;&lt; *(p - 1) &lt;&lt; &quot; &quot;; // 0 0 0 0 0\n    &#125;\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"/images/c-8\" alt=\"img\" /></p>\n<blockquote>\n<p>注意：</p>\n<p><code>*p++</code>  -&gt;  <code>*p; p++</code></p>\n<p><code>(*p)++</code></p>\n</blockquote>\n<hr />\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n&#123;\n    // -128 ~ 127\n    char arr[5];\n    int n = sizeof(arr) / sizeof(arr[0]);\n    /*\n        char *p = arr;\n        //用指针访问\n        for (int i = 0; i &lt; n; i++, p++) &#123;\n            *p = 1;\n            printf(&quot;%d &quot;, arr[i]); // 1 1 1 1 1\n        &#125;\n    */\n    char *p = arr;\n    // 用指针访问\n    for (int i = 0; i &lt; n; i++)\n    &#123;\n        *(p + i) = 1;\n        printf(&quot;%d &quot;, arr[i]); // 1 1 1 1 1\n    &#125;\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"指针-指针\"><a class=\"anchor\" href=\"#指针-指针\">#</a> 指针 - 指针</h3>\n<pre><code class=\"language-C++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n&#123;\n    int arr[10];\n    printf(&quot;%d\\n&quot;, &amp;arr[9] - &amp;arr[0]); // 9\n    printf(&quot;%d\\n&quot;, &amp;arr[0] - &amp;arr[9]); // -9\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"/images/c-9\" alt=\"img\" /></p>\n<p>| 指针 - 指针 |：得到的指针和指针之间<strong>元素的个数</strong></p>\n<blockquote>\n<p>注意：不是所有的指针都能相减</p>\n<ul>\n<li>指向同一块空间的 2 个指针才能相减，才有意义</li>\n</ul>\n</blockquote>\n<hr />\n<h4 id=\"统计字符串长度\"><a class=\"anchor\" href=\"#统计字符串长度\">#</a> 统计字符串长度</h4>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint myStrlen(char *str);\n\nint main()\n&#123;\n    int len = strlen(&quot;abcdef&quot;);\n    printf(&quot;%d\\n&quot;, len); // 6\n\n    printf(&quot;%d\\n&quot;, myStrlen(&quot;abcdef&quot;)); // 6\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n\n/*\n    str\n    ⬇\n    a b c d e f \\0\n\n    &quot;abcdef&quot; 传入 a 的地址\n    str 遇到 \\0 不统计\n*/\nint myStrlen(char *str)\n&#123;\n    int c = 0;\n    while (*str != '\\0')\n    &#123;\n        c++;\n        str++;\n    &#125;\n    return c;\n&#125;\n</code></pre>\n<p>方式二：采用指针 - 指针</p>\n<p>获取首尾地址。最后用地址相减</p>\n<pre><code class=\"language-c++\">/*\n    str\n    ⬇\n    a b c d e f \\0\n\n    &quot;abcdef&quot; 传入 a 的地址\n    str 遇到 \\0 不统计\n*/\nint myStrlen(char *str)\n&#123;\n    char *start = str;\n    while (*str != '\\0')\n    &#123;\n        str++;\n    &#125;\n    return str - start;\n&#125;\n</code></pre>\n<hr />\n<p>指针 + 指针？地址 + 地址？无意义</p>\n<h3 id=\"指针的关系运算\"><a class=\"anchor\" href=\"#指针的关系运算\">#</a> 指针的关系运算</h3>\n<pre><code class=\"language-c++\">for (int *p = arr[10]; p &gt;= &amp;arr[0];)\n&#123;\n    *--p = 0;\n    // p--;\n    //*p = 0;\n&#125;\n</code></pre>\n<p>代码简化</p>\n<pre><code class=\"language-c++\">for (int *p = arr[10]; p &gt;= &amp;arr[0]; p--)\n&#123;\n    *p = 0;\n&#125;\n</code></pre>\n<p>实际在绝大部分的编译器上是可以顺利完成任务的，然而我们还是应该避免这样写，因为标准并不保证它可行。</p>\n<p><strong>标准规定：</strong></p>\n<blockquote>\n<p>允许指向数组元素的指针与指向数组最后一个元素后面的那个内存位置的指针比较，但是不允许与指向<strong>第一个元素之前</strong>的那个内存位置的指针进行比较。</p>\n</blockquote>\n<p>即允许  <code>p1</code>  和  <code>p2</code>  比，但是不允许  <code>p2</code>  和  <code>p3</code>  比</p>\n<p><img loading=\"lazy\" data-src=\"/images/c-10\" alt=\"img\" /></p>\n<h2 id=\"指针与数组\"><a class=\"anchor\" href=\"#指针与数组\">#</a> 指针与数组</h2>\n<p>数组：一组相同类型元素的集合</p>\n<p>指针变量：是一个变量，存放的是地址</p>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n&#123;\n    int arr[10];\n    // arr 是首元素的地址\n    // &amp;arr[0]\n\n    int *p = arr;\n    // 通过指针访问数组\n    int n = sizeof(arr) / sizeof(&amp;arr[0]);\n    for (int i = 0; i &lt; n; i++)\n    &#123;\n        printf(&quot;%p ----- %p ----- %p\\n&quot;, &amp;arr[i], p + i, arr + i);\n    &#125;\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<p>sdtout</p>\n<ul>\n<li>\n<pre><code>000000000061FDE0 ----- 000000000061FDE0 ----- 000000000061FDE0\n000000000061FDE4 ----- 000000000061FDE4 ----- 000000000061FDE4\n000000000061FDE8 ----- 000000000061FDE8 ----- 000000000061FDE8\n000000000061FDEC ----- 000000000061FDEC ----- 000000000061FDEC\n000000000061FDF0 ----- 000000000061FDF0 ----- 000000000061FDF0\n</code></pre>\n</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"/images/c-11\" alt=\"img\" /></p>\n<h2 id=\"二级指针\"><a class=\"anchor\" href=\"#二级指针\">#</a> 二级指针</h2>\n<p><strong>一级指针</strong></p>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n&#123;\n    int a = 10;\n    int *pa = &amp;a; // pa 是一个「指针变量」，一级指针变量\n    *pa = 20;\n    printf(&quot;%d\\n&quot;, a); // 20\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<p><strong>二级指针</strong></p>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n&#123;\n    int a = 10;\n    int *pa = &amp;a; // pa 是一个「指针变量」，一级指针变量\n\n    // pa 指向 a 的地址 0x0012ff40\n    // ppa 指向 pa 的地址 0x0018ff32\n    int **ppa = &amp;pa; // ppa 是一个「二级指针变量」\n    **ppa = 20;\n    \n    printf(&quot;%d\\n&quot;, a); // 20\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"/images/c-12\" alt=\"img\" /></p>\n<p>二级指针是<strong>用来存放一级指针变量的地址</strong></p>\n<h2 id=\"指针数组\"><a class=\"anchor\" href=\"#指针数组\">#</a> 指针数组</h2>\n<p>存放指针的数组就是指针数组</p>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n&#123;\n    int a = 10;\n    int b = 20;\n    int c = 30;\n\n    int arr[10];\n\n    int *pa = &amp;a;\n    int *pb = &amp;b;\n    int *pc = &amp;c;\n\n    // 多个会比较麻烦，指针数组\n    int *parr[10] = &#123;&amp;a, &amp;b, &amp;c&#125;; // 每个元素都是指针。数组指针，每个对象类型为 int 类型\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<hr />\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n&#123;\n    int a = 10;\n    int b = 20;\n    int c = 30;\n    // 指针数组\n    int *parr[10] = &#123;&amp;a, &amp;b, &amp;c&#125;; // 每个元素都是指针。数组指针，每个对象类型为 int 类型\n    int n = sizeof(parr) / sizeof(parr[0]);\n    for (int i = 0; i &lt; 3; i++)\n    &#123;\n        printf(&quot;%d &quot;, *(parr[i]));\n    &#125;\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5CMrs.Wang%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images-new%5Cimage-20230708204850658.png\" alt=\"image-20230708204850658\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5CMrs.Wang%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images-new%5Cimage-20230708210128604.png\" alt=\"image-20230708210128604\" /></p>\n<p>指针打印二维数组</p>\n<p><code>arr[i] = *(arr + i)</code>  等价</p>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n&#123;\n    // int arr[3][4] = &#123;1, 2, 3, 4, 2, 3, 4, 5, 3, 4, 5, 6&#125;;\n    // 1 2 3 4\n    // 2 3 4 5\n    // 3 4 5 6\n\n    int arr1[4] = &#123;1, 2, 3, 4&#125;;\n    int arr2[4] = &#123;2, 3, 4, 5&#125;;\n    int arr3[4] = &#123;3, 4, 5, 6&#125;;\n\n    int *parr[3] = &#123;arr1, arr2, arr3&#125;; // arr1 数组名代表数组首地址\n\n    for (int i = 0; i &lt; 3; i++)\n    &#123;\n        for (int j = 0; j &lt; 4; j++)\n        &#123;\n            // *(p + i) --&gt; p[i]\n            printf(&quot;%d &quot;, parr[i][j]);\n            //printf(&quot;%d &quot;, *(parr[i] + j));\n            //printf(&quot;%d &quot;, *(*(parr + i) + j));\n        &#125;\n        printf(&quot;\\n&quot;);\n    &#125;\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<hr />\n<pre><code class=\"language-c++\">int* arr1[10]; //整形指针的数组\nchar *arr2[4]; //一级字符指针的数组: char *, char *, char *\nchar **arr3[5];//二级字符指针的数组: char **, char **, char **\n</code></pre>\n<h2 id=\"字符指针const\"><a class=\"anchor\" href=\"#字符指针const\">#</a> 字符指针（const）</h2>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n&#123;\n    char ch = 'a';\n    char *pc = &amp;ch;\n    *pc = 'b';\n    printf(&quot;%c\\n&quot;, ch);\n\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<hr />\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n&#123;\n\n    // 赋值给 p 的是字符串的首字符的地址\n    //         ↓\n    //         abcdef\\0\n    char *p = &quot;abcdef&quot;; // 把字符串首字符 a 的地址赋值给了 p\n    //char arr[] = &quot;abcdef&quot;;\n    \n    // %s 将地址及后面的地址所在字符全部打印出来，遇到 '\\0' 截止\n    //\t- printf 的功能\n    printf(&quot;%s\\n&quot;, p); // abcdef\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<hr />\n<p><code>&quot;abcdef&quot;</code>  是<strong>常量字符串</strong></p>\n<pre><code class=\"language-c++\">char *p = &quot;abcdef&quot;; // 把字符串首字符 a 的地址赋值给了 p\n*p = 'w'; // 报错，写入访问权限冲突\n</code></pre>\n<p>需要加入  <code>const</code></p>\n<pre><code class=\"language-c++\">const char *p = &quot;abcdef&quot;; // 有效的保护字符串\n</code></pre>\n<hr />\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n&#123;\n\n    const char *p1 = &quot;abcdef&quot;;\n    const char *p2 = &quot;abcdef&quot;;\n\n    // arr 数组独立空间\n    char arr1[] = &quot;abcdef&quot;;\n    char arr2[] = &quot;abcdef&quot;;\n\n    if (p1 == p2)\n        printf(&quot;p1 == p2\\n&quot;); // this\n    else\n        printf(&quot;p1 != p2\\n&quot;);\n\n    if (arr1 == arr2)\n        printf(&quot;arr1 == arr2\\n&quot;);\n    else\n        printf(&quot;arr1 != arr2\\n&quot;); // this\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5CMrs.Wang%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images-new%5Cimage-20230710221226758.png\" alt=\"image-20230710221226758\" /></p>\n<hr />\n<h2 id=\"数组指针\"><a class=\"anchor\" href=\"#数组指针\">#</a> 数组指针</h2>\n<p>指针数组：是用来存放指针的数组</p>\n<pre><code class=\"language-c++\">int* arr1[10]; //整形指针的数组\nchar *arr2[4]; //一级字符指针的数组: char *, char *, char *\nchar **arr3[5];//二级字符指针的数组: char **, char **, char **\n</code></pre>\n<hr />\n<pre><code class=\"language-c++\">// p1 是指针数组, p1 先更 [] 结合, [] 的优先级高于 *\n// \t[int *, int *, int *, ...]\nint *p1[10]; \n\n// p2 是数组指针, p2 先更 * 结合，p2 可以指向一个数组, 其中每个元素是 int 类型\n//\t[int, int, int, ...]\nint (*p2)[10]; \n</code></pre>\n<hr />\n<h3 id=\"数组名-2\"><a class=\"anchor\" href=\"#数组名-2\">#</a> 数组名</h3>\n<p>数组名确实能表示首元素地址，但是有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> 个例外</p>\n<ol>\n<li><code>sizeof(数组名)</code> ，这里的数组名<strong>表示整个数组</strong>，计算的是整个数组的大小，单位是字节</li>\n<li><code>&amp;数组名</code> ，这里的数组名表示整个数组，取出的是<strong>整个数组的地址</strong></li>\n</ol>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n&#123;\n    int arr[10] = &#123;9, 8, 7, 6, 5, 4, 3, 2, 1, 0&#125;;\n    printf(&quot;%p\\n&quot;, arr);         // 00D5F940\n    printf(&quot;%p\\n&quot;, arr + 1);     // 00D5F944\n\n    printf(&quot;%p\\n&quot;, &amp;arr[0]);     // 00D5F940\n    printf(&quot;%p\\n&quot;, &amp;arr[0] + 1); // 00D5F944\n\n    printf(&quot;%p\\n&quot;, &amp;arr);        // 00D5F940\n    printf(&quot;%p\\n&quot;, &amp;arr + 1);    // 00D5F968\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<hr />\n<h3 id=\"数组指针-2\"><a class=\"anchor\" href=\"#数组指针-2\">#</a> 数组指针</h3>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n&#123;\n    int arr[10] = &#123;&#125;;\n    //int *p = &amp;arr; //有警告的\n    \n    // 整型指针用来存放整型的指针\n    // 字符指针用来存放字符的指针\n    // 数组指针用来存放数组的指针\n    int (*p2)[10] = &amp;arr;// p2 是数组指针, p2 先更 * 结合，p2 指向数组, 其中每个元素是 int 类型\n    \n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<p>数组指针用来存放数组的指针</p>\n<ul>\n<li><code>int (*p2)[10] = &amp;arr</code></li>\n</ul>\n<p><code>p2</code>  的类型： <code>int (*)[10]</code></p>\n<blockquote>\n<p>数组指针的类型。</p>\n<p>这个指针指向数组，10 个元素，每个元素是  <code>int</code>  类型</p>\n</blockquote>\n<hr />\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n&#123;\n    char *arr[5] = &#123;&#125;;\n    char *(*pc)[5] = &amp;arr;\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<blockquote>\n<p>注意：若  <code>int (*p)[] = &amp;arr</code> ，那么默认为 0 个元素： <code>int (*p)[0]</code></p>\n</blockquote>\n<hr />\n<h3 id=\"数组指针遍历数组\"><a class=\"anchor\" href=\"#数组指针遍历数组\">#</a> 数组指针遍历数组</h3>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n&#123;\n    int arr[10] = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;;\n    int(*p)[10] = &amp;arr; // p2 是数组指针, p2 先更 * 结合，p2 指向数组, 其中每个元素是 int 类型\n\n    int n = sizeof(arr) / sizeof(arr[0]);\n    for (int i = 0; i &lt; n; i++)\n    &#123;\n        // p 是指向数组，存放数组的地址\n        // *p：对 p 解引用，即找到整个数组。\n        //  - 相当于数组名 arr，数组名又是数组首元素的地址\n        //  - 就是：*p == arr\n        //  - *p 本质上是数组首元素的地址\n\n        // *(*p + i)：获取每个元素的地址，然后解引用\n        printf(&quot;%d &quot;, *(*p + i));\n    &#125;\n\n    printf(&quot;%d\\n&quot;, *p == arr); // 1\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<hr />\n<p>上面的写法别扭，最好用其余常用的方法。</p>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n&#123;\n    int arr[10] = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;;\n    int *p = arr;\n    int n = sizeof(arr) / sizeof(arr[0]);\n    for (int i = 0; i &lt; n; i++)\n    &#123;\n        printf(&quot;%d &quot;, *p + i);\n    &#125;\n\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<hr />\n<h3 id=\"数组指针的常见用法二维数组\"><a class=\"anchor\" href=\"#数组指针的常见用法二维数组\">#</a> 数组指针的常见用法（二维数组）</h3>\n<pre><code class=\"language-c++\">/*\n    数组名 arr 首元素地址\n    二维数组的首元素是第一行的地址：一维数组的地址\n    p 数组指针，存放数组的地址\n    *p：对 p 解引用，即找到整个数组。\n    - 相当于数组名 arr，数组名又是数组首元素的地址\n    - 就是：*p == arr\n    - *p 本质上是数组首元素的地址\n    访问每一行 p + 1\n*/\nvoid print2(int (*p)[5], int r, int c)\n&#123;\n    for (int i = 0; i &lt; r; i++)\n    &#123;\n        // *(p + i) 相当于获取第 i 行的「数组名」\n        printf(&quot;%d\\n&quot;, sizeof(*(p + i))); // 20，这是特例\n        int *p1 = *(p + i);\n        printf(&quot;%d\\n&quot;, sizeof(p1)); // 8（指针大小）\n    &#125;\n&#125;\n</code></pre>\n<hr />\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5CMrs.Wang%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images-new%5Cimage-20230711225509361.png\" alt=\"image-20230711225509361\" /></p>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nvoid print1(int arr[3][5], int r, int c)\n&#123;\n    for (int i = 0; i &lt; r; i++)\n    &#123;\n        for (int j = 0; j &lt; c; j++)\n        &#123;\n            printf(&quot;%d &quot;, arr[i][j]);\n        &#125;\n        printf(&quot;\\n&quot;);\n    &#125;\n&#125;\n\n// 数组名 arr 首元素地址\n// 二维数组的首元素是第一行的地址：一维数组的地址\n// p 为数组指针。访问每一行 p + 1\nvoid print2(int (*p)[5], int r, int c)\n&#123;\n    for (int i = 0; i &lt; r; i++)\n    &#123;\n        for (int j = 0; j &lt; c; j++)\n        &#123;\n            // *(p + i)：获取每一行的地址，相当于数组名\n            // *(p + i) + j：获取 i 行第 j 列的地址\n            printf(&quot;%d &quot;, *(*(p + i) + j));\n        &#125;\n        printf(&quot;\\n&quot;);\n    &#125;\n&#125;\n\nint main()\n&#123;\n\n    int arr[3][5] = &#123;1, 2, 3, 4, 5, 2, 3, 4, 5, 6, 3, 4, 5, 6, 7&#125;;\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int m = sizeof(arr[0], arr[0][0]);\n    // arr 首元素地址\n    print2(arr, n, m);\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<p><code>p + 1</code>  为什么跳过一行？</p>\n<ul>\n<li>\n<p><code>int (*p)[5];</code></p>\n<p><code>p</code>  的类型： <code>int (*)[10]</code></p>\n<p><code>p</code>  指向一个整型数组，5 个元素，每个元素是  <code>int</code>  类型</p>\n<p><code>p + 1</code>  ：跳过一个 5 个  <code>int</code>  元素的数组</p>\n</li>\n</ul>\n<h2 id=\"数组指针数组\"><a class=\"anchor\" href=\"#数组指针数组\">#</a> 数组指针数组</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//arr 是整型数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>parr1<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//parr1 是数组，每一个元素是 int * 类型，整型指针数组</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>parr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//parr2 是数组指针</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        parr3 先更 [10] 结合，是一个数组，10 个元素，其中每个元素是 int (*)[5] 类型</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        首先移除 parr3 [10], 剩余 int (*)[5] 是数组指针类型</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        而 parr3 [10] 又是数组，</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        那么整体: parr3 是存放数组指针的数组</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            - 数组 10 个元素，每个元素是数组指针</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>parr3<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"C:%5CUsers%5CMrs.Wang%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images-new%5Cimage-20230711233632878.png\" alt=\"image-20230711233632878\" /></p>\n<h2 id=\"数组参数-指针参数\"><a class=\"anchor\" href=\"#数组参数-指针参数\">#</a> 数组参数、指针参数</h2>\n<h3 id=\"一维数组传参\"><a class=\"anchor\" href=\"#一维数组传参\">#</a> 一维数组传参</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//ok</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//ok</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">)</span><span class=\"token comment\">//ok</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//ok</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//ok</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 二级指针是指向一级指针的地址</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>arr<span class=\"token punctuation\">)</span><span class=\"token comment\">//ok</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr2<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"二维数组传参\"><a class=\"anchor\" href=\"#二维数组传参\">#</a> 二维数组传参</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//ok</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//err</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//ok</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 总结：二维数组传参，函数形参的设计只能省略第一个 [] 的数字。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 因为对一个二维数组，可以不知道有多少行，但是必须知道一行多少元素。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 这样才方便运算。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//arr 是指针，指向的是 int 类型</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">)</span><span class=\"token comment\">//err：一维数组的地址不能放入 int 类型</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//err：arr 先更 [5] 结合，是数组，每个元素是 int * 类型</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//p2 是数组指针，p2 先更 * 结合，p2 指向数组，其中每个元素是 int 类型</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//ok</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 二级指针是指向一级指针的地址</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>arr<span class=\"token punctuation\">)</span><span class=\"token comment\">//err</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 二维数组的数组名，表示首元素的地址，其实是第一行的地址</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">//\t- 第一行是一个一维数组</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"一级指针传参\"><a class=\"anchor\" href=\"#一级指针传参\">#</a> 一级指针传参</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sz<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>sz<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 一级指针 p，传给函数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<p>反过来思考：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//test1 函数能接收什么参数？</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tint a = 10;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tint *ptr = &amp;a;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\ttest1(&amp;a);</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\ttest1(ptr);</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tint arr[10];</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\ttest1(arr);</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"二级指针传参\"><a class=\"anchor\" href=\"#二级指针传参\">#</a> 二级指针传参</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> ptr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>pp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>pp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<p>反过来思考：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 二级指针存放的是一级指针的地址</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>p2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 指针数组</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"函数指针\"><a class=\"anchor\" href=\"#函数指针\">#</a> 函数指针</h2>\n<h3 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h3>\n<p>数组指针：指向<strong>数组</strong>的指针就是数组指针</p>\n<p>函数指针：指向<strong>函数</strong>的指针就是函数指针</p>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint add(int x, int y)\n&#123;\n    return x + y;\n&#125;\nint main()\n&#123;\n    int arr[5] = &#123;&#125;;\n    //&amp;arr - 取出的数组的地址\n    int (*p)[5] = &amp;arr; // 数组指针\n\n    //&amp;函数名 - 取出的就是函数的地址呢？\n    printf(&quot;%p\\n&quot;, &amp;add); // 0000000000401550\n    printf(&quot;%p\\n&quot;, add);  // 0000000000401550\n    //对于函数来说，&amp;函数名和函数名都是函数的地址，没有什么特殊的\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<hr />\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint add(int x, int y)\n&#123;\n    return x + y;\n&#125;\nint main()\n&#123;\n    int arr[5] = &#123;&#125;;\n    //&amp;arr - 取出的数组的地址\n    int(*p)[5] = &amp;arr; // 数组指针\n\n    // pf 是指针，指向的是函数 ()，参数是 int, int，函数的返回类型是 int\n    //  - 发现更数组指针写法一样\n    // pf 的类型是 int (*)(int, int)\n    int (*pf)(int, int) = &amp;add;\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<h3 id=\"调用函数\"><a class=\"anchor\" href=\"#调用函数\">#</a> 调用函数</h3>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint add(int x, int y)\n&#123;\n    return x + y;\n&#125;\nint main()\n&#123;\n    /*\n        int a = 10;\n        int *pa = &amp;a;\n        *pa = 20;\n        printf(&quot;%d\\n&quot;, pa);\n    */\n    //int (*pf)(int, int) = &amp;add;\n    int (*pf)(int, int) = add;\n    \n    // 先解引用找到函数 (*pf)，然后传参并调用函数\n    int ans = (*pf)(2, 3);\n    // 可以直接用，此时 * 是个摆设\n    // 由于 add() 函数的地址 add 给了 pf，由于 add(2, 3) 可以，那么 pf(2, 3) 也应该可以\n    // 此时 pf 与 add 等价\n    int ans1 = pf(2, 3); // 5\n    \n    printf(&quot;%d\\n&quot;, ans); // 5\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<hr />\n<h3 id=\"形参传入函数地址\"><a class=\"anchor\" href=\"#形参传入函数地址\">#</a> 形参传入函数地址</h3>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint add(int x, int y)\n&#123;\n    return x + y;\n&#125;\n\n// pf 获取到函数地址\nvoid calc(int (*pf)(int, int))\n&#123;\n    int a = 3;\n    int b = 5;\n    int ans = pf(a, b);\n    printf(&quot;%d&quot;, ans); // 8\n&#125;\n\nint main()\n&#123;\n    // 将函数地址传入 calc 函数\n    calc(add);\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<hr />\n<h3 id=\"二者结合\"><a class=\"anchor\" href=\"#二者结合\">#</a> 二者结合</h3>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint test(const char *s)\n&#123;\n    return 0;\n&#125;\n\n// pf 获取到函数地址\nvoid test2(int (*pf)(int, int))\n&#123;\n    int a = 3;\n    int b = 5;\n    int ans = pf(a, b);\n    printf(&quot;%d\\n&quot;, ans); // 8\n&#125;\n\nint add(int x, int y)\n&#123;\n    return x + y;\n&#125;\n\nint main()\n&#123;\n    int (*pf)(const char *) = test;\n\n    void (*pf2)(int (*)(int, int)) = test2;\n\n    //调用 test2 函数\n    // (*pf2)(add);\n    pf2(add);\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<hr />\n<h3 id=\"练习\"><a class=\"anchor\" href=\"#练习\">#</a> 练习</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tvoid (*p)();</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tp 是函数指针</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tt = void (*)() 是函数指针类型</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t(t) 0 强制类型转换：0 强制转换为函数指针类型</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t说明 0 是一个函数的地址 a</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t*a 解引用，找到函数 f，然后 f () 调用函数</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t-----------------------------------</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t上述为一次函数调用，调用的是 0 作为地址处的函数。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t1. 把 0 强制类型转化为：无参，返回类型是 void 的函数的地址</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t2. 调用 0 地址处的函数</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>*/</span></pre></td></tr></table></figure><hr />\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">*</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tsignal 先与 (...) 结合，所以是函数名</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tsignal ( int, void (*)(int) ) 是一次函数的声明</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t- int add (int x, int y)&#123;&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t  int add (int, int); // 函数声明</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t剩余 void (* )(int); 为函数指针类型</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t------------</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t声明的 signal 函数的第一个参数的类型是 int， 第二个参数的类型是函数指针（该函数指针指向的函数参数是 int，返回类型是 void），signal 函数的 == 返回类型也是一个函数指针 ==。整体也是一次函数声明</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token class-name\">pf_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 把 void (*)(int) 类型重命名为 pf_t</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 简化 void (*signal ( int, void (*)(int) ) )(int);</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">pf_t</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">pf_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"函数指针的用途回调函数根据不同的需求调用不同函数\"><a class=\"anchor\" href=\"#函数指针的用途回调函数根据不同的需求调用不同函数\">#</a> 函数指针的用途（回调函数）（根据不同的需求调用不同函数）</h3>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\n// 写一个计算器\n// 加法、减法、乘法、除法\nvoid menu()\n&#123;\n    printf(&quot;*********************************\\n&quot;);\n    printf(&quot;******* 1. add    2. sub ********\\n&quot;);\n    printf(&quot;******* 3. mul    2. div ********\\n&quot;);\n    printf(&quot;******* 0. exit          ********\\n&quot;);\n    printf(&quot;*********************************\\n&quot;);\n&#125;\n\nint add(int x, int y)\n&#123;\n    return x + y;\n&#125;\n\nint sub(int x, int y)\n&#123;\n    return x - y;\n&#125;\n\nint mul(int x, int y)\n&#123;\n    return x * y;\n&#125;\n\nint div1(int x, int y)\n&#123;\n    return x / y;\n&#125;\n\nint main()\n&#123;\n\n    int input = 1;\n    int x = 0;\n    int y = 0;\n    int ans = 0;\n    do\n    &#123;\n        menu();\n        printf(&quot;请选择：&gt;&quot;);\n        scanf(&quot;%d&quot;, &amp;input);\n\n        switch (input)\n        &#123;\n        case 1:\n            printf(&quot;\\n请输入操作数&quot;);\n            scanf(&quot;%d %d&quot;, &amp;x, &amp;y);\n            ans = add(x, y);\n            printf(&quot;%d\\n&quot;, ans);\n            break;\n        case 2:\n            printf(&quot;\\n请输入操作数&quot;);\n            scanf(&quot;%d %d&quot;, &amp;x, &amp;y);\n            ans = sub(x, y);\n            printf(&quot;%d\\n&quot;, ans);\n            break;\n        case 3:\n            printf(&quot;\\n请输入操作数&quot;);\n            scanf(&quot;%d %d&quot;, &amp;x, &amp;y);\n            ans = mul(x, y);\n            printf(&quot;%d\\n&quot;, ans);\n            break;\n        case 4:\n            printf(&quot;\\n请输入操作数&quot;);\n            scanf(&quot;%d %d&quot;, &amp;x, &amp;y);\n            ans = div1(x, y);\n            printf(&quot;%d\\n&quot;, ans);\n            break;\n        case 0:\n            printf(&quot;退出计算机\\n&quot;);\n            break;\n        default:\n            printf(&quot;选择错误\\n&quot;);\n            break;\n        &#125;\n\n    &#125; while (input);\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<hr />\n<p>发现代码冗余，将  <code>case</code>  中函数封装</p>\n<pre><code class=\"language-c++\">...\n\n// 回调函数\nvoid calc(int (*pf)(int, int))\n&#123;\n    int x = 0;\n    int y = 0;\n    int ans = 0;\n    printf(&quot;\\n请输入操作数: &quot;);\n    scanf(&quot;%d %d&quot;, &amp;x, &amp;y);\n    ans = pf(x, y);\n    printf(&quot;%d\\n&quot;, ans);\n&#125;\n\nint main()\n&#123;\n\n    int input = 1;\n    do\n    &#123;\n        menu();\n        printf(&quot;请选择：&gt;&quot;);\n        scanf(&quot;%d&quot;, &amp;input);\n\n        switch (input)\n        &#123;\n        case 1:\n            // 将目的函数地址作为形参传入 calc 函数\n            calc(add);\n            break;\n        case 2:\n            calc(sub);\n            break;\n        case 3:\n            calc(mul);\n            break;\n        case 4:\n            calc(div1);\n            break;\n        case 0:\n            printf(&quot;退出计算机\\n&quot;);\n            break;\n        default:\n            printf(&quot;选择错误\\n&quot;);\n            break;\n        &#125;\n\n    &#125; while (input);\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<h2 id=\"函数指针数组转移表\"><a class=\"anchor\" href=\"#函数指针数组转移表\">#</a> 函数指针数组（转移表）</h2>\n<p>指针数组： <code>int *arr1[5];</code>   <code>char *arr2[5];</code></p>\n<p>函数指针也是指针</p>\n<p>把函数和指针放在数组中，就是函数指针数组</p>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\n...\nint main()\n&#123;\n\n    // pf 是函数指针\n    int (*pf)(int, int) = add;\n\n    // arr 先更 [4] 结合，是一个数组，4 个元素，其中每个元素是函数指针类型：int (*)(int, int)\n    int (*arr[4])(int, int)&#123;add, sub, mul, div1&#125;;\n\n    for (int i = 0; i &lt; 4; i++)\n    &#123;\n        // (* arr[i])(4, 8);\n        int ans = arr[i](8, 4);\n        \n        printf(&quot;%d &quot;, ans); // 12 4 32 2\n    &#125;\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<hr />\n<h3 id=\"函数指针数组的用途根据不同的需求调用不同函数\"><a class=\"anchor\" href=\"#函数指针数组的用途根据不同的需求调用不同函数\">#</a> 函数指针数组的用途（根据不同的需求调用不同函数）</h3>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\n// 写一个计算器\n// 加法、减法、乘法、除法\nvoid menu()\n&#123;\n    printf(&quot;*********************************\\n&quot;);\n    printf(&quot;******* 1. add    2. sub ********\\n&quot;);\n    printf(&quot;******* 3. mul    2. div ********\\n&quot;);\n    printf(&quot;******* 0. exit          ********\\n&quot;);\n    printf(&quot;*********************************\\n&quot;);\n&#125;\n\nint add(int x, int y)\n&#123;\n    return x + y;\n&#125;\n\nint sub(int x, int y)\n&#123;\n    return x - y;\n&#125;\n\nint mul(int x, int y)\n&#123;\n    return x * y;\n&#125;\n\nint div1(int x, int y)\n&#123;\n    return x / y;\n&#125;\n\n// 回调函数\nvoid calc(int (*pf)(int, int))\n&#123;\n    int x = 0;\n    int y = 0;\n    int ans = 0;\n    printf(&quot;\\n请输入操作数: &quot;);\n    scanf(&quot;%d %d&quot;, &amp;x, &amp;y);\n    ans = pf(x, y);\n    printf(&quot;%d\\n&quot;, ans);\n&#125;\n\nint main()\n&#123;\n\n    int input = 1;\n    // 函数指针数组\n    // 转移表\n    int (*arr[])(int, int) = &#123;0, add, sub, mul, div1&#125;;\n    cout &lt;&lt; arr[0];\n    do\n    &#123;\n        menu();\n        printf(&quot;请选择：&gt;&quot;);\n        scanf(&quot;%d&quot;, &amp;input);\n        if (input &gt;= 1 &amp;&amp; input &lt;= 4)\n        &#123;\n            // 函数指针，获取函数的地址\n            int (*pf)(int, int) = arr[input];\n            calc(pf);\n        &#125;\n\n    &#125; while (input);\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<h2 id=\"指向函数指针数组的指针\"><a class=\"anchor\" href=\"#指向函数指针数组的指针\">#</a> 指向函数指针数组的指针</h2>\n<pre><code class=\"language-c++\">int main()\n&#123;\n\n    int input = 1;\n    // 函数指针数组\n    int (*pfarr[])(int, int) = &#123;0, add, sub, mul, div1&#125;;\n\n    // 指向「函数指针数组」的指针\n    //  ppfarr 首先更 * 结合是一个指针，再更 [5] 结合，指向一个数组，5 个元素\n    //      - 还剩余 int (*)(int, int)。\n    //  数组中每个元素类型为函数指针类型：int (*)(int, int)\n    \n    int (*(*ppfarr)[5])(int, int) = &amp;pfarr;\n\n    system(&quot;pause&quot;);\n    return 0;\n</code></pre>\n<h2 id=\"回调函数void\"><a class=\"anchor\" href=\"#回调函数void\">#</a> 回调函数（void *）</h2>\n<blockquote>\n<p>回调函数就是一个通过函数指针调用的函数。如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由另外的一方调用的，用于对该事件或条件进行响应</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 回调函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n请输入操作数: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ans <span class=\"token operator\">=</span> <span class=\"token function\">pf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\n// size_t 类型表示C中任何对象所能达到的最大长度，它是无符号整数。\n// void 指针可以指向任意类型的数据，就是说可以用任意类型的指针对 void 指针对 void 指针赋值\nvoid qsort(void *base,                                // 你要比较的数据的起始地址\n           size_t num,                                // 待排序的数据元素个数\n           size_t width,                              // 待排序的数据元素的大小（单位是字节）\n           int (*cmp)(const void *e1, const void *e2) // 函数指针-比较函数\n);\n\n// 比较 2 个整型元素\n//  e1 指向一个整数\n//  e2 指向一个整数\nint cmp_int(const void *e1, const void *e2)\n&#123;\n    return *(int *)e1 - *(int *)e2;\n&#125;\n\nint main()\n&#123;\n\n    int arr[] = &#123;9, 8, 7, 6, 5, 4, 3, 2, 1&#125;;\n    int n = sizeof(arr) / sizeof(arr[0]);\n    // qsort 排序\n    qsort(arr, n, sizeof(arr[0]), cmp_int);\n    for (int i = 0; i &lt; n; i++)\n    &#123;\n        cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;;\n    &#125;\n    cout &lt;&lt; endl;\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<h1 id=\"结构体\"><a class=\"anchor\" href=\"#结构体\">#</a> 结构体</h1>\n<h2 id=\"结构体的定义\"><a class=\"anchor\" href=\"#结构体的定义\">#</a> 结构体的定义</h2>\n<p>结构是一些值的集合，这些值称为成员变量。</p>\n<blockquote>\n<p>结构的每个成员可以是不同类型的变量</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 声明的结构体类型 struct Person</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">char</span> tel<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">char</span> gender<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> high<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr />\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 声明的结构体类型 struct Person</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">char</span> tel<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">char</span> gender<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> high<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span> p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">;</span> <span class=\"token comment\">//p1, p2 是使用 struct Person 结构体类型创建的 2 个变量</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//p1, p2 是两个全局的结构体变量</span></pre></td></tr></table></figure><hr />\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\n// 声明的结构体类型 struct Person\nstruct Person\n&#123;\n    char name[20];\n    char tel[12];\n    char gender[5];\n    int high;\n&#125;;\n\nint main()\n&#123;\n    struct Person p1; // 结构体变量的创建\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<hr />\n<p><code>struct Person p1</code> ： <code>p1</code>  是结构体变量</p>\n<hr />\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 声明的结构体类型 struct Person</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">char</span> tel<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">char</span> gender<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> high<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stu</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"匿名结构体类型\"><a class=\"anchor\" href=\"#匿名结构体类型\">#</a> 匿名结构体类型</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 匿名结构体类型只能使用一次</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">char</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">float</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 匿名结构体类型只能使用一次</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">char</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">float</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span> <span class=\"token comment\">//p 匿名结构体的指针</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// 警告：编译器会把上面的两个声明当成完全不同的两个类型。所以是非法的。</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    p <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"结构的自引用\"><a class=\"anchor\" href=\"#结构的自引用\">#</a> 结构的自引用</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上述为错误写法，因为编译器认为这是<strong>同一个类型的结构体</strong>，无线套娃下去。即节点包节点......</p>\n<hr />\n<p>正确写法：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数据域</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 指针域</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 16</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>因为结构体指针大小是固定的，存放地址的。</p>\n</blockquote>\n<hr />\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Node <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span>Node<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>错误。匿名结构体需要结构体存在，而结构体存在又需要匿名。即：鸡生蛋问题。</p>\n<hr />\n<h2 id=\"结构体的重命名\"><a class=\"anchor\" href=\"#结构体的重命名\">#</a> 结构体的重命名</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Node <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">*</span> LinkList<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>等价于</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Node <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token operator\">*</span> LinkList<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ListList 是指针类型</span></pre></td></tr></table></figure><hr />\n<h2 id=\"结构体的初始化\"><a class=\"anchor\" href=\"#结构体的初始化\">#</a> 结构体的初始化</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 声明的结构体类型 struct Person</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> name<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">char</span> tel<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">char</span> gender<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> high<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token string\">\"15596668862\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token number\">172</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结构体变量的创建以及赋值，初始化</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<p>嵌套结构体</p>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\n// 声明的结构体类型 struct Person\nstruct Person\n&#123;\n    char name[20];\n    char tel[12];\n    char gender[5];\n    int high;\n&#125;;\n\nstruct Stu\n&#123;\n    struct Person p;\n    int num;\n    float f;\n&#125;;\nint main()\n&#123;\n    struct Person p1 = &#123;\n        &quot;张三&quot;,\n        &quot;15596668862&quot;,\n        &quot;男&quot;,\n        172&#125;; // 结构体变量的创建以及赋值，初始化\n\n    struct Stu s = &#123;\n        &#123;&quot;李四&quot;,\n         &quot;15596668863&quot;,\n         &quot;男&quot;,\n         170&#125;,\n        100,\n        3.14&#125;;\n    \n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5CMrs.Wang%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images-new%5Cimage-20230708214355838.png\" alt=\"image-20230708214355838\" /></p>\n<p>发现  <code>f = 3.1400001</code> ，浮点数在内存中不能精确保存</p>\n<hr />\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Point</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span>n1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结构体嵌套初始化</span></pre></td></tr></table></figure><h2 id=\"结构体成员的访问\"><a class=\"anchor\" href=\"#结构体成员的访问\">#</a> 结构体成员的访问</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s,%s,%s,%d\\n\"</span><span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">.</span>tel<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">.</span>high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s,%s,%s,%d\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">.</span>tel<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">.</span>high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"结构体指针与结构体变量\"><a class=\"anchor\" href=\"#结构体指针与结构体变量\">#</a> 结构体指针与结构体变量</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %s %s %d\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>tel<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>gender<span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 结构体指针 -> 成员变量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s %s %s %d\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>tel<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 结构体变量。成员变量</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Person</span> p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token string\">\"15596668862\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token number\">172</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 结构体变量的创建以及赋值，初始化</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stu</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        &#123;\"李四\",</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         \"15596668863\",</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         \"男\",</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         <span class=\"token number\">170</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token number\">100</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token number\">3.14</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s,%s,%s,%d\\n\"</span><span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">.</span>tel<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">.</span>high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 张三，15596668862, 男，172</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s,%s,%s,%d\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">.</span>tel<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">.</span>high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 张三，15596668862, 男，172</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">print1</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 张三，15596668862, 男，172</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">print2</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 张三，15596668862, 男，172</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面的  <code>print1</code>  和  <code>print2</code>  函数哪个好些？</p>\n<p>答案是：首选  <code>print2</code>  函数。</p>\n<blockquote>\n<p>函数传参的时候，参数是需要压栈的。 如果传递一个结构体对象的时候，结构体过大，参数压栈的的系统开销比较大，所以会导致性能的下降。</p>\n</blockquote>\n<p><strong>结论</strong>： 结构体传参的时候，要传结构体的地址。</p>\n<h1 id=\"动态内存管理\"><a class=\"anchor\" href=\"#动态内存管理\">#</a> 动态内存管理</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 内存空间大小不能更改</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 4 个字节</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 40 个字节</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"malloc-和-free\"><a class=\"anchor\" href=\"#malloc-和-free\">#</a> malloc 和 free</h2>\n<p>C 语言提供了一个动态内存开辟的函数：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">malloc</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个函数向内存申请一块<strong>连续可用</strong>的空间，并返回指向这块空间的指针。</p>\n<ul>\n<li>\n<p>如果开辟成功，则返回一个指向开辟好空间的指针。</p>\n</li>\n<li>\n<p>如果开辟失败，则返回一个  <code>NULL</code>  指针，因此  <code>malloc</code>  的返回值一定要做检查。</p>\n</li>\n<li>\n<p>返回值的类型是  <code>void*</code>  ，所以 malloc 函数并不知道开辟空间的类型，具体在使用的时候使用者自己 来决定。</p>\n</li>\n<li>\n<p>如果参数  <code>size</code>  为 0， <code>malloc</code>  的行为是标准是未定义的，取决于编译器。</p>\n</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span> <span class=\"token comment\">//malloc 函数的头文件</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 动态内存开辟</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 使用内存</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0 1 2 3 4 5 6 7 8 9</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 由于 malloc... 申请的空间在堆区，那么需要自己释放空间</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 没有 free 并不是说内存空间就不会回收了，当程序推出的时候，系统会自动回收内存空间</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//f p 是野指针。</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<p>free 函数用来释放动态开辟的内存。</p>\n<ul>\n<li>\n<p>如果参数  <code>ptr</code>  指向的空间不是动态开辟的，那 free 函数的行为是未定义的。</p>\n</li>\n<li>\n<p>如果参数  <code>ptr</code>  是 NULL 指针，则函数什么事都不做。</p>\n</li>\n</ul>\n<hr />\n<h2 id=\"calloc\"><a class=\"anchor\" href=\"#calloc\">#</a> calloc</h2>\n<p>函数的功能是为  <code>num</code>  个大小为  <code>size</code>  的元素开辟一块空间，并且把空间的每个字节初始化为 0。</p>\n<p>与函数  <code>malloc</code>  的区别只在于  <code>calloc</code>  会在返回地址之前把申请的空间的每个字节初始化为全 0。</p>\n<pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#include &lt;errno.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt; // malloc 函数的头文件\n\n// 开辟 10 个整型的空间\nint main()\n&#123;\n    int *p = (int *)calloc(10, sizeof(int));\n    if (p == NULL)\n    &#123;\n        printf(&quot;%s\\n&quot;, strerror(errno));\n    &#125;\n    // 打印\n    for (int i = 0; i &lt; 10; i++)\n    &#123;\n        printf(&quot;%d &quot;, *(p + i));\n    &#125;\n    // 释放\n    free(p);\n    p = NULL;\n\n    system(&quot;pause&quot;);\n    return 0;\n&#125;\n</code></pre>\n<h2 id=\"realloc\"><a class=\"anchor\" href=\"#realloc\">#</a> realloc</h2>\n<ul>\n<li>\n<p><code>realloc</code>  函数的出现让动态内存管理更加灵活。</p>\n</li>\n<li>\n<p>有时会我们发现过去申请的空间太小了，有时候我们又会觉得申请的空间过大了，那为了合理的时候内存，我们一定会对内存的大小做灵活的调整。那  <code>realloc</code>  函数就可以做到对动态开辟内存大小 的调整。</p>\n</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">realloc</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span>  ptr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>ptr</code>  是要调整的内存地址</p>\n</li>\n<li>\n<p><code>size</code>  调整之后新大小</p>\n</li>\n<li>\n<p>返回值为调整之后的内存起始位置。</p>\n</li>\n<li>\n<p>这个函数调整原内存空间大小的基础上，还会将原来内存中的数据移动到 新 的空间。</p>\n</li>\n<li>\n<p><code>realloc</code>  在调整内存空间的是存在两种情况：</p>\n<ul>\n<li>\n<p>情况 1：原有空间之后有足够大的空间</p>\n</li>\n<li>\n<p>情况 2：原有空间之后没有足够大的空间</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5CMrs.Wang%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images-new%5Cimage-20230713210653883.png\" alt=\"image-20230713210653883\" /></p>\n<p><strong>情况一</strong></p>\n<p>当是情况 1 的时候，要扩展内存就直接原有内存之后直接追加空间，原来空间的数据不发生变化</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5CMrs.Wang%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images-new%5Cimage-20230713210627230.png\" alt=\"image-20230713210627230\" /></p>\n<p><strong>情况二</strong></p>\n<p>当是情况 2 的时候，原有空间之后没有足够多的空间时，扩展的方法是：在堆空间上另找一个合适大小 的连续空间来使用。这样函数返回的是一个新的内存地址。</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5CMrs.Wang%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images-new%5Cimage-20230713210642324.png\" alt=\"image-20230713210642324\" /></p>\n<p>由于上述的两种情况， <code>realloc</code>  函数的使用就要注意一些。</p>\n<h2 id=\"常见错误\"><a class=\"anchor\" href=\"#常见错误\">#</a> 常见错误</h2>\n<h3 id=\"1对null指针解引用\"><a class=\"anchor\" href=\"#1对null指针解引用\">#</a> 1. 对 NULL 指针解引用</h3>\n<p>代码如下（示例）：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 对 p 这个地址解引用并赋值为 0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>malloc 等等函数在开辟空间时都是有可能开辟失败的，万一失败，就是返回空指针，你直接对空指针解引用并赋值肯定是有问题的</p>\n<p>所以我们这里还是要进行指针检验<br />\n代码如下（示例）：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 如果返回，开辟失败结束程序，如果没有返回则可进行下面的操作</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 对 p 这个地址解引用并赋值为 0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"2对动态开辟空间的越界访问\"><a class=\"anchor\" href=\"#2对动态开辟空间的越界访问\">#</a> 2. 对动态开辟空间的越界访问</h3>\n<p>代码如下（示例）：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//200 个字节也就是 50 个 int 型</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个代码乍一看上去没有问题，但是仔细看的话就会发现端倪，malloc 开辟 200 字节空间也就是 50 个 int 型，你 for 循环赋值最多循环次数也只能是 50 次啊，你循环 60 次肯定是越界访问了，这里也是妥妥的会报错。</p>\n<h3 id=\"3对非动态开辟使用free函数\"><a class=\"anchor\" href=\"#3对非动态开辟使用free函数\">#</a> 3. 对非动态开辟使用 free 函数</h3>\n<p>代码如下（示例）：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们这里 int 创建了 a，然后把 a 的地址赋给了 int * 类型的 p，再然后 free 掉 p。这种操作也是铁定会报错的，p 这个局部变量是在栈上的，而 free 函数针对的是堆区</p>\n<p>4. 使用 free 释放一块动态内存开辟内存的一部分<br />\n代码如下（示例）：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使用 free 释放一块动态内存开辟内存的一部分</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 使用</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token operator\">*</span>p<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 释放</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里的代码有什么问题呢？我们画一个图就一目了然了</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5CMrs.Wang%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images-new%5C5bd41aaa0ac7449d85d4432fd1543b1e.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<p>一开始 p 在上图位置，然而随着 for 循环，p++ 这个操作，p 指向的位置不断往后，一直到下图位置</p>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5CMrs.Wang%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images-new%5C843fa8b65b0d4f7baa12a069ad41be37.png#pic_center\" alt=\"在这里插入图片描述\" /></p>\n<p>这时 p 已经不指向原先开辟空间的位置了，你这时候去用 free 释放掉显然是不合适的</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">5.</span>对同一块空间多次释放</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>我们先来看<span class=\"token number\">2</span>段代码：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>两段代码都是对同一块空间多次释放，但第一段代码会报错，第二段不会。<br />\n解释如下：<br />\n第一段代码你已经释放掉 p 所指向的空间了，空间里什么也没有了，但 p 仍然指向那块空间，所以你再次释放不属于你的空间肯定会报错。<br />\n第二段代码你释放掉 p 所指向空间，然后用空指针给 p 赋值，再去释放空指针，我们知道，free 空指针是什么也不做，所以不会报错。</p>\n<h3 id=\"6动态开辟内存忘记释放\"><a class=\"anchor\" href=\"#6动态开辟内存忘记释放\">#</a> 6. 动态开辟内存忘记释放</h3>\n<p>对于动态开辟内存忘记释放，在堆区上申请的空间有 2 种回收方式：<br />\n1. 你自己 free 掉<br />\n 2. 程序退出时，系统自动回收<br />\n我们先来看一段代码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span><span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>该代码我们没有自己使用 free 来释放内存，而中间又有 getchar 一直在等待接收字符，打个比方：假如你中途去上厕所或者干其他事情了，getchar 一直没有接收到字符，程序就一直没有结束，那我们用 p 开辟的空间在你上厕所期间就一直被占用，那块空间系统没办法去做别的有意义的事情。而上升到将来公司层面：我们写的程序可能一天 24h 都在跑，那遇到这种情况，你没有 free 掉内存，你不用又不回收，整体效率的影响是非常大的。</p>\n<h2 id=\"cc-的内存开辟\"><a class=\"anchor\" href=\"#cc-的内存开辟\">#</a> c/c++ 的内存开辟</h2>\n<p><img loading=\"lazy\" data-src=\"C:%5CUsers%5CMrs.Wang%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images-new%5Cimage-20230713212938387.png\" alt=\"image-20230713212938387\" /></p>\n<p>C/C++ 程序内存分配的几个区域：</p>\n<blockquote>\n<ol>\n<li>栈区（stack）：在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结<br />\n束时这些存储单元自动被释放。栈内存分配运算内置于处理器的指令集中，效率很高，但是<br />\n分配的内存容量有限。 栈区主要存放运行函数而分配的局部变量、函数参数、返回数据、返<br />\n回地址等。</li>\n<li>堆区（heap）：一般由程序员分配释放， 若程序员不释放，程序结束时可能由 OS 回收 。分配方式类似于链表。</li>\n<li>数据段（静态区）（static）存放全局变量、静态数据。程序结束后由系统释放。</li>\n<li>代码段：存放函数体（类成员函数和全局函数）的二进制代码。</li>\n</ol>\n</blockquote>\n<p>有了这幅图，我们就可以更好的理解在《C 语言初识》中讲的 static 关键字修饰局部变量的例子了。</p>\n<blockquote>\n<p>实际上普通的局部变量是在栈区分配空间的，栈区的特点是在上面创建的变量出了作用域就销毁。</p>\n<p>但是被 static 修饰的变量存放在数据段（静态区），数据段的特点是在上面创建的变量，直到程序结束才销毁</p>\n<p>所以生命周期变长。</p>\n</blockquote>\n<h2 id=\"柔性数组\"><a class=\"anchor\" href=\"#柔性数组\">#</a> 柔性数组</h2>\n<ul>\n<li>结构中的柔性数组成员前面必须至少一个其他成员。</li>\n<li>sizeof 返回的这种结构大小不包括柔性数组的内存。</li>\n<li>包含柔性数组成员的结构用 malloc () 函数进行内存的动态分配，并且分配的内存应该大于结构的大<br />\n小，以适应柔性数组的预期大小。</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//code1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">st_type</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 柔性数组成员</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span>type_a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>type_a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//4</span></pre></td></tr></table></figure><h3 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 代码 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>type_a <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>type_a<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>type_a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">100</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 业务处理</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token operator\">-></span>i <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    p<span class=\"token operator\">-></span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这样柔性数组成员 a，相当于获得了 100 个整型元素的连续空间</p>\n<h3 id=\"优势\"><a class=\"anchor\" href=\"#优势\">#</a> 优势</h3>\n<p>上述的  <code>type_a</code>  结构也可以设计为：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 代码 2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">st_type</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p_a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>type_a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    type_a <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>type_a <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>type_a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    p<span class=\"token operator\">-></span>i <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    p<span class=\"token operator\">-></span>p_a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>i<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 业务处理</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        p<span class=\"token operator\">-></span>p_a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 释放空间</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>p_a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    p<span class=\"token operator\">-></span>p_a <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上述  <code>代码1</code>  和  <code>代码2</code>  可以完成同样的功能，但是 方法 1 的实现有两个好处</p>\n<p><strong>第一个好处是</strong>：方便内存释放</p>\n<blockquote>\n<p>如果我们的代码是在一个给别人用的函数中，你在里面做了二次内存分配，并把整个结构体返回给<br />\n用户。用户调用 free 可以释放结构体，但是用户并不知道这个结构体内的成员也需要 free，所以你<br />\n不能指望用户来发现这个事。所以，如果我们把结构体的内存以及其成员要的内存一次性分配好<br />\n了，并返回给用户一个结构体指针，用户做一次 free 就可以把所有的内存也给释放掉。</p>\n</blockquote>\n<p><strong>第二个好处是</strong>：这样有利于访问速度.</p>\n<blockquote>\n<p>连续的内存有益于提高访问速度，也有益于减少内存碎片。（其实，我个人觉得也没多高了，反正<br />\n你跑不了要用做偏移量的加法来寻址）</p>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "https://www.htired.top/2023/10/05/algorithm/%E8%80%83%E7%A0%94%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",
            "url": "https://www.htired.top/2023/10/05/algorithm/%E8%80%83%E7%A0%94%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",
            "title": "考研数据结构",
            "date_published": "2023-10-05T05:41:50.000Z",
            "content_html": "<h1 id=\"线性表\"><a class=\"anchor\" href=\"#线性表\">#</a> 线性表</h1>\n<h2 id=\"顺序表\"><a class=\"anchor\" href=\"#顺序表\">#</a> 顺序表</h2>\n<h3 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 线性表的最大长度</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAXSIZE</span> <span class=\"token expression\"><span class=\"token number\">10</span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stu</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> DataType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">SqList</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    DataType data<span class=\"token punctuation\">[</span>MAXSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span> SqList<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"初始化\"><a class=\"anchor\" href=\"#初始化\">#</a> 初始化</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 初始化</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>SqList<span class=\"token operator\">*</span> sqList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    sqList<span class=\"token operator\">-></span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"插入\"><a class=\"anchor\" href=\"#插入\">#</a> 插入</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 位置 i 插入</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bool <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>SqList<span class=\"token operator\">*</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> DataType data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> MAXSIZE <span class=\"token operator\">||</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">></span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 第 i 个元素及以后后移</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        l<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> l<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 第 i 个位置插入元素</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 长度 + 1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> l<span class=\"token operator\">-></span>length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"删除\"><a class=\"anchor\" href=\"#删除\">#</a> 删除</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 位置 i 删除</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>bool <span class=\"token function\">del</span><span class=\"token punctuation\">(</span>SqList<span class=\"token operator\">&amp;</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">></span> n <span class=\"token operator\">||</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//i 个元素以后前移</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        l<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> l<span class=\"token punctuation\">.</span>length<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span>  <span class=\"token comment\">//malloc 函数的头文件</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>SqList<span class=\"token operator\">*</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    SqList<span class=\"token operator\">*</span> sqList <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SqList<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SqList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>sqList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> sqList<span class=\"token operator\">-></span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>sqList<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 插入</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>sqList<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    n <span class=\"token operator\">=</span> sqList<span class=\"token operator\">-></span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>sqList<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    n <span class=\"token operator\">=</span> sqList<span class=\"token operator\">-></span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>sqList<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 删除</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">del</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>sqList<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    n <span class=\"token operator\">=</span> sqList<span class=\"token operator\">-></span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>sqList<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"链表双向链表\"><a class=\"anchor\" href=\"#链表双向链表\">#</a> 链表（双向链表）</h2>\n<h3 id=\"前提匿名结构体\"><a class=\"anchor\" href=\"#前提匿名结构体\">#</a> 前提：匿名结构体</h3>\n<blockquote>\n<p>下面是两种定义方式的示例：</p>\n<ol>\n<li>匿名结构体的定义：</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  Node <span class=\"token operator\">*</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> MyLinkedList<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用方式：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>MyLinkedList list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 其他操作</span></pre></td></tr></table></figure><ol>\n<li>具有名称的结构体的定义：</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyLinkedList</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  Node <span class=\"token operator\">*</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> MyLinkedList<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用方式：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyLinkedList</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 其他操作</span></pre></td></tr></table></figure><p>在第一种方式中， <code>MyLinkedList</code>  是作为结构体的别名，你可以直接定义变量并使用它，而不需要再加上  <code>struct</code>  关键字。而在第二种方式中，你需要在定义变量时加上  <code>struct</code>  关键字。</p>\n</blockquote>\n<h3 id=\"定义-2\"><a class=\"anchor\" href=\"#定义-2\">#</a> 定义</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token operator\">*</span>prev<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Node <span class=\"token operator\">*</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span> MyLinkedList<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"初始化-2\"><a class=\"anchor\" href=\"#初始化-2\">#</a> 初始化</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Node<span class=\"token operator\">*</span> <span class=\"token function\">nodeCreate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Node<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    node<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    node<span class=\"token operator\">-></span>v <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>MyLinkedList<span class=\"token operator\">*</span> <span class=\"token function\">myLinkedListCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    MyLinkedList<span class=\"token operator\">*</span> linkedList <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    linkedList<span class=\"token operator\">-></span>head <span class=\"token operator\">=</span> <span class=\"token function\">nodeCreate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    linkedList<span class=\"token operator\">-></span>tail <span class=\"token operator\">=</span> <span class=\"token function\">nodeCreate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    linkedList<span class=\"token operator\">-></span>head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> linkedList<span class=\"token operator\">-></span>tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    linkedList<span class=\"token operator\">-></span>tail<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> linkedList<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    linkedList<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> linkedList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"获取下标为-index-的节点\"><a class=\"anchor\" href=\"#获取下标为-index-的节点\">#</a> 获取下标为 index 的节点</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取下标 index 的节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">myLinkedListGet</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token operator\">*</span> obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">>=</span> obj<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 从右往左</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> obj<span class=\"token operator\">-></span>size <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        Node<span class=\"token operator\">*</span> tail <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>tail<span class=\"token operator\">-></span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            tail <span class=\"token operator\">=</span> tail<span class=\"token operator\">-></span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            n<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> tail<span class=\"token operator\">-></span>v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 从左往右</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        Node<span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            head <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> head<span class=\"token operator\">-></span>v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"头插法\"><a class=\"anchor\" href=\"#头插法\">#</a> 头插法</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 头插法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListAddAtHead</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token operator\">*</span> obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Node<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token function\">nodeCreate</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    node<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    node<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    obj<span class=\"token operator\">-></span>head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    obj<span class=\"token operator\">-></span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"尾插法\"><a class=\"anchor\" href=\"#尾插法\">#</a> 尾插法</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 尾插法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListAddAtTail</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token operator\">*</span> obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Node<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token function\">nodeCreate</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    node<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>tail<span class=\"token operator\">-></span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    node<span class=\"token operator\">-></span>prev<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    obj<span class=\"token operator\">-></span>tail<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    obj<span class=\"token operator\">-></span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"第-index-个位置插入\"><a class=\"anchor\" href=\"#第-index-个位置插入\">#</a> 第 index 个位置插入</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在第 index 个位置插入</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListAddAtIndex</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token operator\">*</span> obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">></span> obj<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Node<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token function\">nodeCreate</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Node<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 从右往左</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> obj<span class=\"token operator\">-></span>size <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 可能 index 为 size，说明插入在尾部</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        cur <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            n<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 从左往右</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        cur <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 获取 cur 的前驱插入</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    node<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    node<span class=\"token operator\">-></span>prev<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    cur<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    obj<span class=\"token operator\">-></span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"第-index-个位置删除\"><a class=\"anchor\" href=\"#第-index-个位置删除\">#</a> 第 index 个位置删除</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在第 index 个位置删除</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListDeleteAtIndex</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token operator\">*</span> obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">>=</span> obj<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Node<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 从右往左</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> obj<span class=\"token operator\">-></span>size <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        cur <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>tail<span class=\"token operator\">-></span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            n<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 从左往右</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        cur <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 删除 cur</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    cur<span class=\"token operator\">-></span>prev<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    obj<span class=\"token operator\">-></span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"释放链表\"><a class=\"anchor\" href=\"#释放链表\">#</a> 释放链表</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 释放链表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListFree</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token operator\">*</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 首先释放里面的全部元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Node<span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        Node<span class=\"token operator\">*</span> del <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        head <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>del<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"栈\"><a class=\"anchor\" href=\"#栈\">#</a> 栈！</h1>\n<h2 id=\"顺序栈\"><a class=\"anchor\" href=\"#顺序栈\">#</a> 顺序栈</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAX_SIZE</span> <span class=\"token expression\"><span class=\"token number\">100</span> </span><span class=\"token comment\">// 定义栈的最大容量</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">[</span>MAX_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存储栈元素的数组</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> top<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 栈顶指针</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span> SeqStack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 初始化栈</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">initStack</span><span class=\"token punctuation\">(</span>SeqStack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    s<span class=\"token operator\">-></span>top <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将栈顶指针初始化为 - 1，表示栈为空</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 判断栈是否满</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span>SeqStack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> s<span class=\"token operator\">-></span>top <span class=\"token operator\">==</span> MAX_SIZE <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 栈满时，栈顶指针等于栈的最大容量减 1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 判断栈是否为空</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>SeqStack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> s<span class=\"token operator\">-></span>top <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 栈空时，栈顶指针为 - 1</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 入栈</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>SeqStack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stack is full, cannot push.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 栈满时无法入栈</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    s<span class=\"token operator\">-></span>top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 栈顶指针加 1</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    s<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>s<span class=\"token operator\">-></span>top<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将元素存入栈顶位置</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 出栈</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span>SeqStack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stack is empty, cannot pop.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 栈空时无法出栈</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 异常退出程序</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> s<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>s<span class=\"token operator\">-></span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取栈顶元素的值</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    s<span class=\"token operator\">-></span>top<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 栈顶指针减 1</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回出栈的元素值</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">// 显示栈内元素</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">display</span><span class=\"token punctuation\">(</span>SeqStack <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stack is empty.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 栈空时无元素可显示</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Elements in the stack: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> s<span class=\"token operator\">-></span>top<span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 从栈顶开始逐个打印元素</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    SeqStack stack<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token function\">initStack</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化栈</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>stack<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 入栈元素 1</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>stack<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 入栈元素 2</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>stack<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 入栈元素 3</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 显示栈内元素</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">int</span> elem <span class=\"token operator\">=</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 出栈并获取出栈元素的值</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Popped element: %d\\n\"</span><span class=\"token punctuation\">,</span> elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印出栈元素的值</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 显示栈内元素</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"链栈\"><a class=\"anchor\" href=\"#链栈\">#</a> 链栈</h2>\n<h3 id=\"前提\"><a class=\"anchor\" href=\"#前提\">#</a> 前提</h3>\n<blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LinkedStack</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LinkedStack</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">*</span> LS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LinkedStack</span> <span class=\"token operator\">*</span> LS<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr />\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LinkedStack</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LinkedStack</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> LS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 等价于</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LinkedStack</span> LS<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></blockquote>\n<h3 id=\"方式一结构体指针\"><a class=\"anchor\" href=\"#方式一结构体指针\">#</a> 方式一（结构体指针）</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LinkedStack</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LinkedStack</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">*</span> LS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>bool <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>LS<span class=\"token operator\">*</span> S<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    LS newS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LS<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">LinkedStack</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    newS<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    newS<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>S<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">*</span>S <span class=\"token operator\">=</span> newS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    LS s1 <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s1<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> s1<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"方式二\"><a class=\"anchor\" href=\"#方式二\">#</a> 方式二</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LinkedStack</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LinkedStack</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> LS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>bool <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>LS<span class=\"token operator\">*</span><span class=\"token operator\">*</span> S<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    LS<span class=\"token operator\">*</span> newS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LS<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    newS<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    newS<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>S<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token operator\">*</span>S <span class=\"token operator\">=</span> newS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    LS<span class=\"token operator\">*</span> s1 <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s1<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> s1<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"错误方式\"><a class=\"anchor\" href=\"#错误方式\">#</a> 错误方式</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">LinkedStack</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     LinkedStack<span class=\"token operator\">*</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> LS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>bool <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>LS<span class=\"token operator\">*</span> S<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    LS<span class=\"token operator\">*</span> newS <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LS<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>LS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    newS<span class=\"token operator\">-></span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    newS<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> S<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    S <span class=\"token operator\">=</span> newS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    LS s1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s1<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对于 push 函数的实现存在一个问题。在函数中对 S 的赋值实际上只是将局部变量 S 指向了新的节点，但这不会影响 main 函数中 s1 的值，因为这里传递的是指针的拷贝。为了使修改生效，你需要将 S 作为指针的指针传递进来，或者让 push 函数返回新的指针。</p>\n<h1 id=\"队列\"><a class=\"anchor\" href=\"#队列\">#</a> 队列</h1>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MAX_SIZE</span> <span class=\"token expression\"><span class=\"token number\">100</span></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">[</span>MAX_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> front<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> rear<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Queue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 初始化队列</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">initQueue</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> queue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    queue<span class=\"token operator\">-></span>front <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    queue<span class=\"token operator\">-></span>rear <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 检查队列是否为空</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> queue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> queue<span class=\"token operator\">-></span>front <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 检查队列是否已满</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> queue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>queue<span class=\"token operator\">-></span>rear <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MAX_SIZE <span class=\"token operator\">==</span> queue<span class=\"token operator\">-></span>front<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 入队</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> queue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"队列已满，无法入队\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        queue<span class=\"token operator\">-></span>front <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    queue<span class=\"token operator\">-></span>rear <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>queue<span class=\"token operator\">-></span>rear <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MAX_SIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    queue<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>queue<span class=\"token operator\">-></span>rear<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 出队</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> queue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"队列为空，无法出队\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> queue<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>queue<span class=\"token operator\">-></span>front<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>queue<span class=\"token operator\">-></span>front <span class=\"token operator\">==</span> queue<span class=\"token operator\">-></span>rear<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        queue<span class=\"token operator\">-></span>front <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        queue<span class=\"token operator\">-></span>rear <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        queue<span class=\"token operator\">-></span>front <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>queue<span class=\"token operator\">-></span>front <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MAX_SIZE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\">// 获取队头元素</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">getFront</span><span class=\"token punctuation\">(</span>Queue<span class=\"token operator\">*</span> queue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"队列为空\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">return</span> queue<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>queue<span class=\"token operator\">-></span>front<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token comment\">// 测试队列操作</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    Queue queue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token function\">initQueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>queue<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>queue<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>queue<span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"队头元素：%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getFront</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"出队元素：%d\\n\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"队头元素：%d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getFront</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"二叉树\"><a class=\"anchor\" href=\"#二叉树\">#</a> 二叉树</h1>\n<h2 id=\"二叉搜索树变为平衡\"><a class=\"anchor\" href=\"#二叉搜索树变为平衡\">#</a> 二叉搜索树变为平衡</h2>\n<h3 id=\"有序数组转换为-bst\"><a class=\"anchor\" href=\"#有序数组转换为-bst\">#</a> 有序数组转换为 BST</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for a binary tree node.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * public class TreeNode &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     TreeNode left;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     TreeNode right;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *     TreeNode() &#123;&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *     TreeNode(int val) &#123; this.val = val; &#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *         this.val = val;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *         this.left = left;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> *         this.right = right;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> *     &#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * &#125;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 可以中序遍历把二叉树转变为有序数组，</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 然后在根据有序数组构造平衡二叉搜索树。</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">balanceBST</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">buildBST</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">buildBST</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">></span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">TreeNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">buildBST</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">buildBST</span><span class=\"token punctuation\">(</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"手撕-avl\"><a class=\"anchor\" href=\"#手撕-avl\">#</a> 手撕 AVL</h3>\n<p><img loading=\"lazy\" data-src=\"/images/avl.png\" alt=\"img\" /></p>\n<p>对当前节点右旋，就是让当前节点的左子树的高度 - 1，右子树的高度 + 1，类似于往右边旋转</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/56066942\">什么是平衡二叉树（AVL） - 知乎 (zhihu.com)</a></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">balanceBST</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 存放树的高度</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> nodeHeight <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">TreeNode</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 先序遍历</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                newNode <span class=\"token operator\">=</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">,</span> nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                stack<span class=\"token punctuation\">.</span><span class=\"token function\">offerLast</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            root <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pollLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 插入新节点</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 高度为 1</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">int</span> diff <span class=\"token operator\">=</span> val <span class=\"token operator\">-</span> root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>diff <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 往右子树插入</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 插入后的新节点</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// 计算 root 的左右孩子的高度差 (从缓存中获取)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">int</span> diffHeight <span class=\"token operator\">=</span> nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>diffHeight <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 说明不平衡</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token comment\">//RL 先对 root.right 右旋，然后再对 root 左旋</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">&lt;</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">rotateRight</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token comment\">//RR 直接对 root 左旋</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                root <span class=\"token operator\">=</span> <span class=\"token function\">rotateLeft</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token comment\">// 可能插入后是平衡的，不需要调整</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token comment\">// 获取当前节点新高度</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token keyword\">int</span> height <span class=\"token operator\">=</span>  <span class=\"token function\">getCurNodeNewHeight</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span>nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token comment\">// 更新当前节点高度</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>diff <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 往左子树插入</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token comment\">// 插入后的新节点</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 计算 root 的左右孩子的高度差 (从缓存中获取)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">int</span> diffHeight <span class=\"token operator\">=</span> nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>diffHeight <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 说明不平衡</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token comment\">//LR 先对 root.left 左旋，然后再对 root 右旋</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">></span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">rotateLeft</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token comment\">//LL 直接对 root 右旋</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                root <span class=\"token operator\">=</span> <span class=\"token function\">rotateRight</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token comment\">// 可能插入后是平衡的，不需要调整</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token comment\">// 获取当前节点新高度</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token keyword\">int</span> height <span class=\"token operator\">=</span>  <span class=\"token function\">getCurNodeNewHeight</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span>nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token comment\">// 更新当前节点高度</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 不操作</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token comment\">// 左旋</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">rotateLeft</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token comment\">// 指针调整</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token class-name\">TreeNode</span> right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        right<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token comment\">// 更新 node 和 right 的高度</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">int</span> nodeNewHeight <span class=\"token operator\">=</span> <span class=\"token function\">getCurNodeNewHeight</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> nodeNewHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token comment\">// 新的根节点为作为左孩子的 node 和作为右孩子的 right.right 的最大高度 + 1</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">int</span> rightNewHegiht <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nodeNewHeight<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">,</span> rightNewHegiht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token keyword\">return</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token comment\">// 右旋</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">rotateRight</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token comment\">// 指针调整</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token class-name\">TreeNode</span> left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        left<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token comment\">// 更新 node 和 left 的高度</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token keyword\">int</span> nodeNewHeight <span class=\"token operator\">=</span> <span class=\"token function\">getCurNodeNewHeight</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> nodeNewHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token comment\">// 新的根节点为作为左孩子的 node 和作为右孩子的 right.right 的最大高度 + 1        int leftNewHegiht = Math.max (nodeHeight.getOrDefault (left.left, 0), nodeNewHeight) + 1;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> leftNewHegiht<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">return</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token comment\">// 获取当前的高度</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getCurNodeNewHeight</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">balanceBST</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//node 节点的高度缓存</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> nodeHeight <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">TreeNode</span> newRoot <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 先序遍历插入（其实用哪个遍历都行）</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token comment\">// 新树插入</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                newRoot <span class=\"token operator\">=</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>newRoot<span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">,</span>nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                node <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> newRoot<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * 新节点插入</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     * @param root root</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     * @param val 新加入的值</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     * @param nodeHeight 节点高度缓存</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     * @return 新的 root 节点</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">,</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 新节点的高度</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">int</span> cmp <span class=\"token operator\">=</span> val <span class=\"token operator\">-</span> node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmp <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token comment\">// 左子树插入</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">,</span>nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token comment\">// 如果左右子树高度差超过 1，进行旋转调整</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">></span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    <span class=\"token comment\">// 插入在左孩子右边，左孩子先左旋</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">rotateLeft</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span>nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token comment\">// 节点右旋</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                node <span class=\"token operator\">=</span> <span class=\"token function\">rotateRight</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span>nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmp <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token comment\">// 右子树插入</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">,</span>nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token comment\">// 如果左右子树高度差超过 1，进行旋转调整</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val <span class=\"token operator\">&lt;</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    <span class=\"token comment\">// 插入在右孩子左边，右孩子先右旋</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">rotateRight</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span>nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token comment\">// 节点左旋</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                node <span class=\"token operator\">=</span> <span class=\"token function\">rotateLeft</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span>nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token comment\">// 一样的节点，啥都没发生</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token comment\">// 获取当前节点新高度</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">int</span> height <span class=\"token operator\">=</span>  <span class=\"token function\">getCurNodeNewHeight</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span>nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token comment\">// 更新当前节点高度</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>     * node 节点左旋</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>     * @param node node</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>     * @param nodeHeight node 高度缓存</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>     * @return 旋转后的当前节点</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">rotateLeft</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">,</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token comment\">//--- 指针调整</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token class-name\">TreeNode</span> right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        right<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token comment\">//--- 高度更新</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token comment\">// 先更新 node 节点的高度，这个时候 node 是 right 节点的左孩子</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token keyword\">int</span> newNodeHeight <span class=\"token operator\">=</span> <span class=\"token function\">getCurNodeNewHeight</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span>nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token comment\">// 更新 node 节点高度</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span>newNodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token comment\">//newNodeHeight 是现在 right 节点左子树高度，原理一样，取现在 right 左右子树最大高度 + 1</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token keyword\">int</span> newRightHeight <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>newNodeHeight<span class=\"token punctuation\">,</span>nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token comment\">// 更新原 right 节点高度</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">,</span>newRightHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token keyword\">return</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>     * node 节点右旋</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>     * @param node node</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>     * @param nodeHeight node 高度缓存</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>     * @return 旋转后的当前节点</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">rotateRight</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">,</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token comment\">//--- 指针调整</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token class-name\">TreeNode</span> left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        left<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token comment\">//--- 高度更新</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token comment\">// 先更新 node 节点的高度，这个时候 node 是 right 节点的左孩子</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token keyword\">int</span> newNodeHeight <span class=\"token operator\">=</span> <span class=\"token function\">getCurNodeNewHeight</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span>nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token comment\">// 更新 node 节点高度</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span>newNodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token comment\">//newNodeHeight 是现在 left 节点右子树高度，原理一样，取现在 right 左右子树最大高度 + 1</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token keyword\">int</span> newLeftHeight <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>newNodeHeight<span class=\"token punctuation\">,</span>nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token comment\">// 更新原 left 节点高度</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span>newLeftHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token keyword\">return</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>     * 获取当前节点的新高度</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>     * @param node node</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>     * @param nodeHeight node 高度缓存</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>     * @return 当前 node 的新高度</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getCurNodeNewHeight</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> node<span class=\"token punctuation\">,</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> nodeHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token comment\">//node 节点的高度，为现在 node 左右子树最大高度 + 1</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>nodeHeight<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"106从中序与后序遍历序列构造二叉树\"><a class=\"anchor\" href=\"#106从中序与后序遍历序列构造二叉树\">#</a> 106. 从中序与后序遍历序列构造二叉树</h2>\n<p><a href=\"https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/\">力扣题目链接 (opens new window)</a></p>\n<p>根据一棵树的中序遍历与后序遍历构造二叉树。</p>\n<p>注意：你可以假设树中没有重复的元素。</p>\n<p>例如，给出</p>\n<p>中序遍历 inorder     =    [9,3,15,20,7]</p>\n<p>后序遍历 postorder = [9,15,7,20,3] 返回如下的二叉树：</p>\n<p><img loading=\"lazy\" data-src=\"/images/in-po-order-b-t.png\" alt=\"img\" /></p>\n<h3 id=\"\"><a class=\"anchor\" href=\"#\">#</a> <a href=\"https://programmercarl.com/0106.%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91.html#%E6%80%9D%E8%B7%AF\">#</a>思路</h3>\n<p>首先回忆一下如何根据两个顺序构造一个唯一的二叉树，相信理论知识大家应该都清楚，就是以 后序数组的最后一个元素为切割点，先切中序数组，根据中序数组，反过来在切后序数组。一层一层切下去，每次后序数组最后一个元素就是节点元素。</p>\n<p>如果让我们肉眼看两个序列，画一棵二叉树的话，应该分分钟都可以画出来。</p>\n<p>那么代码应该怎么写呢？</p>\n<p>说到一层一层切割，就应该想到了递归。</p>\n<p>来看一下一共分几步：</p>\n<ul>\n<li>第一步：如果数组大小为零的话，说明是空节点了。</li>\n<li>第二步：如果不为空，那么取后序数组最后一个元素作为节点元素。</li>\n<li>第三步：找到后序数组最后一个元素在中序数组的位置，作为切割点</li>\n<li>第四步：切割中序数组，切成中序左数组和中序右数组 （顺序别搞反了，一定是先切中序数组）</li>\n<li>第五步：切割后序数组，切成后序左数组和后序右数组</li>\n<li>第六步：递归处理左区间和右区间</li>\n</ul>\n<p>流程如图：</p>\n<p><img loading=\"lazy\" data-src=\"/images/in-po-order-b-t-2.png\" alt=\"img\" /></p>\n<p>左子树后序数组不能用 rootIndex-1 来确定，因为但是当递归起来之后，ps 和 is 不再相等，</p>\n<p>后序数组应该用后序数组的下标</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 方便根据数值查找位置</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> postorder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> inorder<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 用 map 保存中序序列的数值对应位置</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">findNode</span><span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>inorder<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> postorder<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>postorder<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">findNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inorder<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> inorderBegin <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> inorderEnd <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> postorder <span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> postorderBegin <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> postorderEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 左根右</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//z</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>inorderBegin <span class=\"token operator\">></span> inorderEnd <span class=\"token operator\">||</span> postorderBegin <span class=\"token operator\">></span> postorderEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 获取根节点</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">int</span> rootVal <span class=\"token operator\">=</span> postorder<span class=\"token punctuation\">[</span>postorderEnd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">// 获取根节点索引</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">int</span> rootIndex <span class=\"token operator\">=</span>  map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>rootVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">TreeNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>rootVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> lenOfLeft <span class=\"token operator\">=</span> rootIndex<span class=\"token operator\">-</span>inorderBegin<span class=\"token punctuation\">;</span><span class=\"token comment\">// 保存中序左子树节点个数，用来确定后序数列的个数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">findNode</span><span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">,</span>inorderBegin<span class=\"token punctuation\">,</span>rootIndex<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                             postorder<span class=\"token punctuation\">,</span>postorderBegin<span class=\"token punctuation\">,</span> postorderBegin <span class=\"token operator\">+</span> lenOfLeft <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">findNode</span><span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">,</span>rootIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> inorderEnd <span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                             postorder<span class=\"token punctuation\">,</span>postorderBegin <span class=\"token operator\">+</span> lenOfLeft <span class=\"token punctuation\">,</span>postorderEnd<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"方法二-迭代\"><a class=\"anchor\" href=\"#方法二-迭代\">#</a> 方法二、迭代</h3>\n<p>更 105 一样，只需从右子树开始。可以先看 105 的解析</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> postorder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">TreeNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>postorder<span class=\"token punctuation\">[</span>postorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        stack<span class=\"token punctuation\">.</span><span class=\"token function\">offerFirst</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> inorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> postorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">peekFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> inorder<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>postorder<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                stack<span class=\"token punctuation\">.</span><span class=\"token function\">offerFirst</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">peekFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> inorder<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    node <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pollFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    index <span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>postorder<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                stack<span class=\"token punctuation\">.</span><span class=\"token function\">offerFirst</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"105从前序与中序遍历序列构造二叉树\"><a class=\"anchor\" href=\"#105从前序与中序遍历序列构造二叉树\">#</a> 105. 从前序与中序遍历序列构造二叉树</h2>\n<p><a href=\"https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/\">力扣题目链接 (opens new window)</a></p>\n<p>根据一棵树的前序遍历与中序遍历构造二叉树。</p>\n<p>注意：你可以假设树中没有重复的元素。</p>\n<p>例如，给出</p>\n<p>前序遍历 preorder = [3,9,20,15,7] 中序遍历 inorder = [9,3,15,20,7] 返回如下的二叉树：</p>\n<p><img loading=\"lazy\" data-src=\"/images/pr-in-b-t.png\" alt=\"img\" /></p>\n<h3 id=\"-2\"><a class=\"anchor\" href=\"#-2\">#</a> <a href=\"https://programmercarl.com/0106.%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91.html#%E6%80%9D%E8%B7%AF-2\">#</a>思路</h3>\n<p>本题和 106 是一样的道理。</p>\n<p>我就直接给出代码了。</p>\n<p><img loading=\"lazy\" data-src=\"/images/pr-in-b-t-2.png\" alt=\"img\" /></p>\n<p>此图应对与 17 行 确定前序数列的个数</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> preorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inorder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> inorder<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>inorder<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>preorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> inorder <span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span>inorder<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> preorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> preBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> preEnd <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> inBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> inEnd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>preBegin <span class=\"token operator\">></span> preEnd <span class=\"token operator\">||</span> inBegin <span class=\"token operator\">></span> inEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> rootIndex <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">[</span>preBegin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">TreeNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">[</span>preBegin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">int</span> leftOfLen <span class=\"token operator\">=</span> rootIndex <span class=\"token operator\">-</span> inBegin<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 保存中序左子树个数，用来确定前序数列的个数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span>preBegin <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> preBegin <span class=\"token operator\">+</span> leftOfLen  <span class=\"token punctuation\">,</span> inorder <span class=\"token punctuation\">,</span> inBegin <span class=\"token punctuation\">,</span> rootIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">,</span>preBegin <span class=\"token operator\">+</span> leftOfLen <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> preEnd <span class=\"token punctuation\">,</span> inorder <span class=\"token punctuation\">,</span> rootIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span> inEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"方法二迭代\"><a class=\"anchor\" href=\"#方法二迭代\">#</a> 方法二：迭代</h3>\n<p><img loading=\"lazy\" data-src=\"/images/pr-in-b-t-3.png\" alt=\"img\" /></p>\n<p><img loading=\"lazy\" data-src=\"/images/pr-in-b-t-4.png\" alt=\"img\" /></p>\n<p><img loading=\"lazy\" data-src=\"/images/pr-in-b-t-5.png\" alt=\"img\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token function\">buildTree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> preorder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inorder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">TreeNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        stack<span class=\"token punctuation\">.</span><span class=\"token function\">offerFirst</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> preorder<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">peekFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">//index 对应的中序值，与前序的值不相等，</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">!=</span> inorder<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                stack<span class=\"token punctuation\">.</span><span class=\"token function\">offerFirst</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">peekFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">==</span> inorder<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    node <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pollFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>preorder<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                stack<span class=\"token punctuation\">.</span><span class=\"token function\">offerFirst</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"b树\"><a class=\"anchor\" href=\"#b树\">#</a> B 树</h1>\n<h2 id=\"插入-2\"><a class=\"anchor\" href=\"#插入-2\">#</a> 插入</h2>\n<ol>\n<li>从根节点开始搜索：\n<ul>\n<li>如果根节点为空，则将关键字作为新的根节点插入。</li>\n<li>如果根节点非空，则在树中递归搜索合适的叶子节点。</li>\n</ul>\n</li>\n<li>插入关键字：\n<ul>\n<li>如果叶子节点未满（关键字个数小于节点容量），则简单地将关键字插入到该节点的有序位置，并将节点中的关键字重新排序。</li>\n<li>如果叶子节点已满（关键字个数等于节点容量），则需要进行节点分裂操作。</li>\n</ul>\n</li>\n<li>节点分裂：\n<ul>\n<li>将该节点的所有关键字按顺序排列。</li>\n<li>找到中间的关键字 mid，并将其提升到父节点中。</li>\n<li>创建两个新的节点 leftNode 和 rightNode，其中 leftNode 包含 mid 左侧的关键字，rightNode 包含 mid 右侧的关键字。</li>\n<li>如果该节点是叶子节点，将 leftNode 和 rightNode 作为孩子节点插入父节点，并更新父节点的关键字和孩子指针。</li>\n<li>如果该节点不是叶子节点，将 leftNode 和 rightNode 作为孩子节点插入父节点，并更新父节点的关键字和孩子指针。</li>\n</ul>\n</li>\n<li>树的调整：\n<ul>\n<li>如果根节点分裂，需要创建一个新的根节点，并将分裂后得到的两个子节点连接到新的根节点上。</li>\n<li>如果父节点分裂，需要将父节点的中间关键字提升到祖父节点中，并将分裂后得到的两个子节点连接到新的父节点上。</li>\n<li>如果一直往上走，直到找到一个不满的节点或者到达根节点为止。</li>\n</ul>\n</li>\n</ol>\n<p>通过递归向下搜索、插入和可能的节点分裂，可以完成 B 树的插入操作。在插入之后，可能需要根据特定的 B 树实现选择性地进行节点合并、旋转或平衡操作，以维护 B 树的平衡性质。</p>\n<p>需要注意的是，B 树的插入操作涉及到节点的移动和调整，因此可能会影响树的结构和性能。可根据具体的 B 树实现和需求进行进一步的优化和调整。</p>\n<h2 id=\"删除-2\"><a class=\"anchor\" href=\"#删除-2\">#</a> 删除</h2>\n<ol>\n<li><strong>查找待删除的关键字：</strong>\n<ul>\n<li>从根节点开始，在 B 树中按照搜索规则找到待删除的关键字所在的叶子节点。</li>\n<li>比较待删除的关键字与当前节点中的关键字，如果小于某个关键字，则进入该关键字左侧的子节点；如果大于所有关键字，则进入最右侧的子节点。</li>\n</ul>\n</li>\n<li><strong>删除操作：</strong>\n<ul>\n<li>在叶子节点中找到待删除的关键字，并将其删除。</li>\n<li>如果删除后，叶子节点的关键字数量仍满足 B 树的要求（通常为 m/2 向下取整），删除操作结束。</li>\n<li>如果叶子节点的关键字数量小于最低限度，需要进行节点合并或旋转操作。</li>\n</ul>\n</li>\n<li><strong>节点合并：</strong>\n<ul>\n<li>如果待删除的关键字所在的叶子节点与其相邻的兄弟节点有多余的关键字，可以进行节点合并操作。</li>\n<li>将待删除的关键字所在节点与一个兄弟节点合并成一个新的节点，并将父节点中对应的关键字下移至新节点。</li>\n<li>如果父节点的关键字数量也小于最低限度，继续进行节点合并操作。</li>\n</ul>\n</li>\n<li><strong>节点旋转：</strong>\n<ul>\n<li>如果待删除的关键字所在的叶子节点与其相邻的兄弟节点没有多余的关键字，可以进行节点旋转操作。</li>\n<li>将父节点中的一个关键字下移至待删除关键字所在节点，同时将该关键字所在节点的一个关键字上移至父节点。</li>\n<li>如果旋转后，父节点的关键字数量仍小于最低限度，继续进行节点旋转操作。</li>\n</ul>\n</li>\n<li><strong>调整树结构：</strong>\n<ul>\n<li>如果发生了节点合并或旋转，需要递归地向上调整 B 树的结构。</li>\n<li>更新父节点的关键字顺序和指针指向，以保持 B 树的平衡性。</li>\n<li>如果根节点没有关键字了，将其唯一的子节点作为新的根节点。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"图\"><a class=\"anchor\" href=\"#图\">#</a> 图</h1>\n<h2 id=\"prim算法\"><a class=\"anchor\" href=\"#prim算法\">#</a> prim 算法</h2>\n<p>具体的实现思路如下：</p>\n<ol>\n<li>首先构建一个图 g，使用邻接表的形式表示。对于每个节点 i，使用一个 ArrayList&lt;int []&gt; 存储与节点 i 相连的边，每条边是一个 int 数组，包含目标节点 j 和边的权值 w。</li>\n<li>初始化最小代价 mCost 为无穷大，mu 和 mv 分别记录最小代价的边的起点和终点。</li>\n<li>遍历边集合 edges，将边加入到图 g 中，并更新最小代价的边。</li>\n<li>初始化一个集合 set，用于存放已经选择的节点。初始时，将代价最小的边的起点和终点加入到 set 中，并输出该边的信息。</li>\n<li>当 set 的大小小于节点数 n 时，进行循环操作：\n<ul>\n<li>从 set 中选出一个节点 u，遍历节点 u 的邻接边。</li>\n<li>如果邻接边连接的节点 v 已经在 set 中，跳过该边。</li>\n<li>否则，更新最小代价 mCost 和对应的起点 mu 和终点 mv，选择剩余最小代价的边。</li>\n</ul>\n</li>\n<li>将终点 mv 加入到 set 中，并输出该边的信息。</li>\n<li>循环结束后，得到最小生成树的边集合。</li>\n</ol>\n<p>在代码的 main 函数中，构造了一个图 e，并调用 prim 方法进行最小生成树的计算。图 e 的边集合表示了一个具体的图结构，节点数为 6。运行该代码会输出最小生成树的边的信息。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//edges:[[u,v,w], ], n 为节点数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">prim</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> edges<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 构建图</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> mu <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> mv <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> mCost <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> edge <span class=\"token operator\">:</span> edges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            g<span class=\"token punctuation\">[</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            g<span class=\"token punctuation\">[</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 选取剩余最小代价的节点</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mCost <span class=\"token operator\">></span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                mCost <span class=\"token operator\">=</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                mu <span class=\"token operator\">=</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                mv <span class=\"token operator\">=</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 最终集合</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>mu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>mv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>mu <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> mv <span class=\"token operator\">+</span> <span class=\"token string\">\" : \"</span> <span class=\"token operator\">+</span> mCost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">// 从 set 中选出节点 u，计算最小代价</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            mCost <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> u <span class=\"token operator\">:</span> set<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> list <span class=\"token operator\">=</span> g<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> v <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token comment\">// 选取剩余最小代价的节点</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mCost <span class=\"token operator\">></span> v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                        mCost <span class=\"token operator\">=</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                        mu <span class=\"token operator\">=</span> u<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        mv <span class=\"token operator\">=</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token comment\">// 更新</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>mv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>mu <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> mv <span class=\"token operator\">+</span> <span class=\"token string\">\" : \"</span> <span class=\"token operator\">+</span> mCost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">Solution</span> solution <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        solution<span class=\"token punctuation\">.</span><span class=\"token function\">prim</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"cruskal算法\"><a class=\"anchor\" href=\"#cruskal算法\">#</a> cruskal 算法</h2>\n<p>具体的实现思路如下：</p>\n<ol>\n<li>首先初始化并查集，将每个节点的父节点初始化为自身。</li>\n<li>构建一个小根堆 minHeap，用于存放边。按照边的权值从小到大排序。</li>\n<li>循环处理 minHeap 中的边，直到 minHeap 为空：\n<ul>\n<li>从 minHeap 中取出一条边 poll。</li>\n<li>检查边的两个节点是否已经连通，即判断它们是否在同一个集合中。</li>\n<li>如果已经连通，跳过该边。</li>\n<li>否则，合并边的两个节点，并输出该边的信息。</li>\n</ul>\n</li>\n<li>合并操作使用并查集的思想，将两个节点所在集合的根节点连接起来。</li>\n<li>查找操作使用路径压缩优化，将节点的父节点设置为根节点，加速后续的查找操作。</li>\n</ol>\n<p>在代码的 main 函数中，构造了一个边集合 e，并调用 cruskal 方法进行最小生成树的计算。边集合 e 表示了一个具体的图结构，节点数为 6。运行该代码会输出最小生成树的边的信息。</p>\n<p>请问有什么问题我可以帮助你解答的吗？</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//edges:[[u,v,w], ], n 为节点数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cruskal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> edges<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 初始化并查集</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 构建小根堆</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">PriorityQueue</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> minHeap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparingInt</span><span class=\"token punctuation\">(</span>o <span class=\"token operator\">-></span> o<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> edge <span class=\"token operator\">:</span> edges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            minHeap<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>minHeap<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> poll <span class=\"token operator\">=</span> minHeap<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 检查是否是连通的</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>poll<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>poll<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">// 合并</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token function\">union</span><span class=\"token punctuation\">(</span>poll<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> poll<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>poll<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> poll<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" : \"</span> <span class=\"token operator\">+</span> poll<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">//l 的父亲指向 r</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        father<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> father<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 路径压缩</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> father<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>father<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> father<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        father <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            father<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">Solution</span> solution <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        solution<span class=\"token punctuation\">.</span><span class=\"token function\">cruskal</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>该代码的时间复杂度为 O (ElogE)，其中 E 表示边的数量。</p>\n<p>具体分析如下：</p>\n<ol>\n<li>初始化并查集的时间复杂度为 O (n)，其中 n 为节点数。</li>\n<li>构建小根堆的时间复杂度为 O (ElogE)，需要将所有边加入堆中，并进行排序。</li>\n<li>循环处理小根堆中的边，最多进行 E 次循环。\n<ul>\n<li>在每次循环中，从堆中取出一条边的时间复杂度为 O (1)。</li>\n<li>判断边的两个节点是否连通的时间复杂度为 O (1)，通过并查集的 find 操作实现。</li>\n<li>合并边的两个节点的时间复杂度为 O (1)，通过并查集的 union 操作实现。</li>\n<li>输出边的信息的时间复杂度为 O (1)。</li>\n</ul>\n</li>\n<li>总体来看，循环处理小根堆中的边的时间复杂度为 O (E)。</li>\n</ol>\n<p>综上所述，代码的总体时间复杂度为 O (n + ElogE)。由于 E 可能达到 n^2 级别，因此可以简化为 O (ElogE)。</p>\n<p>请注意，这里的时间复杂度分析是基于给定的输入规模，即边的数量 E 和节点数 n。在实际应用中，如果边的数量 E 远大于节点数 n，那么 O (ElogE) 的复杂度会占主导地位。但如果 E 接近于 n^2，那么 O (n + ElogE) 中的 n 项可能会起到更重要的作用。</p>\n<p>如果还有其他问题，请随时提问。</p>\n<h2 id=\"拓扑排序\"><a class=\"anchor\" href=\"#拓扑排序\">#</a> 拓扑排序</h2>\n<p>这段代码实现了拓扑排序算法，用于对有向无环图（DAG）进行节点排序。拓扑排序的结果可以用于表示图中节点的一种线性排序，其中如果图中存在一条从节点 u 到节点 v 的路径，那么在排序中 u 一定出现在 v 的前面。</p>\n<p>具体的实现思路如下：</p>\n<ol>\n<li>首先根据输入的边集合 edges 和节点数 n 建立图的邻接表表示（这里使用了 ArrayList 数组 g）。</li>\n<li>统计每个节点的入度（即指向该节点的边的数量），并初始化一个入度为 0 的节点队列 q。</li>\n<li>将所有入度为 0 的节点放入队列 q 中。</li>\n<li>循环处理队列 q 中的节点，每次取出一个入度为 0 的节点 u 并输出该节点。</li>\n<li>遍历节点 u 的邻接节点 v，将节点 v 的入度减 1。若节点 v 的入度减至 0，则将节点 v 加入队列 q 中。</li>\n<li>最终如果图中存在环（即 c 不为 0），则输出 &quot;构成环&quot;。</li>\n</ol>\n<p>在代码的 main 函数中，构造了一个边集合 e，并调用 topologySort 方法进行拓扑排序。边集合 e 表示了一个具体的有向图结构，节点数为 6。运行该代码会输出拓扑排序后的节点顺序。</p>\n<p>这段代码的时间复杂度为 O (V+E)，其中 V 表示节点数，E 表示边的数量。具体分析如下：</p>\n<ul>\n<li>建图的时间复杂度为 O (E)，需要遍历所有的边。</li>\n<li>统计入度的时间复杂度为 O (E)，同样需要遍历所有的边。</li>\n<li>拓扑排序的过程中，每个节点和边都会被访问一次，因此时间复杂度为 O (V+E)。 因此，总体时间复杂度为 O (V+E)。</li>\n</ul>\n<p>如果你有更多问题，欢迎继续向我提问。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// edge[0] -> edge[1]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">topologySort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> edges<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 建图</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> g <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 只需要统计入度</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> degree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> edge <span class=\"token operator\">:</span> edges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            g<span class=\"token punctuation\">[</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            degree<span class=\"token punctuation\">[</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 首先找到入度为 0 的节点，放入集合 q 中，并开始循环删除</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> q <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>degree<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                q<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 循环删除</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            c<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token class-name\">Integer</span> u <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">pollFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> g<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> v <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                degree<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token comment\">// 加入集合</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>degree<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    q<span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"构成环\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">2</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token class-name\">Solution</span> solution <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        solution<span class=\"token punctuation\">.</span><span class=\"token function\">topologySort</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"排序\"><a class=\"anchor\" href=\"#排序\">#</a> 排序</h1>\n<h2 id=\"基数排序\"><a class=\"anchor\" href=\"#基数排序\">#</a> 基数排序</h2>\n<h3 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h3>\n<p><img loading=\"lazy\" data-src=\"/images/%E5%9F%BA%E6%95%B0.gif\" alt=\"img\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maximumGap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>          链式基数排序</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            先构建一个链表数组，下标依次对应数字下标</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                例如: l1   l2    l3\t\tl4    链表数组</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                      ↓\t   ↓\t ↓\t\t↓</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                      i1   i2 \t i3\t\ti4    要排序的数组</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            依次对每个数的个位数的值所在的元素放入对应所在的链表中，然后每个链表再还原数组</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            例如：192 ，232，123，121</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                 l1    l2  \tl3</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                  ↓\t\t↓\t ↓</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                 121   192\t 123</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                        ↓</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                       232</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>           再还原</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                 121   192   232   123</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>           同理对十位数，百位数.... 一样的操作，最后的结果即为排序的结果</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">int</span> maxV <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAsInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">int</span> exp <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>exp <span class=\"token operator\">&lt;=</span> maxV<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cnt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token comment\">//digit : 当前位数</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token comment\">//  - 192, exp = 1, d = 192</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token comment\">//  - 192, exp = 10, d = 19</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">int</span> digit <span class=\"token operator\">=</span> num <span class=\"token operator\">/</span> exp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                cnt<span class=\"token punctuation\">[</span>digit <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                用于确定下标</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                [23, 24, 5, 15, 3]</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                cnt [3] = 2, cnt [4] = 1, cnt [5] = 2</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                cnt [3] = cnt [3] + 0 : 23, 3 前面有 0 个元素</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                cnt [4] = cnt [4] + 2 : 24 前面有 2 个元素</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                cnt [5] = cnt [5] + 3 : 5, 15 前面有 3 个元素</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                cnt<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            从后往前遍历</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                [23, 24, 5, 15, 3]</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                cnt [3] = 2, cnt [4] = 3, cnt [5] = 5</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                对于 5, 15</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    - 15 对应的下标 (4) : cnt [5] - 1, cnt [5]--</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    - 5 对应的下标 (3) : cnt [5] - 1, cnt [5]--</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            若从前往后遍历</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                cnt [5] = 5</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    - 导致 5 对应的下标从 3 变为 cnt [5] - 1 = 4</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token keyword\">int</span> digit <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> exp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">[</span>digit <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                cnt<span class=\"token punctuation\">[</span>digit <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            nums <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            exp <span class=\"token operator\">*=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            ans <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>c 语言</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">maximumGap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numsSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> numsSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 获取最大数字</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> INT_MIN<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        max <span class=\"token operator\">=</span> <span class=\"token function\">fmax</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> exp <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>exp <span class=\"token operator\">&lt;=</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>numsSize <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">//cnt [i] 前面有几个元素</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>cnt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">int</span> digit <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> exp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            cnt<span class=\"token punctuation\">[</span>digit <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">// (*(cnt + digit % 10))++;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> cnt<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 倒序遍历</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">int</span> digit <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>nums <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> exp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">[</span>digit <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            cnt<span class=\"token punctuation\">[</span>digit <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        exp <span class=\"token operator\">*=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        nums <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        ans <span class=\"token operator\">=</span> <span class=\"token function\">fmax</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"链式基数排序\"><a class=\"anchor\" href=\"#链式基数排序\">#</a> 链式基数排序</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 链式基数排序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">radixSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numsSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 注：这是双向链表，head 与 tail 指针为哨兵</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    MyLinkedList<span class=\"token operator\">*</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 初始化</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">myLinkedListCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 获取最高位</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> INT_MIN<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numsSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        max <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> exp <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>exp <span class=\"token operator\">&lt;=</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 分配到指定位置</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numsSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">int</span> digit <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> exp <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 尾插法</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token function\">myLinkedListAddAtTail</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>digit<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 重新排列</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            MyLinkedList<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cur<span class=\"token operator\">-></span>size <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                nums<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>head<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token function\">myLinkedListDeleteAtIndex</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        exp <span class=\"token operator\">*=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 释放链表</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token function\">myLinkedListFree</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>双向链表</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Node</span> <span class=\"token operator\">*</span>prev<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> Node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Node <span class=\"token operator\">*</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span> MyLinkedList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Node<span class=\"token operator\">*</span> <span class=\"token function\">nodeCreate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    Node<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    node<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    node<span class=\"token operator\">-></span>v <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>MyLinkedList<span class=\"token operator\">*</span> <span class=\"token function\">myLinkedListCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    MyLinkedList<span class=\"token operator\">*</span> linkedList <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    linkedList<span class=\"token operator\">-></span>head <span class=\"token operator\">=</span> <span class=\"token function\">nodeCreate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    linkedList<span class=\"token operator\">-></span>tail <span class=\"token operator\">=</span> <span class=\"token function\">nodeCreate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    linkedList<span class=\"token operator\">-></span>head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> linkedList<span class=\"token operator\">-></span>tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    linkedList<span class=\"token operator\">-></span>tail<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> linkedList<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    linkedList<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> linkedList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 获取下标 index 的节点</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">myLinkedListGet</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token operator\">*</span> obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">>=</span> obj<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 从右往左</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> obj<span class=\"token operator\">-></span>size <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        Node<span class=\"token operator\">*</span> tail <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>tail<span class=\"token operator\">-></span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            tail <span class=\"token operator\">=</span> tail<span class=\"token operator\">-></span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            n<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">return</span> tail<span class=\"token operator\">-></span>v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 从左往右</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        Node<span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            head <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">return</span> head<span class=\"token operator\">-></span>v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\">// 头插法</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListAddAtHead</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token operator\">*</span> obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    Node<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token function\">nodeCreate</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    node<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    node<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    obj<span class=\"token operator\">-></span>head<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    obj<span class=\"token operator\">-></span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">// 尾插法</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListAddAtTail</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token operator\">*</span> obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    Node<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token function\">nodeCreate</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    node<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>tail<span class=\"token operator\">-></span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    node<span class=\"token operator\">-></span>prev<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    obj<span class=\"token operator\">-></span>tail<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    obj<span class=\"token operator\">-></span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token comment\">// 在第 index 个位置插入</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListAddAtIndex</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token operator\">*</span> obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">></span> obj<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    Node<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token function\">nodeCreate</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    Node<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token comment\">// 从右往左</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> obj<span class=\"token operator\">-></span>size <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        cur <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            n<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token comment\">// 从左往右</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        cur <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token comment\">// 获取 cur 的前驱插入</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    node<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    node<span class=\"token operator\">-></span>prev<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    node<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    cur<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    obj<span class=\"token operator\">-></span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token comment\">// 在第 index 个位置删除</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListDeleteAtIndex</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token operator\">*</span> obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> index <span class=\"token operator\">>=</span> obj<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    Node<span class=\"token operator\">*</span> cur <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token comment\">// 从右往左</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> obj<span class=\"token operator\">-></span>size <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        cur <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>tail<span class=\"token operator\">-></span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            n<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token comment\">// 从左往右</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        cur <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token comment\">// 删除 cur</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    cur<span class=\"token operator\">-></span>prev<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    cur<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> cur<span class=\"token operator\">-></span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    obj<span class=\"token operator\">-></span>size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token comment\">// 释放链表</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">myLinkedListFree</span><span class=\"token punctuation\">(</span>MyLinkedList<span class=\"token operator\">*</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token comment\">// 首先释放里面的全部元素</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    Node<span class=\"token operator\">*</span> head <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    Node<span class=\"token operator\">*</span> tail <span class=\"token operator\">=</span> obj<span class=\"token operator\">-></span>tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        Node<span class=\"token operator\">*</span> del <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        head <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>del<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"归并排序\"><a class=\"anchor\" href=\"#归并排序\">#</a> 归并排序</h2>\n<p><img loading=\"lazy\" data-src=\"/images/mergeSort.png\" alt=\"img\" /></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span> <span class=\"token comment\">//memcpy</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 归并</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> nnums<span class=\"token punctuation\">;</span><span class=\"token comment\">// 必须要全局，否则调用函数后，会清空当前栈的局部变量，应该</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">>=</span> r1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>nums<span class=\"token punctuation\">[</span>r1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        nnums <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> nnums<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> l1 <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>r1 <span class=\"token operator\">-</span> l1<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    nnums <span class=\"token operator\">=</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> l1<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> lnums <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>mid <span class=\"token operator\">-</span> l1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">//int: 4 个字节</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 2 3 4 5：4 个 int，16 个字节</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//nnums 为指针</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>lnums<span class=\"token punctuation\">,</span> nnums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>mid <span class=\"token operator\">-</span> l1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> rnums <span class=\"token operator\">=</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">int</span> nl <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> l1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> nr <span class=\"token operator\">=</span> r1 <span class=\"token operator\">-</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span>r1 <span class=\"token operator\">-</span> l1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> nl <span class=\"token operator\">||</span> r <span class=\"token operator\">&lt;</span> nr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">int</span> lnum <span class=\"token operator\">=</span> l <span class=\"token operator\">==</span> nl <span class=\"token operator\">?</span> INT_MAX <span class=\"token operator\">:</span> lnums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">int</span> rnum <span class=\"token operator\">=</span> r <span class=\"token operator\">==</span> nr <span class=\"token operator\">?</span> INT_MAX <span class=\"token operator\">:</span> rnums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lnum <span class=\"token operator\">&lt;</span> rnum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            tmp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lnum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            l<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            tmp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rnum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            r<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    nnums <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> nnums<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">01</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> nums <span class=\"token operator\">=</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"堆排序\"><a class=\"anchor\" href=\"#堆排序\">#</a> 堆排序</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 堆排序，从大到小</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 小根堆:k&lt;2k+1,k&lt;2k</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">/* 调整以 key 为根的大根堆</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t例如：1 3 2 1 5 7 调整为大根堆</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\ti = 3 , key = 1 以索引为 3 为根的大根堆</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t\t2 * k > len return;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t\t1 3 2 1 5 7</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t\t\t↑</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t\t\tk</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t------------------------------------------------------------</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\ti = 2，key = 2\t以索引为 2 为根的大根堆</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\t\t\t   --</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t1 3 7 1 5 (2)</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t\t↑\t   ↑</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t\t\tk  →   k</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\t1 3 7 1 5  2   将 key 插入这个位置 nums [k] = key;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t------------------------------------------------------------</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\ti = 1, key = 3 , 以索引为 1 为根的大根堆</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\t\t-----</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t   1 7  (3) 1  5  2</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t ↑\t ↑</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t\t k → k</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t   1 7   5  1 (3) 2</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t\t\t ↑     ↑</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\t\t k  →  k</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t   1 7   5  1  3  2  将 key 插入这个位置 nums [k] = key;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t------------------------------------------------------------</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\ti = 0, key = 1 , 以索引为 0 为根的大根堆</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t   ------</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t   7  (1)  5  1  3  2</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t   ↑   ↑</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t   k → k</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t\t\t  -----</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t   7   5  (1) 1  3  2</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t\t   ↑   ↑</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t\t   k → k</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t\t\t\t\t -----</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t   7   5   3  1 (1)  2</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t\t\t   ↑     ↑</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t\t\t   k  →   k</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t   7   5   3  1  1   2</pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t   至此完成了大根堆的创建</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t   从上述可以看出，每次打括号的地方的索引：k 的当前位置赋值后</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t\t\t需要取检查当前索引 k 为根索引是否为大根堆 即 k *= 2;</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t\t\t即要去检查： 2 * k , 2 * k + 1 ，二者的值是否大于 key</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">// 从上往下调整堆</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sink</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">int</span> key <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> k <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">// 小根堆，选择小者</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token comment\">// 满足条件</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token comment\">// 覆盖</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        i <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">createHeap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token function\">sink</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">^=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">heapSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numsSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token comment\">// 首先创建小根堆</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token function\">createHeap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> numsSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token comment\">// 从最后一个开始，此时堆顶是最小的元素 mVal</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token comment\">// 将 mVal 与 lastIndex 交换位置，然后重复调整堆</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token keyword\">int</span> lastIndex <span class=\"token operator\">=</span> numsSize <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>lastIndex <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token function\">sink</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> lastIndex<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">43</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">,</span><span class=\"token number\">412</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token function\">heapSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"快排\"><a class=\"anchor\" href=\"#快排\">#</a> 快排</h2>\n<p><img loading=\"lazy\" data-src=\"/images/quickSort.png\" alt=\"img\" /></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 快排</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 选择枢纽，这里默认首元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> key <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> right <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 使得左边都小于 key，右边都大于 key</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 这里必须右指针先走，否则若 l 先走，则可能交换之后大的被交换过来</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//  因为枢纽为首元素</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            r<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//nums [r] 小于 key</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            l<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> l<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">>=</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 分区</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 递归左右区间</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">312</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"希尔排序\"><a class=\"anchor\" href=\"#希尔排序\">#</a> 希尔排序</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 希尔排序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">shellSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numsSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> ts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> tSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 选取增量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> tSize<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> ts<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 间隔为 t，进行直接插入排序</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> t<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numsSize<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> t<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">int</span> key <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                nums<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> t<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                j <span class=\"token operator\">-=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            nums<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> t<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"折半插入排序\"><a class=\"anchor\" href=\"#折半插入排序\">#</a> 折半插入排序</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 折半插入排序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numsSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numsSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token comment\">// 2 3</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                r <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                l <span class=\"token operator\">=</span> m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">></span> l<span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"简单选择排序\"><a class=\"anchor\" href=\"#简单选择排序\">#</a> 简单选择排序</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">min</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 简单选择排序；每次选择最小的</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">selectSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numsSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numsSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> numsSize<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            m <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"直接插入排序\"><a class=\"anchor\" href=\"#直接插入排序\">#</a> 直接插入排序</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 直接插入排序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">insertSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numsSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numsSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            nums<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"冒泡排序\"><a class=\"anchor\" href=\"#冒泡排序\">#</a> 冒泡排序</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">max</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">^=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 冒泡排序，升序</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numsSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 遇到反着的交换位置</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> numsSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"8大排序比较\"><a class=\"anchor\" href=\"#8大排序比较\">#</a> 8 大排序比较</h2>\n<table>\n<thead>\n<tr>\n<th>排序算法</th>\n<th>时间复杂度</th>\n<th>空间复杂度</th>\n<th>是否稳定</th>\n<th>最佳情况</th>\n<th>最坏情况</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>冒泡排序</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>是</td>\n<td>O(n)</td>\n<td>O(n^2)</td>\n<td>小型数据集</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>否</td>\n<td>O(n^2)</td>\n<td>O(n^2)</td>\n<td>不适合大型数据集</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>O(n^2)</td>\n<td>O(1)</td>\n<td>是</td>\n<td>O(n)</td>\n<td>O(n^2)</td>\n<td>小型数据集或基本有序数据集</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td>O(nlog^2 n)</td>\n<td>O(1)</td>\n<td>否</td>\n<td>-</td>\n<td>-</td>\n<td>大型数据集</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>O(nlogn)</td>\n<td>O(n)</td>\n<td>是</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>大型数据集但需额外内存空间</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>O(nlogn)</td>\n<td>O(logn)</td>\n<td>否</td>\n<td>O(nlogn)</td>\n<td>O(n^2)</td>\n<td>大型数据集</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>O(nlogn)</td>\n<td>O(1)</td>\n<td>否</td>\n<td>O(nlogn)</td>\n<td>O(nlogn)</td>\n<td>大型数据集但不稳定</td>\n</tr>\n<tr>\n<td>计数排序</td>\n<td>O(n+k)</td>\n<td>O(n+k)</td>\n<td>是</td>\n<td>O(n+k)</td>\n<td>O(n+k)</td>\n<td>数据范围不大的整数排序</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"kmp-算法\"><a class=\"anchor\" href=\"#kmp-算法\">#</a> KMP 算法</h1>\n<h2 id=\"28-实现-strstr\"><a class=\"anchor\" href=\"#28-实现-strstr\">#</a> 28. 实现 strStr ()</h2>\n<p><a href=\"https://leetcode.cn/problems/implement-strstr/\">力扣题目链接 (opens new window)</a></p>\n<p>实现 strStr () 函数。</p>\n<p>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从 0 开始)。如果不存在，则返回 -1。</p>\n<p>示例 1: 输入: haystack = &quot;hello&quot;, needle = &quot;ll&quot; 输出: 2</p>\n<p>示例 2: 输入: haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot; 输出: -1</p>\n<p>说明：当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。 对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与 C 语言的 strstr () 以及 Java 的 indexOf () 定义相符。</p>\n<h3 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h3>\n<p>本题是 KMP 经典题目。</p>\n<p>以下文字如果看不进去，可以看我的 B 站视频：</p>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1PD4y1o7nd/\">帮你把 KMP 算法学个通透！B 站（理论篇）(opens new window)</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1M5411j7Xx\">帮你把 KMP 算法学个通透！（求 next 数组代码篇）(opens new window)</a></li>\n</ul>\n<p>KMP 的经典思想就是:<strong> 当出现字符串不匹配时，可以记录一部分之前已经匹配的文本内容，利用这些信息避免从头再去做匹配。</strong></p>\n<p>本篇将以如下顺序来讲解 KMP，</p>\n<ul>\n<li>什么是 KMP</li>\n<li>KMP 有什么用</li>\n<li>什么是前缀表</li>\n<li>为什么一定要用前缀表</li>\n<li>如何计算前缀表</li>\n<li>前缀表与 next 数组</li>\n<li>使用 next 数组来匹配</li>\n<li>时间复杂度分析</li>\n<li>构造 next 数组</li>\n<li>使用 next 数组来做匹配</li>\n<li>前缀表统一减一 C++ 代码实现</li>\n<li>前缀表（不减一）C++ 实现</li>\n<li>总结</li>\n</ul>\n<p>读完本篇可以顺便把 leetcode 上 28. 实现 strStr () 题目做了。</p>\n<h3 id=\"什么是kmp\"><a class=\"anchor\" href=\"#什么是kmp\">#</a> 什么是 KMP</h3>\n<p>说到 KMP，先说一下 KMP 这个名字是怎么来的，为什么叫做 KMP 呢。</p>\n<p>因为是由这三位学者发明的：Knuth，Morris 和 Pratt，所以取了三位学者名字的首字母。所以叫做 KMP</p>\n<h3 id=\"kmp有什么用\"><a class=\"anchor\" href=\"#kmp有什么用\">#</a> KMP 有什么用</h3>\n<p>KMP 主要应用在字符串匹配上。</p>\n<p>KMP 的主要思想是<strong>当出现字符串不匹配时，可以知道一部分之前已经匹配的文本内容，可以利用这些信息避免从头再去做匹配了。</strong></p>\n<p>所以如何记录已经匹配的文本内容，是 KMP 的重点，也是 next 数组肩负的重任。</p>\n<p>其实 KMP 的代码不好理解，一些同学甚至直接把 KMP 代码的模板背下来。</p>\n<p>没有彻底搞懂，懵懵懂懂就把代码背下来太容易忘了。</p>\n<p>不仅面试的时候可能写不出来，如果面试官问：<strong>next 数组里的数字表示的是什么，为什么这么表示？</strong></p>\n<p>估计大多数候选人都是懵逼的。</p>\n<p>下面 Carl 就带大家把 KMP 的精髓，next 数组弄清楚。</p>\n<h3 id=\"什么是前缀表\"><a class=\"anchor\" href=\"#什么是前缀表\">#</a> 什么是前缀表</h3>\n<p>写过 KMP 的同学，一定都写过 next 数组，那么这个 next 数组究竟是个啥呢？</p>\n<p>next 数组就是一个前缀表（prefix table）。</p>\n<p>前缀表有什么作用呢？</p>\n<p><strong>前缀表是用来回退的，它记录了模式串与主串 (文本串) 不匹配的时候，模式串应该从哪里开始重新匹配。</strong></p>\n<p>为了清楚的了解前缀表的来历，我们来举一个例子：</p>\n<p>要在文本串：aabaabaafa 中查找是否出现过一个模式串：aabaaf。</p>\n<p>请记住文本串和模式串的作用，对于理解下文很重要，要不然容易看懵。所以说三遍：</p>\n<p>要在文本串：aabaabaafa 中查找是否出现过一个模式串：aabaaf。</p>\n<p>要在文本串：aabaabaafa 中查找是否出现过一个模式串：aabaaf。</p>\n<p>要在文本串：aabaabaafa 中查找是否出现过一个模式串：aabaaf。</p>\n<p>如动画所示：</p>\n<p><img loading=\"lazy\" data-src=\"/images/KMP-1.gif\" alt=\"img\" /></p>\n<p>动画里，我特意把 子串 <code>aa</code>  标记上了，这是有原因的，大家先注意一下，后面还会说道。</p>\n<p>可以看出，文本串中第六个字符 b 和 模式串的第六个字符 f，不匹配了。如果暴力匹配，会发现不匹配，此时就要从头匹配了。</p>\n<p>但如果使用前缀表，就不会从头匹配，而是从上次已经匹配的内容开始匹配，找到了模式串中第三个字符 b 继续开始匹配。</p>\n<p>此时就要问了<strong>前缀表是如何记录的呢？</strong></p>\n<p>首先要知道前缀表的任务是当前位置匹配失败，找到之前已经匹配上的位置，再重新匹配，此也意味着在某个字符失配时，前缀表会告诉你下一步匹配中，模式串应该跳到哪个位置。</p>\n<p>那么什么是前缀表：<strong>记录下标 i 之前（包括 i）的字符串中，有多大长度的相同前缀后缀。</strong></p>\n<h3 id=\"最长公共前后缀\"><a class=\"anchor\" href=\"#最长公共前后缀\">#</a> 最长公共前后缀？</h3>\n<p>文章中字符串的<strong>前缀是指不包含最后一个字符的所有以第一个字符开头的连续子串</strong>。</p>\n<p><strong>后缀是指不包含第一个字符的所有以最后一个字符结尾的连续子串</strong>。</p>\n<p><strong>正确理解什么是前缀什么是后缀很重要</strong>！</p>\n<p>那么网上清一色都说 “kmp 最长公共前后缀” 又是什么回事呢？</p>\n<p>我查了一遍 算法导论 和 算法 4 里 KMP 的章节，都没有提到 “最长公共前后缀” 这个词，也不知道从哪里来了，我理解是用 “<strong>最长相等前后缀</strong>” 更准确一些。</p>\n<p><strong>因为前缀表要求的就是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>相同前后缀的长度。</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}相同前后缀的长度。</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">相同前后缀的长度。</span></span></span></span></strong></p>\n<p>而最长公共前后缀里面的 “公共”，更像是说前缀和后缀公共的长度。这其实并不是前缀表所需要的。</p>\n<p>所以字符串 a 的最长相等前后缀为 0。 字符串 aa 的最长相等前后缀为 1。 字符串 aaa 的最长相等前后缀为 2。 等等.....。</p>\n<h3 id=\"为什么一定要用前缀表\"><a class=\"anchor\" href=\"#为什么一定要用前缀表\">#</a> 为什么一定要用前缀表</h3>\n<p>这就是前缀表，那为啥就能告诉我们 上次匹配的位置，并跳过去呢？</p>\n<p>回顾一下，刚刚匹配的过程在下标 5 的地方遇到不匹配，模式串是指向 f，如图：</p>\n<p><img loading=\"lazy\" data-src=\"/images/KMP-1.png\" alt=\"img\" /></p>\n<p>然后就找到了下标 2，指向 b，继续匹配：如图：</p>\n<p><img loading=\"lazy\" data-src=\"/images/KMP-2.png\" alt=\"img\" /></p>\n<p>以下这句话，对于理解为什么使用前缀表可以告诉我们匹配失败之后跳到哪里重新匹配 非常重要！</p>\n<p><strong>下标 5 之前这部分的字符串（也就是字符串 aabaa）的最长相等的前缀 和 后缀字符串是 子字符串 aa ，因为找到了最长相等的前缀和后缀</strong><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>匹配失败的位置是后缀子串的后面，那么我们找到与其相同的前缀的后面从新匹配就可以了。</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}匹配失败的位置是后缀子串的后面，那么我们找到与其相同的前缀的后面从新匹配就可以了。</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">匹配失败的位置是后缀子串的后面，那么我们找到与其相同的前缀的后面从新匹配就可以了。</span></span></span></span></p>\n<p>所以前缀表具有告诉我们当前位置匹配失败，跳到之前已经匹配过的地方的能力。</p>\n<p><strong>很多介绍 KMP 的文章或者视频并没有把为什么要用前缀表？这个问题说清楚，而是直接默认使用前缀表。</strong></p>\n<h3 id=\"如何计算前缀表\"><a class=\"anchor\" href=\"#如何计算前缀表\">#</a> 如何计算前缀表</h3>\n<p>接下来就要说一说怎么计算前缀表。</p>\n<p>如图：</p>\n<p><img loading=\"lazy\" data-src=\"/images/KMP-5.png\" alt=\"img\" /></p>\n<p>长度为前 1 个字符的子串 <code>a</code> ，最长相同前后缀的长度为 0。（注意字符串的<strong>前缀是指不包含最后一个字符的所有以第一个字符开头的连续子串</strong>；<strong>后缀是指不包含第一个字符的所有以最后一个字符结尾的连续子串</strong>。）</p>\n<p><img loading=\"lazy\" data-src=\"/images/KMP-6.png\" alt=\"img\" /></p>\n<p><code>aa</code> ，最长相同前后缀的长度为 1。</p>\n<p><img loading=\"lazy\" data-src=\"/images/KMP-7.png\" alt=\"img\" /></p>\n<p>长度为前 3 个字符的子串 <code>aab</code> ，最长相同前后缀的长度为 0。</p>\n<p>以此类推： 长度为前 4 个字符的子串 <code>aaba</code> ，最长相同前后缀的长度为 1。 长度为前 5 个字符的子串 <code>aabaa</code> ，最长相同前后缀的长度为 2。 长度为前 6 个字符的子串 <code>aabaaf</code> ，最长相同前后缀的长度为 0。</p>\n<p>那么把求得的<strong>最长相等前后缀的长度</strong>就是对应前缀表的元素，如图：</p>\n<p><img loading=\"lazy\" data-src=\"/images/KMP-8.png\" alt=\"img\" /></p>\n<p>可以看出模式串与前缀表对应位置的数字表示的就是：<strong>下标 i 之前（包括 i）的字符串中，有多大长度的相同前缀后缀。</strong></p>\n<p>再来看一下如何利用 前缀表找到 当字符不匹配的时候应该指针应该移动的位置。如动画所示：</p>\n<p><img loading=\"lazy\" data-src=\"/images/KMP-9.png\" alt=\"img\" /></p>\n<p>找到的不匹配的位置， 那么此时我们要看它的前一个字符的前缀表的数值是多少。</p>\n<p>为什么要前一个字符的前缀表的数值呢，因为要找前面字符串的最长相同的前缀和后缀。</p>\n<p>所以要看前一位的 前缀表的数值。</p>\n<p>前一个字符的前缀表的数值是 2， 所有把下标移动到下标 2 的位置继续比配。 可以再反复看一下上面的动画。</p>\n<p>最后就在文本串中找到了和模式串匹配的子串了。</p>\n<h3 id=\"前缀表与next数组\"><a class=\"anchor\" href=\"#前缀表与next数组\">#</a> 前缀表与 next 数组</h3>\n<p>很多 KMP 算法的时间都是使用 next 数组来做回退操作，那么 next 数组与前缀表有什么关系呢？</p>\n<p>next 数组就可以是前缀表，但是很多实现都是把前缀表统一减一（右移一位，初始位置为 - 1）之后作为 next 数组。</p>\n<p>为什么这么做呢，其实也是很多文章视频没有解释清楚的地方。</p>\n<p>其实<strong>这并不涉及到 KMP 的原理，而是具体实现，next 数组即可以就是前缀表，也可以是前缀表统一减一（右移一位，初始位置为 - 1）。</strong></p>\n<p>后面我会提供两种不同的实现代码，大家就明白了。</p>\n<h3 id=\"使用next数组来匹配\"><a class=\"anchor\" href=\"#使用next数组来匹配\">#</a> 使用 next 数组来匹配</h3>\n<p><strong>以下我们以前缀表统一减一之后的 next 数组来做演示</strong>。</p>\n<p>有了 next 数组，就可以根据 next 数组来 匹配文本串 s，和模式串 t 了。</p>\n<p>注意 next 数组是新前缀表（旧前缀表统一减一了）。</p>\n<p>匹配过程动画如下：</p>\n<p><img loading=\"lazy\" data-src=\"/images/KMP-4.gif\" alt=\"img\" /></p>\n<h3 id=\"时间复杂度分析\"><a class=\"anchor\" href=\"#时间复杂度分析\">#</a> 时间复杂度分析</h3>\n<p>其中 n 为文本串长度，m 为模式串长度，因为在匹配的过程中，根据前缀表不断调整匹配的位置，可以看出匹配的过程是 O (n)，之前还要单独生成 next 数组，时间复杂度是 O (m)。所以整个 KMP 算法的时间复杂度是 O (n+m) 的。</p>\n<p>暴力的解法显而易见是 O (n × m)，所以<strong> KMP 在字符串匹配中极大的提高的搜索的效率。</strong></p>\n<p>为了和力扣题目 28. 实现 strStr 保持一致，方便大家理解，以下文章统称 haystack 为文本串，needle 为模式串。</p>\n<p>都知道使用 KMP 算法，一定要构造 next 数组。</p>\n<h3 id=\"构造next数组\"><a class=\"anchor\" href=\"#构造next数组\">#</a> 构造 next 数组</h3>\n<p>我们定义一个函数 getNext 来构建 next 数组，函数参数为指向 next 数组的指针，和一个字符串。 代码如下：</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>void getNext(int* next, const string&amp; s)</pre></td></tr></table></figure><p><strong>构造 next 数组其实就是计算模式串 s，前缀表的过程。</strong> 主要有如下三步：</p>\n<ol>\n<li>初始化</li>\n<li>处理前后缀不相同的情况</li>\n<li>处理前后缀相同的情况</li>\n</ol>\n<p>接下来我们详解详解一下。</p>\n<ol>\n<li>初始化：</li>\n</ol>\n<p>定义两个指针 i 和 j，j 指向前缀末尾位置，i 指向后缀末尾位置。</p>\n<p>然后还要对 next 数组进行初始化赋值，如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>next<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>j 为什么要初始化为 -1 呢，因为之前说过 前缀表要统一减一的操作仅仅是其中的一种实现，我们这里选择 j 初始化为 - 1，下文我还会给出 j 不初始化为 - 1 的实现代码。</p>\n<p>next [i] 表示 i（包括 i）之前最长相等的前后缀长度（其实就是 j）</p>\n<p>所以初始化 next [0] = j 。</p>\n<ol>\n<li>处理前后缀不相同的情况</li>\n</ol>\n<p>因为 j 初始化为 - 1，那么 i 就从 1 开始，进行 s [i] 与 s [j+1] 的比较。</p>\n<p>所以遍历模式串 s 的循环下标 i 要从 1 开始，代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr></table></figure><p>1</p>\n<p>如果 s [i] 与 s [j+1] 不相同，也就是遇到 前后缀末尾不相同的情况，就要向前回退。</p>\n<p>怎么回退呢？</p>\n<p>next [j] 就是<strong>记录着 j（包括 j）之前的子串的相同前后缀的长度。</strong></p>\n<p>那么 s [i] 与 s [j+1] 不相同，就要找 j+1<strong> 前一个元素在 next 数组里的值</strong>（就是 next [j]）。</p>\n<p>所以，处理前后缀不相同的情况代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 前后缀不相同了</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 向前回退，回退到之前匹配的位置</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//\t\t\t\t\t  aabaabaaf</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//                     aabaaf</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>处理前后缀相同的情况</li>\n</ol>\n<p>如果 s [i] 与 s [j + 1] 相同，那么就同时向后移动 i 和 j 说明找到了相同的前后缀，同时还要将 j（前缀的长度）赋给 next [i], 因为 next [i] 要记录相同前后缀的长度。</p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 找到相同的前后缀</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>最后整体构建 next 数组的函数代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    next<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 注意 i 从 1 开始</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 前后缀不相同了</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 向前回退，回退到之前匹配的位置</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 找到相同的前后缀</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 j（前缀的长度）赋给 next [i]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>代码构造 next 数组的逻辑流程动画如下：</p>\n<p><img loading=\"lazy\" data-src=\"/images/KMP-3.gif\" alt=\"img\" /></p>\n<p>得到了 next 数组之后，就要用这个来做匹配了。</p>\n<h3 id=\"使用next数组来做匹配\"><a class=\"anchor\" href=\"#使用next数组来做匹配\">#</a> 使用 next 数组来做匹配</h3>\n<p>在文本串 s 里 找是否出现过模式串 t。</p>\n<p>定义两个下标 j 指向模式串起始位置，i 指向文本串起始位置。</p>\n<p>那么 j 初始值依然为 - 1，为什么呢？ <strong>依然因为 next 数组里记录的起始位置为 - 1。</strong></p>\n<p>i 就从 0 开始，遍历文本串，代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>接下来就是 s [i] 与 t [j + 1] （因为 j 从 - 1 开始的） 进行比较。</p>\n<p>如果 s [i] 与 t [j + 1] 不相同，j 就要从 next 数组里寻找下一个匹配的位置。</p>\n<p>代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> t<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果 s [i] 与 t [j + 1] 相同，那么 i 和 j 同时向后移动， 代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//i 的增加在 for 循环里</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如何判断在文本串 s 里出现了模式串 t 呢，如果 j 指向了模式串 t 的末尾，那么就说明模式串 t 完全匹配文本串 s 里的某个子串了。</p>\n<p>本题要在文本串字符串中找出模式串出现的第一个位置 (从 0 开始)，所以返回当前在文本串匹配模式串的位置 i 减去 模式串的长度，就是文本串字符串中出现模式串的第一个位置。</p>\n<p>代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>那么使用 next 数组，用模式串匹配文本串的整体代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 因为 next 数组里记录的起始位置为 - 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 注意 i 就从 0 开始</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> t<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 不匹配</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//j 寻找之前匹配的位置</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 匹配，j 和 i 同时向后移动</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//i 的增加在 for 循环里</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 文本串 s 里出现了模式串 t</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>此时所有逻辑的代码都已经写出来了，力扣 28. 实现 strStr 题目的整体代码如下：</p>\n<h3 id=\"前缀表统一减一-c代码实现\"><a class=\"anchor\" href=\"#前缀表统一减一-c代码实现\">#</a> 前缀表统一减一 C++ 代码实现</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        next<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 注意 i 从 1 开始</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 前后缀不相同了</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 向前回退</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 找到相同的前后缀</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 j（前缀的长度）赋给 next [i]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">strStr</span><span class=\"token punctuation\">(</span>string haystack<span class=\"token punctuation\">,</span> string needle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>needle<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">int</span> next<span class=\"token punctuation\">[</span>needle<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> needle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//// 因为 next 数组里记录的起始位置为 - 1</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> haystack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 注意 i 就从 0 开始</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> haystack<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> needle<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 不匹配</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//j 寻找之前匹配的位置</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>haystack<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> needle<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 匹配，j 和 i 同时向后移动</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//i 的增加在 for 循环里</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>needle<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 文本串 s 里出现了模式串 t</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> needle<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"前缀表不减一c实现\"><a class=\"anchor\" href=\"#前缀表不减一c实现\">#</a> 前缀表（不减一）C++ 实现</h3>\n<p>那么前缀表就不减一了，也不右移的，到底行不行呢？</p>\n<p><strong>行！</strong></p>\n<p>我之前说过，这仅仅是 KMP 算法实现上的问题，如果就直接使用前缀表可以换一种回退方式，找 j=next [j-1] 来进行回退。</p>\n<p>主要就是 j=next [x] 这一步最为关键！</p>\n<p>我给出的 getNext 的实现为：（前缀表统一减一）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    next<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 注意 i 从 1 开始</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 前后缀不相同了</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 向前回退</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 找到相同的前后缀</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将 j（前缀的长度）赋给 next [i]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>此时如果输入的模式串为 aabaaf，对应的 next 为 - 1 0 -1 0 1 -1。</p>\n<p>这里 j 和 next [0] 初始化为 - 1，整个 next 数组是以 前缀表减一之后的效果来构建的。</p>\n<p>那么前缀表不减一来构建 next 数组，代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        next<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//j 要保证大于 0，因为下面有取 j-1 作为数组下标的操作</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 注意这里，是要找前一位的对应的回退位置了</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>此时如果输入的模式串为 aabaaf，对应的 next 为 0 1 0 1 2 0，（其实这就是前缀表的数值了）。</p>\n<p>那么用这样的 next 数组也可以用来做匹配，代码要有所改动。</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        next<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">strStr</span><span class=\"token punctuation\">(</span>string haystack<span class=\"token punctuation\">,</span> string needle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>needle<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">int</span> next<span class=\"token punctuation\">[</span>needle<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> needle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> haystack<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> haystack<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> needle<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>haystack<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> needle<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> needle<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> needle<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p>我们介绍了什么是 KMP，KMP 可以解决什么问题，然后分析 KMP 算法里的 next 数组，知道了 next 数组就是前缀表，再分析为什么要是前缀表而不是什么其他表。</p>\n<p>接着从给出的模式串中，我们一步一步的推导出了前缀表，得出前缀表无论是统一减一还是不减一得到的 next 数组仅仅是 kmp 的实现方式的不同。</p>\n<p>其中还分析了 KMP 算法的时间复杂度，并且和暴力方法做了对比。</p>\n<p>然后先用前缀表统一减一得到的 next 数组，求得文本串 s 里是否出现过模式串 t，并给出了具体分析代码。</p>\n<p>又给出了直接用前缀表作为 next 数组，来做匹配的实现代码。</p>\n<p>可以说把 KMP 的每一个细微的细节都扣了出来，毫无遮掩的展示给大家了！</p>\n<h3 id=\"其他语言版本\"><a class=\"anchor\" href=\"#其他语言版本\">#</a> 其他语言版本</h3>\n<p>Java：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 基于窗口滑动的算法</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * &lt;p></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 时间复杂度：O (m*n)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * 空间复杂度：O (1)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * 注：n 为 haystack 的长度，m 为 needle 的长度</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 双指针</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">strStr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> haystack<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> needle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 若 needle 为空返回 0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>needle <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> h <span class=\"token operator\">=</span>  haystack<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> n <span class=\"token operator\">=</span>  needle<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//haystack 的长度小于 needle 的长度返回 - 1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 记录 needle 的长度</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 循环 haystack</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> h<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span><span class=\"token comment\">// 记录 needle 的下标</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>right <span class=\"token operator\">&lt;</span> h<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> h<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> n<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token comment\">//h 中相同子串的长度等于 n 的长度直接返回 left</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>length<span class=\"token operator\">==</span><span class=\"token punctuation\">(</span> index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token keyword\">return</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                right<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方法一</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> next<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        next<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                j<span class=\"token operator\">=</span>next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 向前回退，回退到之前匹配的位置</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">strStr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> haystack<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> needle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>needle<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>needle<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> needle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>haystack<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> haystack<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> needle<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>haystack<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>needle<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span>needle<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// aabaabaaf</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                \t\t\t\t\t  <span class=\"token comment\">//aabaaf  最后 j=4 , 因为 needle.length ()=3 , 匹配成功 j=0 开始</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span>needle<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 前缀表（不减一）Java 实现</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">strStr</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> haystack<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> needle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>needle<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>needle<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> needle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> haystack<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> needle<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> haystack<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>needle<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> haystack<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> needle<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">return</span> i <span class=\"token operator\">-</span> needle<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> next<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        next<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"459重复的子字符串\"><a class=\"anchor\" href=\"#459重复的子字符串\">#</a> 459. 重复的子字符串</h2>\n<p><a href=\"https://leetcode.cn/problems/repeated-substring-pattern/\">力扣题目链接 (opens new window)</a></p>\n<p>给定一个非空的字符串，判断它是否可以由它的一个子串重复多次构成。给定的字符串只含有小写英文字母，并且长度不超过 10000。</p>\n<p>示例 1:<br />\n 输入: &quot;abab&quot;<br />\n 输出: True<br />\n 解释：可由子字符串 &quot;ab&quot; 重复两次构成。</p>\n<p>示例 2:<br />\n 输入: &quot;aba&quot;<br />\n 输出: False</p>\n<p>示例 3:<br />\n 输入: &quot;abcabcabcabc&quot;<br />\n 输出: True<br />\n 解释：可由子字符串 &quot;abc&quot; 重复四次构成。 (或者子字符串 &quot;abcabc&quot; 重复两次构成。)</p>\n<h3 id=\"-3\"><a class=\"anchor\" href=\"#-3\">#</a> <a href=\"https://programmercarl.com/0459.%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2.html#%E6%80%9D%E8%B7%AF\">#</a>思路</h3>\n<p>暴力的解法， 就是一个 for 循环获取 子串的终止位置， 然后判断子串是否能重复构成字符串，又嵌套一个 for 循环，所以是 O (n^2) 的时间复杂度。</p>\n<p>有的同学可以想，怎么一个 for 循环就可以获取子串吗？ 至少得一个 for 获取子串起始位置，一个 for 获取子串结束位置吧。</p>\n<p>其实我们只需要判断，以第一个字母为开始的子串就可以，所以一个 for 循环获取子串的终止位置就行了。 而且遍历的时候 都不用遍历结束，只需要遍历到中间位置，因为子串结束位置大于中间位置的话，一定不能重复组成字符串。</p>\n<p>暴力的解法，这里就不讲了。</p>\n<p>主要讲一讲移动匹配 和 KMP 两种方法。</p>\n<h3 id=\"-4\"><a class=\"anchor\" href=\"#-4\">#</a> <a href=\"https://programmercarl.com/0459.%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2.html#%E7%A7%BB%E5%8A%A8%E5%8C%B9%E9%85%8D\">#</a>移动匹配</h3>\n<p>当一个字符串 s：abcabc，内部又重复的子串组成，那么这个字符串的结构一定是这样的：</p>\n<p><img loading=\"lazy\" data-src=\"/images/20220728104518.png\" alt=\"img\" /></p>\n<p>也就是又前后又相同的子串组成。</p>\n<p>那么既然前面有相同的子串，后面有相同的子串，用 s + s，这样组成的字符串中，后面的子串做前串，前后的子串做后串，就一定还能组成一个 s，如图：</p>\n<p><img loading=\"lazy\" data-src=\"/images/20220728104931.png\" alt=\"img\" /></p>\n<p>所以判断字符串 s 是否有重复子串组成，只要两个 s 拼接在一起，里面还出现一个 s 的话，就说明是又重复子串组成。</p>\n<p>当然，我们在判断 s + s 拼接的字符串里是否出现一个 s 的的时候，<strong>要刨除 s + s 的首字符和尾字符</strong>，这样避免在 s+s 中搜索出原来的 s，我们要搜索的是中间拼接出来的 s。</p>\n<p>代码如下：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">repeatedSubstringPattern</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        string t <span class=\"token operator\">=</span> s <span class=\"token operator\">+</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        t<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 掐头去尾</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token double-colon punctuation\">::</span>npos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// r</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>不过这种解法还有一个问题，就是 我们最终还是要判断 一个字符串（s + s）是否出现过 s 的过程，大家可能直接用 contains，find 之类的库函数。 却忽略了实现这些函数的时间复杂度（暴力解法是 m * n，一般库函数实现为 O (m + n)）。</p>\n<p>如果我们做过 <a href=\"https://programmercarl.com/0028.%E5%AE%9E%E7%8E%B0strStr.html\">28. 实现 strStr (opens new window)</a> 题目的话，其实就知道，<strong>实现一个 高效的算法来判断 一个字符串中是否出现另一个字符串是很复杂的</strong>，这里就涉及到了 KMP 算法。</p>\n<h3 id=\"-5\"><a class=\"anchor\" href=\"#-5\">#</a> <a href=\"https://programmercarl.com/0459.%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2.html#kmp\">#</a>KMP</h3>\n<h4 id=\"-6\"><a class=\"anchor\" href=\"#-6\">#</a> <a href=\"https://programmercarl.com/0459.%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E4%BD%BF%E7%94%A8kmp\">#</a>为什么会使用 KMP</h4>\n<p>以下使用 KMP 方式讲解，强烈建议大家先把一下两个视频看了，理解 KMP 算法，在来看下面讲解，否则会很懵。</p>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1PD4y1o7nd/\">视频讲解版：帮你把 KMP 算法学个通透！（理论篇）(opens new window)</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1M5411j7Xx\">视频讲解版：帮你把 KMP 算法学个通透！（求 next 数组代码篇）(opens new window)</a></li>\n<li><a href=\"https://programmercarl.com/0028.%E5%AE%9E%E7%8E%B0strStr.html\">文字讲解版：KMP 算法 (opens new window)</a></li>\n</ul>\n<p>在一个串中查找是否出现过另一个串，这是 KMP 的看家本领。那么寻找重复子串怎么也涉及到 KMP 算法了呢？</p>\n<p>KMP 算法中 next 数组为什么遇到字符不匹配的时候可以找到上一个匹配过的位置继续匹配，靠的是有计算好的前缀表。 前缀表里，统计了各个位置为终点字符串的最长相同前后缀的长度。</p>\n<p>那么 最长相同前后缀和重复子串的关系又有什么关系呢。</p>\n<p>可能很多录友又忘了 前缀和后缀的定义，在回顾一下：</p>\n<ul>\n<li>前缀是指不包含最后一个字符的所有以第一个字符开头的连续子串；</li>\n<li>后缀是指不包含第一个字符的所有以最后一个字符结尾的连续子串</li>\n</ul>\n<p>在由重复子串组成的字符串中，最长相等前后缀不包含的子串就是最小重复子串，这里那字符串 s：abababab 来举例，ab 就是最小重复单位，如图所示：</p>\n<p><img loading=\"lazy\" data-src=\"/images/20220728205249.png\" alt=\"img\" /></p>\n<h4 id=\"-7\"><a class=\"anchor\" href=\"#-7\">#</a> <a href=\"https://programmercarl.com/0459.%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2.html#%E5%A6%82%E4%BD%95%E6%89%BE%E5%88%B0%E6%9C%80%E5%B0%8F%E9%87%8D%E5%A4%8D%E5%AD%90%E4%B8%B2\">#</a>如何找到最小重复子串</h4>\n<p>这里有同学就问了，为啥一定是开头的 ab 呢。 其实最关键还是要理解 最长相等前后缀，如图：</p>\n<p><img loading=\"lazy\" data-src=\"/images/20220728212157.png\" alt=\"img\" /></p>\n<p>步骤一：因为 这是相等的前缀和后缀，t [0] 与 k [0] 相同， t [1] 与 k [1] 相同，所以 s [0] 一定和 s [2] 相同，s [1] 一定和 s [3] 相同，即：，s [0] s [1] 与 s [2] s [3] 相同 。</p>\n<p>步骤二： 因为在同一个字符串位置，所以 t [2] 与 k [0] 相同，t [3] 与 k [1] 相同。</p>\n<p>步骤三： 因为 这是相等的前缀和后缀，t [2] 与 k [2] 相同 ，t [3] 与 k [3] 相同，所以，s [2] 一定和 s [4] 相同，s [3] 一定和 s [5] 相同，即：s [2] s [3] 与 s [4] s [5] 相同。</p>\n<p>步骤四：循环往复。</p>\n<p>所以字符串 s，s [0] s [1] 与 s [2] s [3] 相同， s [2] s [3] 与 s [4] s [5] 相同，s [4] s [5] 与 s [6] s [7] 相同。</p>\n<p>正是因为 最长相等前后缀的规则，当一个字符串由重复子串组成的，最长相等前后缀不包含的子串就是最小重复子串。</p>\n<h4 id=\"-8\"><a class=\"anchor\" href=\"#-8\">#</a> <a href=\"https://programmercarl.com/0459.%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2.html#%E7%AE%80%E5%8D%95%E6%8E%A8%E7%90%86\">#</a>简单推理</h4>\n<p>这里在给出一个数推导，就容易理解很多。</p>\n<p>假设字符串 s 使用多个重复子串构成（这个子串是最小重复单位），重复出现的子字符串长度是 x，所以 s 是由 n * x 组成。</p>\n<p>因为字符串 s 的最长相同前后缀的的长度一定是不包含 s 本身，所以 最长相同前后缀长度必然是 m * x，而且 n - m = 1，（这里如果不懂，看上面的推理）</p>\n<p>所以如果 nx % (n - m) x = 0，就可以判定有重复出现的子字符串。</p>\n<p>next 数组记录的就是最长相同前后缀 <a href=\"https://programmercarl.com/0028.%E5%AE%9E%E7%8E%B0strStr.html\">字符串：KMP 算法精讲 (opens new window)</a> 这里介绍了什么是前缀，什么是后缀，什么又是最长相同前后缀)， 如果 next [len - 1] != -1，则说明字符串有最长相同的前后缀（就是字符串里的前缀子串和后缀子串相同的最长长度）。</p>\n<p>最长相等前后缀的长度为：next [len - 1] + 1。(这里的 next 数组是以统一减一的方式计算的，因此需要 + 1，两种计算 next 数组的具体区别看这里：<a href=\"https://programmercarl.com/0028.%E5%AE%9E%E7%8E%B0strStr.html\">字符串：KMP 算法精讲 (opens new window)</a>)</p>\n<p>数组长度为：len。</p>\n<p>如果 len % (len - (next [len - 1] + 1)) == 0 ，则说明数组的长度正好可以被 (数组长度 - 最长相等前后缀的长度) 整除 ，说明该字符串有重复的子字符串。</p>\n<p><strong>数组长度减去最长相同前后缀的长度相当于是第一个周期的长度，也就是一个周期的长度，如果这个周期可以被整除，就说明整个数组就是这个周期的循环。</strong></p>\n<p><strong>强烈建议大家把 next 数组打印出来，看看 next 数组里的规律，有助于理解 KMP 算法</strong></p>\n<p>如图：</p>\n<p><img loading=\"lazy\" data-src=\"/images/459.%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2_1.png\" alt=\"img\" /></p>\n<p><strong>next [len - 1] = 7，next [len - 1] + 1 = 8，8 就是此时字符串 asdfasdfasdf 的最长相同前后缀的长度。</strong></p>\n<p><strong>(len - (next [len - 1] + 1)) 也就是： 12 (字符串的长度) - 8 (最长公共前后缀的长度) = 4 (最小重复子串的长度)， 4 正好可以被 12 (字符串的长度) 整除，所以说明有重复的子字符串（asdf）。</strong></p>\n<p>C++ 代码如下：（这里使用了前缀表统一减一的实现方式）</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">getNext</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        next<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">repeatedSubstringPattern</span> <span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">int</span> next<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> len <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>前缀表（不减一）的 C++ 代码实现：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">getNext</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> next<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        next<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">repeatedSubstringPattern</span> <span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">int</span> next<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> len <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">[</span>len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"-9\"><a class=\"anchor\" href=\"#-9\">#</a> <a href=\"https://programmercarl.com/0459.%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2.html#%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80%E7%89%88%E6%9C%AC\">#</a>其他语言版本</h3>\n<p>Java：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//KMP</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">repeatedSubstringPattern</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        next<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cs <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 计算 next 数组</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> cs<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> cs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> cs<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 回退 next [j] 保存的就是最长相等前缀的长度，但是第一个索引位置为 0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> cs<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> next<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//length-(next [length-1]+1) 就是最小重复字串的长度</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">[</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> length<span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>length<span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">[</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 移动匹配</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">repeatedSubstringPattern1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">String</span> t <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        s <span class=\"token operator\">=</span> s<span class=\"token operator\">+</span>s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">//abaaba</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"最长回文子串\"><a class=\"anchor\" href=\"#最长回文子串\">#</a> 最长回文子串</h1>\n<p><a href=\"https://leetcode.cn/problems/longest-palindromic-substring/\">5. 最长回文子串</a></p>\n<p>难度中等 6006</p>\n<p>给你一个字符串  <code>s</code> ，找到  <code>s</code>  中最长的回文子串。</p>\n<p>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入：s = &quot;babad&quot;\n输出：&quot;bab&quot;\n解释：&quot;aba&quot; 同样是符合题意的答案。\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：s = &quot;cbbd&quot;\n输出：&quot;bb&quot;\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n<li><code>s</code>  仅由数字和英文字母组成</li>\n</ul>\n<p>通过次数 1,285,308</p>\n<p>提交次数 3,444,060</p>\n<h2 id=\"dp\"><a class=\"anchor\" href=\"#dp\">#</a> dp</h2>\n<p>直接用 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>String[][]</mtext></mrow><annotation encoding=\"application/x-tex\">\\text{String[][]}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">String[][]</span></span></span></span></span>  dp</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">longestPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">//   b a b a d</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// b t f t f f</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// a   t f t f</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// b     t f f</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// a       t f</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// b         t</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">//dp [i][j] 区间 i ~ j 之间是不是回文子串</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//    s[i] = s[j] </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//      dp[i][j] = dp[i + 1][j - 1];</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">//    s[i] != s[j]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//      dp[i][j] = false;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">String</span> max <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                     <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> i <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                                max <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                                max <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                            max <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>//dp</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">longestPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">//   b a b a d</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// b t f t f f</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// a   t f t f</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// b     t f f</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// a       t f</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// b         t</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">//dp [i][j] 区间 i ~ j 之间是不是回文子串</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//    s[i] = s[j] </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//      dp[i][j] = dp[i + 1][j - 1];</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">//    s[i] != s[j]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//      dp[i][j] = false;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> begin <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 是回文</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> begin <span class=\"token operator\">&lt;</span> j <span class=\"token operator\">-</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                            begin <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                            end <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> end <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"中心扩展\"><a class=\"anchor\" href=\"#中心扩展\">#</a> 中心扩展</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">longestPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token comment\">// 奇</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ji <span class=\"token operator\">=</span> <span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ou <span class=\"token operator\">=</span> <span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> ou<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> ou<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ji<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> ji<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> ou<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> ou<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                l <span class=\"token operator\">=</span> ji<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                r <span class=\"token operator\">=</span> ji<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">-</span> l <span class=\"token operator\">></span> right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                left <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                right <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            l <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            r <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            left<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            right<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"manachers-algorithm-马拉车算法\"><a class=\"anchor\" href=\"#manachers-algorithm-马拉车算法\">#</a> Manacher's Algorithm 马拉车算法</h2>\n<p><img loading=\"lazy\" data-src=\"/images/%E9%A9%AC%E6%8B%89%E8%BD%A6-1.png\" alt=\"img\" /></p>\n<p><img loading=\"lazy\" data-src=\"/images/%E9%A9%AC%E6%8B%89%E8%BD%A6-2.png\" alt=\"img\" /></p>\n<pre><code>0 1 2 3 4 5 6 7 8 9 10 11 12 \n# a # b # a # b # a # d # \n0 1 0 3 0 5 0 3 0 1 0 1 0 \n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">longestPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 追加 # 使得 s 变成奇数个统一处理</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">StringBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        builder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> t <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 最大回文子串的开始索引</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> leftIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 最大回文子串的长度</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> maxLen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">//p 数组，保存从中心扩展的最大个数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//       0 1 2 3</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 例如: c b b d</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">//       0 1 2 3 4 5 6 7 8</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//    t: # c # b # b # d #</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">//    p: 0 1 0 1 2 1 0 1 0</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 中心</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">int</span> center <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 中心的最右边界 : </span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">int</span> maxRight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">//i 关于中心 center 的镜像</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">int</span> i_mirror <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            i_mirror <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> center <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 在中心的半径范围之内，在范围之外直接需要中心扩展</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxRight <span class=\"token operator\">></span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token comment\">// 三种情况的综合</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token comment\">//maxRight - i : i 的位置到达最右边界的长度</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token comment\">//  1.p[i_mirror] &lt; maxRight - i</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token comment\">//      在长度范围之内 : p [i] = p [i_mirror]</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token comment\">//  2.p[i_mirror] == maxRight - i</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token comment\">//      刚好在长度边界上 : p [i] >= p [i_mirror]</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token comment\">//      有可能也需要从边界 maxRight 中心扩展</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token comment\">//  3.p[i_mirror] > maxRight - i</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token comment\">//      最大个数大于了长度 : p [i] = maxRight - i</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>maxRight <span class=\"token operator\">-</span> i<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span>i_mirror<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token comment\">// 中心扩展，从边界 + 1 开始进行扩展</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token operator\">&amp;&amp;</span> t<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                left<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                right<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token comment\">// 更新 center 与 maxRight</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token comment\">// 扩展后的范围大于了中心最右边界</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">></span> maxRight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                maxRight <span class=\"token operator\">=</span> p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                center <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token comment\">// 更新最大回文子串</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> maxLen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                maxLen <span class=\"token operator\">=</span> p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token comment\">// 原数组下标: (当前 p 的下标 - maxLen) / 2</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                leftIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> maxLen<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token comment\">// 测试输出</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">:</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>leftIndex<span class=\"token punctuation\">,</span> leftIndex <span class=\"token operator\">+</span> maxLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"/images/%E9%A9%AC%E6%8B%89%E8%BD%A6-3.png\" alt=\"img\" /></p>\n",
            "tags": [
                "算法",
                "数据结构"
            ]
        },
        {
            "id": "https://www.htired.top/2023/06/13/english/words/",
            "url": "https://www.htired.top/2023/06/13/english/words/",
            "title": "words",
            "date_published": "2023-06-13T02:43:24.000Z",
            "content_html": "<h1 id=\"day-26\"><a class=\"anchor\" href=\"#day-26\">#</a> day 26</h1>\n<details class=\"success\"><summary>1. despair <span style=\"float:right\">[dɪ'speə(r)]</span></summary><div>\n<ol>\n<li>\n<p><i>n.</i>&nbsp; <i>v.</i></p>\n<p>绝望</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>2. desperate <span style=\"float:right\">['despərət]&nbsp;&nbsp;<i>adj.</i></span></summary><div>\n<p>绝望的；极其严重的；不顾一切的</p>\n</div></details>\n<details class=\"success\"><summary>3. destination <span style=\"float:right\">[ˌdestɪ'neɪʃn]&nbsp;&nbsp;<i>n.</i></span></summary><div>\n<p>目的地，终点</p>\n</div></details>\n<details class=\"success\"><summary>4. destiny <span style=\"float:right\">[ˌdestəni]&nbsp;&nbsp;<i>n.</i></span></summary><div>\n<p>命运，命中注定的事</p>\n</div></details>\n<details class=\"success\"><summary>5. destruction <span style=\"float:right\">[dɪ'strʌkʃn]&nbsp;&nbsp;<i>n.</i></span></summary><div>\n<p>破坏，毁灭</p>\n</div></details>\n<details class=\"success\"><summary>6. destructive <span style=\"float:right\">[dɪ'strʌktɪv]&nbsp;&nbsp;<i>adj.</i></span></summary><div>\n<p>破坏性的，毁灭性的</p>\n</div></details>\n<details class=\"success\"><summary>7. engine <span style=\"float:right\">['endʒɪn]&nbsp;&nbsp;<i>n.</i></span></summary><div>\n<p>发动机，引擎；火车头</p>\n</div></details>\n<details class=\"success\"><summary>8. engineer <span style=\"float:right\">[ˌendʒɪ'nɪə(r)]&nbsp;&nbsp;<i>n.</i></span></summary><div>\n<p>工程师</p>\n</div></details>\n<details class=\"success\"><summary>9. engineering <span style=\"float:right\">[ˌendʒɪ'nɪərɪŋ]&nbsp;&nbsp;<i>n.</i></span></summary><div>\n<p>工程学</p>\n</div></details>\n<details class=\"success\"><summary>10. enormous <span style=\"float:right\">[ɪˈnɔːməs]&nbsp;&nbsp;<i>adj.</i></span></summary><div>\n<p>巨大的</p>\n</div></details>\n<details class=\"success\"><summary>11. enquire <span style=\"float:right\">[ɪnˈkwaɪə(r)]&nbsp;&nbsp;<i>vt.</i></span></summary><div>\n<p>询问，打听</p>\n</div></details>\n<details class=\"success\"><summary>12. enrich <span style=\"float:right\">[ɪnˈrɪtʃ]&nbsp;&nbsp;<i>adj.</i></span></summary><div>\n<p>使丰富；使肥沃；使富足</p>\n</div></details>\n<details class=\"success\"><summary>13. enroll <span style=\"float:right\">[ɪnˈrəʊl]&nbsp;&nbsp;<i>v.</i></span></summary><div>\n<p>登记，记录；招生</p>\n</div></details>\n<details class=\"success\"><summary>14. final <span style=\"float:right\">[ˈfaɪnl]&nbsp;&nbsp;<i>adj.</i></span></summary><div>\n<p>最终的</p>\n</div></details>\n<details class=\"success\"><summary>15. finally <span style=\"float:right\">[ˈfaɪnəli]&nbsp;&nbsp;<i>adv.</i></span></summary><div>\n<p>最后，最终；彻底地</p>\n</div></details>\n<details class=\"success\"><summary>16. fine <span style=\"float:right\">[faɪn]</span></summary><div>\n<ol>\n<li>\n<p><i>adj.</i></p>\n<p>美好的；优秀的</p>\n</li>\n<li>\n<p><i>adv.</i></p>\n<p>好，妙</p>\n</li>\n<li>\n<p><i>n.</i></p>\n<p>罚金，罚款</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>罚款</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>17. finish <span style=\"float:right\">[ˈfɪnɪʃ]</span></summary><div>\n<ol>\n<li>\n<p><i>v.</i></p>\n<p>结束，完成</p>\n</li>\n<li>\n<p><i>n.</i></p>\n<p>结尾</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>18. fire <span style=\"float:right\">[ˈfaɪə(r)]</span></summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>火；</p>\n<p>热情，激情；</p>\n<p>火力；</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>开火；</p>\n<p>激起，引发；</p>\n<p>解雇；</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>19. fireman <span style=\"float:right\">[ˈfaɪəmən]&nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>消防员</p>\n</div></details>\n<details class=\"success\"><summary>20. fireplace <span style=\"float:right\">[ˈfaɪəpleɪs]&nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>壁炉</p>\n</div></details>\n<details class=\"success\"><summary>21. fiscal <span style=\"float:right\">[ˈfɪskl]&nbsp;&nbsp;<i> adj.</i></span></summary><div>\n<p>财政的；国库的</p>\n</div></details>\n<details class=\"success\"><summary>22. fish <span style=\"float:right\">[fɪʃ]</span></summary><div>\n<ol>\n<li>\n<p><i>v.</i></p>\n<p>捕鱼，钓鱼；</p>\n<p>捞取，掏出，探出</p>\n</li>\n<li>\n<p><i>n.</i></p>\n<p>鱼，鱼类</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>23. fisherman <span style=\"float:right\">[ˈfɪʃəmən] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>渔民；捕鱼船</p>\n</div></details>\n<details class=\"success\"><summary>24. inner <span style=\"float:right\">[ˈɪnə(r)] &nbsp;&nbsp;<i> adj.</i></span></summary><div>\n<p>内部的；内心的</p>\n</div></details>\n<details class=\"success\"><summary>25. innumerable <span style=\"float:right\">[ɪˈnjuːmərəbl] &nbsp;&nbsp;<i> adj.</i></span></summary><div>\n<p>无数的</p>\n</div></details>\n<details class=\"success\"><summary>26. input <span style=\"float:right\">[ɪˈnjuːmərəbl] &nbsp;&nbsp;<i> n. v.</i></span></summary><div>\n<p>输入</p>\n</div></details>\n<details class=\"success\"><summary>27. inquiry <span style=\"float:right\">[ɪnˈkwaɪəri] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>询问，调查</p>\n</div></details>\n<details class=\"success\"><summary>28. lecture <span style=\"float:right\">[ˈlekɪʃə(r)] &nbsp;&nbsp;<i> n. v.</i></span></summary><div>\n<p>演讲，讲课</p>\n</div></details>\n<details class=\"success\"><summary>29. legacy <span style=\"float:right\">[ˈlegəsi] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>遗产；后遗症</p>\n</div></details>\n<details class=\"success\"><summary>30. legend <span style=\"float:right\">[ˈledʒənd] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>传说，传奇</p>\n</div></details>\n<details class=\"success\"><summary>31. lend <span style=\"float:right\">[ˈledʒənd] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>借给；</p>\n<p>添加，提供</p>\n</div></details>\n<details class=\"success\"><summary>32. lens <span style=\"float:right\">[lenz] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>透镜，镜头</p>\n</div></details>\n<details class=\"success\"><summary>33. lest <span style=\"float:right\">[lest] &nbsp;&nbsp;<i> conj.</i></span></summary><div>\n<p>唯恐</p>\n</div></details>\n<details class=\"success\"><summary>34. poke <span style=\"float:right\">[pəʊk]</span></summary><div>\n<ol>\n<li>\n<p><i>v.  n.</i></p>\n<p>桶，戳，刺</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>伸出；拨弄</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>35. polar <span style=\"float:right\">[ˈpəʊlə(r)] &nbsp;&nbsp;<i> adj.</i></span></summary><div>\n<p>两极的，极地的；</p>\n<p>正好相反的</p>\n</div></details>\n<details class=\"success\"><summary>36. pole <span style=\"float:right\">[pəʊl] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>柱，杆；</p>\n<p>地板，磁极，电极</p>\n</div></details>\n<details class=\"success\"><summary>37. pollute <span style=\"float:right\">[pəˈluːt] &nbsp;&nbsp;<i> vt.</i></span></summary><div>\n<p>污染</p>\n</div></details>\n<details class=\"success\"><summary>38. pollution <span style=\"float:right\">[pəˈluːʃn] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>污染</p>\n</div></details>\n<details class=\"success\"><summary>39. pool <span style=\"float:right\">[ˈpuːl]</span></summary><div>\n<ol>\n<li>\n<p><i> n.</i></p>\n<p>水池，游泳池；</p>\n<p>一滩，一片；</p>\n<p>联营</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>集中资源</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>40. remark <span style=\"float:right\">[rɪˈmɑːk]</span></summary><div>\n<ol>\n<li>\n<p><i> v.  n.</i>  </p>\n<p>评论，议论</p>\n</li>\n<li>\n<p><i>n.</i></p>\n<p>引入注目</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>41. remarkable <span style=\"float:right\">[rɪˈmɑːkəbl] &nbsp;&nbsp;<i> adj.</i></span></summary><div>\n<p>非凡的，卓越的</p>\n</div></details>\n<details class=\"success\"><summary>42. greedy <span style=\"float:right\">[ˈgriːdi] &nbsp;&nbsp;<i> adj.</i></span></summary><div>\n<p>贪婪的</p>\n</div></details>\n<details class=\"success\"><summary>43. green <span style=\"float:right\">[ˈgriːn]</span></summary><div>\n<ol>\n<li>\n<p><i>adj.</i>  </p>\n<p>绿色；</p>\n<p>未熟的，嫩的</p>\n</li>\n<li>\n<p><i>n.</i></p>\n<p>绿色；</p>\n<p>(<i>pl</i>  ) 蔬菜，植物</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>44. greenhouse <span style=\"float:right\">[ˈgriːnhəʊs] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>温室</p>\n</div></details>\n<details class=\"success\"><summary>45. greet <span style=\"float:right\">[griːt] &nbsp;&nbsp;<i> vt.</i></span></summary><div>\n<p>问候，招呼；</p>\n<p>对...... 做出反应</p>\n</div></details>\n<details class=\"success\"><summary>46. greeting <span style=\"float:right\">[griːtɪŋ] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>问候，招呼；</p>\n</div></details>\n<details class=\"success\"><summary>47. snap <span style=\"float:right\">[snæp]</span></summary><div>\n<ol>\n<li>\n<p><i>v.  n.</i>  </p>\n<p>猛咬；谩骂；</p>\n<p>突然折断</p>\n</li>\n<li>\n<p><i>adj.</i></p>\n<p>突然的</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>48. snatch <span style=\"float:right\">[snætʃ]</span></summary><div>\n<ol>\n<li>\n<p><i>v.  n.</i>  </p>\n<p>夺取，抢夺</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>抽空做</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>49. sneak <span style=\"float:right\">[sni:k]</span></summary><div>\n<ol>\n<li>\n<p><i>v.</i>  </p>\n<p>偷偷地走</p>\n</li>\n<li>\n<p><i>n.</i></p>\n<p>鬼鬼祟祟的人；偷偷摸摸的行为</p>\n</li>\n<li>\n<p><i>adj.</i></p>\n<p>偷偷的</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>50. sneeze <span style=\"float:right\">[sni:z]</span></summary><div>\n<ol>\n<li>\n<p><i>n.</i>  </p>\n<p>喷嚏；轻视</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>打喷嚏</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>51. sniff <span style=\"float:right\">[snɪf] &nbsp;&nbsp;<i> v.</i></span></summary><div>\n<p>用力吸；闻到</p>\n</div></details>\n<details class=\"success\"><summary>52. snobbish <span style=\"float:right\">[ˈsnɒbɪʃ] &nbsp;&nbsp;<i> adj.</i></span></summary><div>\n<p>势利的；自命不凡的</p>\n</div></details>\n<details class=\"success\"><summary>53. detective <span style=\"float:right\">[dɪˈtektɪv] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>侦探</p>\n</div></details>\n<details class=\"success\"><summary>54. detector <span style=\"float:right\">[dɪˈtektə(r)] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>探测器</p>\n</div></details>\n<details class=\"success\"><summary>55. deviate <span style=\"float:right\">[ˈdi:vieɪt] &nbsp;&nbsp;<i> v.</i></span></summary><div>\n<p>背离，偏离</p>\n</div></details>\n<details class=\"success\"><summary>56. devil <span style=\"float:right\">[ˈdevl] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>魔鬼</p>\n</div></details>\n<details class=\"success\"><summary>57. devote <span style=\"float:right\">[dɪˈvəʊt] &nbsp;&nbsp;<i> vt.</i></span></summary><div>\n<p>奉献；专用于</p>\n</div></details>\n<details class=\"success\"><summary>58. fix <span style=\"float:right\">[fɪks] &nbsp;&nbsp;<i> v.</i></span></summary><div>\n<p>使固定，安装；</p>\n<p>确定，决定</p>\n</div></details>\n<details class=\"success\"><summary>59. fixture <span style=\"float:right\">[ˈfɪkstʃ(r)] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>固定（物）</p>\n</div></details>\n<details class=\"success\"><summary>60. flame <span style=\"float:right\">[fleɪm]</span></summary><div>\n<ol>\n<li>\n<p><i>n.</i>  </p>\n<p>火焰；热情；光辉</p>\n</li>\n<li>\n<p><i>vi.</i></p>\n<p>燃烧</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>61. flap <span style=\"float:right\">[flæp]</span></summary><div>\n<ol>\n<li>\n<p><i>n.</i>  </p>\n<p>帽檐；</p>\n<p>慌乱，紧张</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>拍打，拍动</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>62. flare <span style=\"float:right\">[flæp]</span></summary><div>\n<ol>\n<li>\n<p><i>n.</i>  </p>\n<p>闪烁；突发</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>闪耀，照耀；突然发怒</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>63. flash <span style=\"float:right\">[flæʃ]</span></summary><div>\n<ol>\n<li>\n<p><i>n.</i>  </p>\n<p>闪光，闪烁</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>闪耀；闪现</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>64. flat <span style=\"float:right\">[flæt]</span></summary><div>\n<ol>\n<li>\n<p><i>adj.</i>  </p>\n<p>平坦的；断然的；</p>\n<p>无生气的，乏味的</p>\n</li>\n<li>\n<p><i>n.</i></p>\n<p>平面</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>65. flatter <span style=\"float:right\">[ˈflætə(r)] &nbsp;&nbsp;<i> vt.</i></span></summary><div>\n<p>奉承；使高兴</p>\n</div></details>\n<details class=\"success\"><summary>66. flavour <span style=\"float:right\">[ˈfleɪvə(r)]</span></summary><div>\n<ol>\n<li>\n<p><i>n.</i>  </p>\n<p>味道，风味</p>\n</li>\n<li>\n<p><i>vt.</i></p>\n<p>使...... 调味</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>67. flee <span style=\"float:right\">[ˈfli:] &nbsp;&nbsp;<i> vi.</i> &nbsp;&nbsp;(fled,fled)</span></summary><div>\n<p>逃走；逃避；消失</p>\n</div></details>\n<details class=\"success\"><summary>68. flesh <span style=\"float:right\">[ˈfleʃ] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>肉，肌肉</p>\n</div></details>\n<details class=\"success\"><summary>69. flesh <span style=\"float:right\">[ˈflaɪt] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>飞翔；航班；逃跑；楼梯的一段</p>\n</div></details>\n<details class=\"success\"><summary>70. any <span style=\"float:right\">[ˈeni:]</span></summary><div>\n<ol>\n<li>\n<p><i>adj.</i>  </p>\n<p>任何的</p>\n</li>\n<li>\n<p><i>pron.</i></p>\n<p>任何人，任何东西</p>\n</li>\n<li>\n<p><i>adv.</i></p>\n<p>丝毫</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>71. anybody <span style=\"float:right\">[ˈenibɒdi] &nbsp;&nbsp;<i> adv.</i></span></summary><div>\n<p>任何人；重要人物</p>\n</div></details>\n<details class=\"success\"><summary>72. anyhow <span style=\"float:right\">[ˈenihaʊ] &nbsp;&nbsp;<i> adv.</i></span></summary><div>\n<p>无论如何；不论用什么方式</p>\n</div></details>\n<details class=\"success\"><summary>73. anything <span style=\"float:right\">[ˈeniθɪŋ]</span></summary><div>\n<ol>\n<li>\n<p><i>pron.</i>  </p>\n<p>不论什么东西；</p>\n<p>(but) 根本不是</p>\n<p>He is ~ <strong>but</strong> a scientist：他根本不是科学家</p>\n</li>\n<li>\n<p><i>n.</i></p>\n<p>严重事情；具有重要的人或物</p>\n</li>\n<li>\n<p><i>adv.</i></p>\n<p>在任何方面</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>74. anyway <span style=\"float:right\">[ˈeniweɪ] = anyhow &nbsp;&nbsp;<i> adv.</i></span></summary><div>\n<p>无论如何</p>\n</div></details>\n<details class=\"success\"><summary>75. anywhere <span style=\"float:right\">[ˈeniweə(r)] &nbsp;&nbsp;<i> adv.</i></span></summary><div>\n<p>无论哪里</p>\n</div></details>\n<details class=\"success\"><summary>76. asset <span style=\"float:right\">[ˈæset] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>资产，财产；</p>\n<p>有用的资源，宝贵的人（或物）</p>\n</div></details>\n<details class=\"success\"><summary>77. assign <span style=\"float:right\">[əˈsaɪn] &nbsp;&nbsp;<i> vt.</i></span></summary><div>\n<p>分配；指定</p>\n</div></details>\n<details class=\"success\"><summary>78 assignment <span style=\"float:right\">[əˈsaɪnmənt] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>分配；任务；作业</p>\n</div></details>\n<details class=\"success\"><summary>79. bibliograghy <span style=\"float:right\">[ˌbɪbliˈɒgrəfi] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>书目，文献目录</p>\n</div></details>\n<details class=\"success\"><summary>80. bin <span style=\"float:right\">[bɪn] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>箱柜</p>\n</div></details>\n<details class=\"success\"><summary>81. bind <span style=\"float:right\">[baɪnd] &nbsp;&nbsp;<i> v.</i> &nbsp;&nbsp;(bound,bound)</span></summary><div>\n<p>捆扎，绑，束缚</p>\n</div></details>\n<details class=\"success\"><summary>82. biograghy <span style=\"float:right\">[baɪˈɒgrəfi] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>传记</p>\n</div></details>\n<details class=\"success\"><summary>83. biology <span style=\"float:right\">[baɪˈɒlədʒi] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>生物学</p>\n</div></details>\n<details class=\"success\"><summary>84. bit <span style=\"float:right\">[bɪt] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>一点，一片，一些</p>\n</div></details>\n<details class=\"success\"><summary>85. bite <span style=\"float:right\">[ˈbaɪt]</span></summary><div>\n<ol>\n<li>\n<p><i>n.</i>  </p>\n<p>一口；</p>\n<p>影响力，感染力</p>\n</li>\n<li>\n<p><i>v.</i> &nbsp;&nbsp;(bit,bitten)</p>\n<p>叮，咬</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>86. bitter <span style=\"float:right\">[ˈbɪtə(r)] &nbsp;&nbsp;<i> adj.</i></span></summary><div>\n<p>苦味的；惨痛的</p>\n</div></details>\n<details class=\"success\"><summary>87. bizarre <span style=\"float:right\">[bɪˈzɑː(r)] &nbsp;&nbsp;<i> adj.</i></span></summary><div>\n<p>奇异的，古怪的</p>\n</div></details>\n<details class=\"success\"><summary>88. coherent <span style=\"float:right\">[kəʊˈhɪərənt] &nbsp;&nbsp;<i> adj.</i></span></summary><div>\n<p>一致的，协调的</p>\n</div></details>\n<details class=\"success\"><summary>89. cohesive <span style=\"float:right\">[kəʊˈhi:sɪv] &nbsp;&nbsp;<i> adj.</i></span></summary><div>\n<p>粘着的，有结合力的</p>\n</div></details>\n<details class=\"success\"><summary>90. corn <span style=\"float:right\">[kɔɪn]</span></summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>硬币</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>铸（币）；</p>\n<p>发明</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>91. coke <span style=\"float:right\">[kəʊk]</span></summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>焦炭；</p>\n<p>可卡因；可口可乐</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>将（煤）制成焦炭</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>92. collaborate <span style=\"float:right\">[kəˈlæbəreɪt] &nbsp;&nbsp;<i> vi.</i></span></summary><div>\n<p>合作，协作</p>\n</div></details>\n<details class=\"success\"><summary>93. collar <span style=\"float:right\">[ˈkɒlə(r)] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>衣领；项圈</p>\n</div></details>\n<details class=\"success\"><summary>94. colonel <span style=\"float:right\">[ˈkɜːnl] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>（陆军）上校</p>\n</div></details>\n<details class=\"success\"><summary>95. colonial <span style=\"float:right\">[kəˈləʊniəl] &nbsp;&nbsp;<i> adj.</i></span></summary><div>\n<p>殖民（地）的</p>\n</div></details>\n<details class=\"success\"><summary>96. colony <span style=\"float:right\">[kɒˈləni] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>殖民地；聚集地；群，群体，群落</p>\n</div></details>\n<details class=\"success\"><summary>97. combination <span style=\"float:right\">[ˌkɒmbɪˈneɪʃn] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>结合，联合；</p>\n<p>化合（物）</p>\n</div></details>\n<details class=\"success\"><summary>98. ethusiasm <span style=\"float:right\">[ɪnˌθju:ziˈæzəm] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>热情，热心</p>\n</div></details>\n<details class=\"success\"><summary>99. ethusiastic <span style=\"float:right\">[ɪnˌθju:ziˈæstɪk] &nbsp;&nbsp;<i> adj.</i></span></summary><div>\n<p>热情的，热心的</p>\n</div></details>\n<details class=\"success\"><summary>100. entire <span style=\"float:right\">[ɪnˈtaɪə(r)] &nbsp;&nbsp;<i> adj.</i></span></summary><div>\n<p>整体的，完全的</p>\n</div></details>\n<h1 id=\"day-27\"><a class=\"anchor\" href=\"#day-27\">#</a> day 27</h1>\n<details class=\"success\"><summary>1. entitle <span style=\"float:right\">[ɪnˈtaɪtl] &nbsp;&nbsp;<i> vt.</i></span></summary><div>\n<p>给..... 提名；给...... 权力 / 资格</p>\n</div></details>\n<details class=\"success\"><summary>2. entity <span style=\"float:right\">[ˈentəti] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>实体</p>\n</div></details>\n<details class=\"success\"><summary>3. entrepreneur <span style=\"float:right\">[ˌɒntrəprəˈnɜːr(r)] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>企业家；承包人，主办人</p>\n</div></details>\n<details class=\"success\"><summary>4. entrance <span style=\"float:right\">[ˈentrəns] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>入口；进入；入学，入会</p>\n</div></details>\n<details class=\"success\"><summary>5. entry <span style=\"float:right\">[ˈentri] &nbsp;&nbsp;<i> n.</i></span></summary><div>\n<p>入口，通道；记载</p>\n</div></details>\n<details class=\"success\"><summary>6. whale <span style=\"float:right\">[weɪl]</span></summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>鲸；巨大的人或物</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>捕鲸；殴打，猛击</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>7. whatever <span style=\"float:right\">[wɒtˈevə(r)] &nbsp;&nbsp;<i> pron.  adj</i></span></summary><div>\n<p>无论什么</p>\n</div></details>\n<details class=\"success\"><summary>8. whenever <span style=\"float:right\">[wenˈevə(r)] &nbsp;&nbsp;<i> conj.</i></span></summary><div>\n<p>无论何时</p>\n</div></details>\n<details class=\"success\"><summary>9. whereas <span style=\"float:right\"><i> conj.</i></span></summary><div>\n<p>却，反之；</p>\n<p>考虑到</p>\n</div></details>\n<details class=\"success\"><summary>10. wherever</summary><div>\n<ol>\n<li>\n<p><i>conj.</i></p>\n<p>在任何地方</p>\n</li>\n<li>\n<p><i>adv.</i></p>\n<p>无论 / 究竟在哪里</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>11. whichever <span style=\"float:right\"><i> pron.  adj.</i></span></summary><div>\n<p>无论哪个</p>\n</div></details>\n<details class=\"success\"><summary>12. whichever <span style=\"float:right\"><i> pron.  adj.</i></span></summary><div>\n<p>无论哪个</p>\n</div></details>\n<details class=\"success\"><summary>13. while</summary><div>\n<ol>\n<li>\n<p><i>conj.</i></p>\n<p>当...... 的时候；</p>\n<p>然而，尽管</p>\n</li>\n<li>\n<p><i>n.</i></p>\n<p>一会儿</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>消磨</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>14. whip</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>鞭子</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>抽打，搅打；</p>\n<p>偷</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>15. whistle</summary><div>\n<ol>\n<li>\n<p><i>v.</i></p>\n<p>吹口哨，鸣笛</p>\n</li>\n<li>\n<p><i>n.</i></p>\n<p>口哨，鸣笛</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>16. whoever <span style=\"float:right\"><i> pron.</i></span></summary><div>\n<p>谁；无论谁；究竟是谁</p>\n</div></details>\n<details class=\"success\"><summary>17. sob <span style=\"float:right\"><i> v.  n.</i></span></summary><div>\n<p>哭泣，呜咽</p>\n</div></details>\n<details class=\"success\"><summary>18. sobber <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>冷静的，清醒的；认真的</p>\n</div></details>\n<details class=\"success\"><summary>19. software <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>软件</p>\n</div></details>\n<details class=\"success\"><summary>20. soil</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>泥土，土壤；国土，国家</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>弄脏，玷污</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>21. solar <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>太阳的，太阳能的</p>\n</div></details>\n<details class=\"success\"><summary>22. sole <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>单独的，唯一的</p>\n</div></details>\n<details class=\"success\"><summary>23. solemn <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>庄严的，隆重的</p>\n</div></details>\n<details class=\"success\"><summary>24. solid</summary><div>\n<ol>\n<li>\n<p><i>adj.</i></p>\n<p>固体的；稳固的，可靠的</p>\n</li>\n<li>\n<p><i>n.</i></p>\n<p>固体</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>25. solidarity <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>团结一致</p>\n</div></details>\n<details class=\"success\"><summary>26. solo</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>独奏曲</p>\n</li>\n<li>\n<p><i>adj.</i></p>\n<p>单独的</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>27. somewhat <span style=\"float:right\"><i> adv.</i></span></summary><div>\n<p>稍微，有点儿</p>\n</div></details>\n<details class=\"success\"><summary>28. hierarchy <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>等级制度；领导层</p>\n</div></details>\n<details class=\"success\"><summary>29. hijack <span style=\"float:right\"><i> vt.</i></span></summary><div>\n<p>劫持</p>\n</div></details>\n<details class=\"success\"><summary>30. hike <span style=\"float:right\"><i> n.  v.</i></span></summary><div>\n<p>远足，徒步旅行；</p>\n<p>提高</p>\n</div></details>\n<details class=\"success\"><summary>31. historical <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>历史的</p>\n</div></details>\n<details class=\"success\"><summary>32. historian <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>历史学家</p>\n</div></details>\n<details class=\"success\"><summary>33. hinge <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>合页</p>\n</div></details>\n<details class=\"success\"><summary>34. hip</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>臀部，屁股；</p>\n</li>\n<li>\n<p><i>adj.</i></p>\n<p>新潮的</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>35. hire <span style=\"float:right\"><i> n.  v.</i></span></summary><div>\n<p>雇佣，租界</p>\n</div></details>\n<details class=\"success\"><summary>36. insert <span style=\"float:right\"><i> vt.</i></span></summary><div>\n<p>插入</p>\n</div></details>\n<details class=\"success\"><summary>37. inside</summary><div>\n<ol>\n<li>\n<p><i>adj.</i></p>\n<p>里面的，内部的</p>\n</li>\n<li>\n<p><i>adv.</i></p>\n<p>在里面，在内部</p>\n</li>\n<li>\n<p><i>n.</i></p>\n<p>里面，内部</p>\n</li>\n<li>\n<p><i>prep.</i></p>\n<p>在...... 里，在...... 内</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>38. insight <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>洞察力，见识</p>\n</div></details>\n<details class=\"success\"><summary>39. insist <span style=\"float:right\"><i> vi.</i></span></summary><div>\n<p>坚持</p>\n</div></details>\n<details class=\"success\"><summary>40. inspect <span style=\"float:right\"><i> vt.</i></span></summary><div>\n<p>视察；检查</p>\n</div></details>\n<details class=\"success\"><summary>41. inspiration <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>灵感；鼓舞</p>\n</div></details>\n<details class=\"success\"><summary>42. inspire <span style=\"float:right\"><i> v.</i></span></summary><div>\n<p>产生灵感；鼓舞；</p>\n<p>促使，导致</p>\n</div></details>\n<details class=\"success\"><summary>43. lick <span style=\"float:right\"><i> n.  v.</i></span></summary><div>\n<p>舔</p>\n</div></details>\n<details class=\"success\"><summary>44. lid <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>盖，盖子</p>\n</div></details>\n<details class=\"success\"><summary>45. lie</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>说谎，谎话</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>说谎；</p>\n<p>躺，平放；位于</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>46. life <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>生命，生物；人生，生活</p>\n</div></details>\n<details class=\"success\"><summary>47. lifetime <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>终生</p>\n</div></details>\n<details class=\"success\"><summary>48. lift</summary><div>\n<ol>\n<li>\n<p><i>v.</i></p>\n<p>提，举；解除；升起；消散</p>\n</li>\n<li>\n<p><i>n.</i></p>\n<p>电梯，升降机</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>49. merchandise <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>商品，货物</p>\n</div></details>\n<details class=\"success\"><summary>50. merchant <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>商人，零售商</p>\n</div></details>\n<details class=\"success\"><summary>51. mercury <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>水银</p>\n</div></details>\n<details class=\"success\"><summary>52. mercy <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>怜悯；幸运，侥幸</p>\n</div></details>\n<details class=\"success\"><summary>53. merge <span style=\"float:right\"><i> v.</i></span></summary><div>\n<p>合并，结合</p>\n</div></details>\n<details class=\"success\"><summary>54. merit</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>优点，价值；</p>\n<p>荣誉，奖赏</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>值得</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>55. merry <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>欢乐的，愉快的</p>\n</div></details>\n<details class=\"success\"><summary>56. metal <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>金属</p>\n</div></details>\n<details class=\"success\"><summary>57. metaphor <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>隐喻</p>\n</div></details>\n<details class=\"success\"><summary>58. metre <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>米，公尺；</p>\n<p>韵律，拍子</p>\n</div></details>\n<details class=\"success\"><summary>59. metric <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>公制的，十进制的；度量的</p>\n</div></details>\n<details class=\"success\"><summary>60. metropolitan <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>首都的</p>\n</div></details>\n<details class=\"success\"><summary>61. none</summary><div>\n<ol>\n<li>\n<p><i>pron.</i></p>\n<p>没有人；谁也不</p>\n</li>\n<li>\n<p><i>adv.</i></p>\n<p>一点也不</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>62. nonsense <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>胡说，废话</p>\n</div></details>\n<details class=\"success\"><summary>63. oral <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>口头的，口述的</p>\n</div></details>\n<details class=\"success\"><summary>64. orbit</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>轨道</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>沿轨道运行</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>65. order</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>命令；顺序；订购（单）</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>制定，订购</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>66. orderly</summary><div>\n<ol>\n<li>\n<p><i>adj.</i></p>\n<p>有顺序的</p>\n</li>\n<li>\n<p><i>n.</i></p>\n<p>（医院的）勤杂工；勤务兵</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>67. ordinary <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>普通的， 平常的</p>\n</div></details>\n<details class=\"success\"><summary>68. orient</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>东方（国家）</p>\n</li>\n<li>\n<p><i>v.</i>（ = orientate）</p>\n<p>使适应；</p>\n<p>给...... 定位；</p>\n<p>以...... 为目的；重视</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>69. oriental <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>东方国家的</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>70. orientation <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>定向，方向，目标；</p>\n<p>态度，取向；</p>\n<p>（任职等前的）培训，训练；熟悉情况；迎新会</p>\n</div></details>\n<details class=\"success\"><summary>71. pop</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>现代流行风格；</p>\n<p>（发出）砰的一声</p>\n</li>\n<li>\n<p><i>adj.</i></p>\n<p>通俗的，流行的，民众的</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>（使）噼啪作响</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>72. pope <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>（天主教的）教皇</p>\n</div></details>\n<details class=\"success\"><summary>73. popular <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>通俗的，流行的，大众的；</p>\n<p>广受欢迎的</p>\n</div></details>\n<details class=\"success\"><summary>74. porcelain</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>瓷，瓷器</p>\n</li>\n<li>\n<p><i>adj.</i></p>\n<p>精致的，瓷制的</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>75. portable <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>便于携带的</p>\n</div></details>\n<details class=\"success\"><summary>76. porter <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>搬运工人</p>\n</div></details>\n<details class=\"success\"><summary>77. portfolio <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>文件夹，公事包；代表作；（个人或机构的）投资组合；</p>\n<p>（部长或大臣的）职责，职务；（公司或机构的）系列产品 / 服务</p>\n</div></details>\n<details class=\"success\"><summary>78. portrait <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>肖像，画像</p>\n</div></details>\n<details class=\"success\"><summary>79. portray <span style=\"float:right\"><i> vt.</i></span></summary><div>\n<p>描绘，描述；</p>\n<p>为某人画像；</p>\n<p>[戏剧] 扮演</p>\n</div></details>\n<details class=\"success\"><summary>80. post</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>贴出；宣布；邮寄</p>\n</li>\n<li>\n<p><i>adj.</i></p>\n<p>柱，标杆；起点 / 终点的标志；</p>\n<p>邮寄；职位，岗位</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>81. postage <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>邮费</p>\n</div></details>\n<details class=\"success\"><summary>82. poster <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>海报，广告</p>\n</div></details>\n<details class=\"success\"><summary>83. postman <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>邮递员</p>\n</div></details>\n<details class=\"success\"><summary>84. postpone <span style=\"float:right\"><i> vt.</i></span></summary><div>\n<p>延迟，延期</p>\n</div></details>\n<details class=\"success\"><summary>85. posture</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>姿势；态度；心情</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>摆姿势，故作姿态</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>86. remnant</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>残余，剩余；遗迹；幸存者</p>\n</li>\n<li>\n<p><i>adj.</i></p>\n<p>剩余的</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>87. renaissance </summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>文艺复兴（时期）；时兴</p>\n</li>\n<li>\n<p><i>adj.</i></p>\n<p>文艺复兴的</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>88. renew <span style=\"float:right\"><i> v.</i></span></summary><div>\n<p>更新，恢复；</p>\n<p>补充，加强；重新开始；</p>\n<p>续借，延期</p>\n</div></details>\n<details class=\"success\"><summary>89. renovate <span style=\"float:right\"><i> vt.</i></span></summary><div>\n<p>革新，更新；</p>\n<p>修复，整修</p>\n</div></details>\n<details class=\"success\"><summary>90. rent</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>租金</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>租借</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>91. repair</summary><div>\n<ol>\n<li>\n<p><i>vt.</i></p>\n<p>修理，修补；</p>\n<p>补救，偿还</p>\n</li>\n<li>\n<p><i>n.</i></p>\n<p>修理，修补</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>92. repay <span style=\"float:right\"><i> vi.</i></span></summary><div>\n<p>付还，偿还，报答</p>\n</div></details>\n<details class=\"success\"><summary>93. repeat <span style=\"float:right\"><i> vt.  n.</i></span></summary><div>\n<p>重复</p>\n</div></details>\n<details class=\"success\"><summary>94. repeatedly <span style=\"float:right\"><i>adv.</i></span></summary><div>\n<p>重复地</p>\n</div></details>\n<details class=\"success\"><summary>95. repel <span style=\"float:right\"><i>vt.</i></span></summary><div>\n<p>击退，抵制，排斥；</p>\n<p>使厌恶</p>\n</div></details>\n<details class=\"success\"><summary>96. repeatoire <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>（准备好演出的）节目；</p>\n<p>（某个人的）全部技能；所有组成部分</p>\n</div></details>\n<details class=\"success\"><summary>97. repeatation <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>重复</p>\n</div></details>\n<details class=\"success\"><summary>98. tire</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>轮胎</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>（使）疲倦 / 厌倦</p>\n</li>\n</ol>\n</div></details>\n<details class=\"success\"><summary>99. tiresome <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>使人厌倦的，讨厌的</p>\n</div></details>\n<details class=\"success\"><summary>100. tissue <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>织物，薄纸；</p>\n<p>（动植物的）组织</p>\n</div></details>\n<h1 id=\"day-28\"><a class=\"anchor\" href=\"#day-28\">#</a> day 28</h1>\n<details class=\"info\"><summary>1. toil</summary><div>\n<ol>\n<li>\n<p><i>v.</i></p>\n<p>苦干；艰难缓慢地移动</p>\n</li>\n<li>\n<p><i>n.</i></p>\n<p>苦工</p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>2. blade <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>刀刃，刀片；叶片；剑，剑客</p>\n</div></details>\n<details class=\"info\"><summary>3. blame</summary><div>\n<ol>\n<li>\n<p><i>v.</i></p>\n<p>指责，责备</p>\n</li>\n<li>\n<p><i>n.</i></p>\n<p>指责，责备；（过错、事故等）责任</p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>4. blast</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>一阵，一股；</p>\n<p>吹奏，突然发出的响声；</p>\n<p>爆炸；猛烈地抨击</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>炸掉；猛烈抨击</p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>5. blaze</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>烈火；</p>\n<p>强烈地光；</p>\n<p>迸发，爆发</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>熊熊燃烧；</p>\n<p>发（强）光；</p>\n<p>迸发，爆发；</p>\n<p><strong>宣传，传播</strong></p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>6. apartment <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>（英）房间；（美）公寓</p>\n</div></details>\n<details class=\"info\"><summary>7. ape</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>类人猿</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>模仿，照搬</p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>8. apologize <span style=\"float:right\"><i> vi.</i></span></summary><div>\n<p>认错，道歉</p>\n</div></details>\n<details class=\"info\"><summary>9. apology <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>认错，道歉</p>\n</div></details>\n<details class=\"info\"><summary>10. bleak <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>荒凉的，暗淡的</p>\n</div></details>\n<details class=\"info\"><summary>11. bleed <span style=\"float:right\"><i> v.</i></span></summary><div>\n<p>出血，流血</p>\n</div></details>\n<details class=\"info\"><summary>12. blend</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>混合（物）</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>（使）混合</p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>13. bless <span style=\"float:right\"><i> v.</i></span></summary><div>\n<p>祝福，保佑</p>\n</div></details>\n<details class=\"info\"><summary>14. comfort</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>舒适，安慰</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>舒适，安慰</p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>15. come <span style=\"float:right\"><i> vi.</i></span></summary><div>\n<p>出现；产生（于）；变成</p>\n</div></details>\n<details class=\"info\"><summary>16. comedy <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>喜剧；幽默</p>\n</div></details>\n<details class=\"info\"><summary>17. comet <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>彗星；扫把星</p>\n</div></details>\n<details class=\"info\"><summary>18. comic</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>喜剧演员；连环画册</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>滑稽的；喜剧的</p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>19. commemorate <span style=\"float:right\"><i> v.</i></span></summary><div>\n<p>纪念，庆祝</p>\n</div></details>\n<details class=\"info\"><summary>20. commence <span style=\"float:right\"><i> v.</i></span></summary><div>\n<p>开始；着手</p>\n</div></details>\n<details class=\"info\"><summary>21. commonplace <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>平凡的，陈腐的</p>\n</div></details>\n<details class=\"info\"><summary>22. commonwealth <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>共和国，联邦</p>\n</div></details>\n<details class=\"info\"><summary>23. commute <span style=\"float:right\"><i> v.</i></span></summary><div>\n<p>乘公交车上下班；通勤；</p>\n<p>减刑</p>\n</div></details>\n<details class=\"info\"><summary>24. diabetes <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>糖尿病</p>\n</div></details>\n<details class=\"info\"><summary>25. diagnose <span style=\"float:right\"><i> vt.</i></span></summary><div>\n<p>诊断，判断</p>\n</div></details>\n<details class=\"info\"><summary>26. diagram <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>图解，图表</p>\n</div></details>\n<details class=\"info\"><summary>27. dial</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>钟面，表面；刻度盘，拨号盘</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>拨号，打电话</p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>28. dialect <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>方言</p>\n</div></details>\n<details class=\"info\"><summary>29. diameter <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>直径；放大率，放大倍数</p>\n</div></details>\n<details class=\"info\"><summary>30. dictate <span style=\"float:right\"><i> v.</i></span></summary><div>\n<p>指令，命令；</p>\n<p>授权，使听写</p>\n</div></details>\n<details class=\"info\"><summary>31. dictation <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>听写，口授</p>\n</div></details>\n<details class=\"info\"><summary>32. diet <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>饮食，食物</p>\n</div></details>\n<details class=\"info\"><summary>33. differentiate <span style=\"float:right\"><i> v.</i></span></summary><div>\n<p>区别，分别</p>\n</div></details>\n<details class=\"info\"><summary>34. dig <span style=\"float:right\"><i> vi.</i></span></summary><div>\n<p>挖，掘</p>\n</div></details>\n<details class=\"info\"><summary>35. digest</summary><div>\n<ol>\n<li>\n<p><i>v.</i></p>\n<p>消化</p>\n</li>\n<li>\n<p><i>n.</i></p>\n<p>摘要</p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>36. digital <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>数字的，数码的</p>\n</div></details>\n<details class=\"info\"><summary>37. dignity <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>庄严，尊严</p>\n</div></details>\n<details class=\"info\"><summary>38. envisage <span style=\"float:right\"><i> vt.</i></span></summary><div>\n<p>想象，正视</p>\n</div></details>\n<details class=\"info\"><summary>39. envy <span style=\"float:right\"><i> vt.  n.</i></span></summary><div>\n<p>羡慕，嫉妒</p>\n</div></details>\n<details class=\"info\"><summary>40. equal</summary><div>\n<ol>\n<li>\n<p><i>adj.</i></p>\n<p>相等的；能胜任的</p>\n</li>\n<li>\n<p><i>n.</i></p>\n<p>（地位）相等的人，相等的事物</p>\n</li>\n<li>\n<p><i>vt.</i></p>\n<p>等于</p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>41. equally <span style=\"float:right\"><i> adv.</i></span></summary><div>\n<p>相等地</p>\n</div></details>\n<details class=\"info\"><summary>42. equality <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>同等，平等</p>\n</div></details>\n<details class=\"info\"><summary>43. equalitarian <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>平均主义的</p>\n</div></details>\n<details class=\"info\"><summary>44. equalize <span style=\"float:right\"><i> v.</i></span></summary><div>\n<p>使平衡</p>\n</div></details>\n<details class=\"info\"><summary>45. equalization <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>平等</p>\n</div></details>\n<details class=\"info\"><summary>46. equivalent</summary><div>\n<ol>\n<li>\n<p><i>adj.</i></p>\n<p>相等的</p>\n</li>\n<li>\n<p><i>n.</i></p>\n<p>相等物</p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>47. equitable <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>公平的，公正的</p>\n</div></details>\n<details class=\"info\"><summary>48. equity <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>公平，公正</p>\n</div></details>\n<details class=\"info\"><summary>49. equivalence <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>相等</p>\n</div></details>\n<details class=\"info\"><summary>50. equipoise <span style=\"float:right\"><i> v.</i></span></summary><div>\n<p>平衡</p>\n</div></details>\n<details class=\"info\"><summary>51. equation <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>等式，方程式</p>\n</div></details>\n<details class=\"info\"><summary>52. equator <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>赤道</p>\n</div></details>\n<details class=\"info\"><summary>53. float</summary><div>\n<ol>\n<li>\n<p><i>v.</i></p>\n<p>浮动</p>\n</li>\n<li>\n<p><i>n.</i></p>\n<p>救生筏</p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>54. flock</summary><div>\n<ol>\n<li>\n<p><i>vi.</i></p>\n<p>群集</p>\n</li>\n<li>\n<p><i>n.</i></p>\n<p>（一）群；</p>\n<p>大量（a ~ of）</p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>55. flood</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>洪水，水灾</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>涌进；</p>\n<p>泛滥；淹没</p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>56. flow</summary><div>\n<ol>\n<li>\n<p><i>v.</i></p>\n<p>流动</p>\n</li>\n<li>\n<p><i>n.</i></p>\n<p>流量，流速</p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>57. flu / influenza <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>流行性感冒</p>\n</div></details>\n<details class=\"info\"><summary>58. fluctuate <span style=\"float:right\"><i> v.</i></span></summary><div>\n<p>波动，起伏；</p>\n<p>动摇</p>\n</div></details>\n<details class=\"info\"><summary>59. fluent <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>流利的，流畅的</p>\n</div></details>\n<details class=\"info\"><summary>60. fluid</summary><div>\n<ol>\n<li>\n<p><i>adj.</i></p>\n<p>流动的，液体的</p>\n</li>\n<li>\n<p><i>n.</i></p>\n<p>流体，液体</p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>61. flush</summary><div>\n<ol>\n<li>\n<p><i>v.  n.</i></p>\n<p>脸红；（水）奔流；</p>\n<p>冲洗；兴奋</p>\n</li>\n<li>\n<p><i>n.</i></p>\n<p>萌芽</p>\n</li>\n<li>\n<p><i>adj.</i></p>\n<p>富裕的，充足的；</p>\n<p>同高的</p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>62. fly</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>苍蝇；（会飞的）昆虫</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>飞翔；飞行，航行；</p>\n<p>驾驶（飞机等）；空运</p>\n</li>\n<li>\n<p><i>adj.</i></p>\n<p>精明的</p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>63. microphone <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>话筒，扩音器</p>\n</div></details>\n<details class=\"info\"><summary>64. microscope <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>显微镜</p>\n</div></details>\n<details class=\"info\"><summary>65. midst <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>中间</p>\n</div></details>\n<details class=\"info\"><summary>66. migrate <span style=\"float:right\"><i> v.</i></span></summary><div>\n<p>移居，迁移</p>\n</div></details>\n<details class=\"info\"><summary>67. mild <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>温和的；轻微的；味淡的</p>\n</div></details>\n<details class=\"info\"><summary>68. millionaire <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>百万富翁</p>\n</div></details>\n<details class=\"info\"><summary>69. mill <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>工厂；磨坊</p>\n</div></details>\n<details class=\"info\"><summary>70. nostalgic <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>令人怀念的</p>\n</div></details>\n<details class=\"info\"><summary>71. notable <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>显著的；著名的</p>\n</div></details>\n<details class=\"info\"><summary>72. nothing</summary><div>\n<ol>\n<li>\n<p><i>pron.</i></p>\n<p>没有什么东西；</p>\n<p>微不足道的东西；</p>\n</li>\n<li>\n<p><i>adv.</i></p>\n<p>一点也不</p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>73. notice</summary><div>\n<ol>\n<li>\n<p><i>vt.</i></p>\n<p>注意到</p>\n</li>\n<li>\n<p><i>n.</i></p>\n<p>通知，通告；</p>\n<p>注意</p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>74. notify <span style=\"float:right\"><i> vt.</i></span></summary><div>\n<p>通知，通告</p>\n</div></details>\n<details class=\"info\"><summary>75. notorious <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>臭名昭著的</p>\n</div></details>\n<details class=\"info\"><summary>76. notwithstanding</summary><div>\n<ol>\n<li>\n<p><i>prep.</i></p>\n<p>虽然，尽管</p>\n</li>\n<li>\n<p><i>adv.</i></p>\n<p>虽然，尽管</p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>77. ornament</summary><div>\n<ol>\n<li>\n<p><i>prep.</i></p>\n<p>装饰（品），点缀（品）；</p>\n<p>添加光彩的人（或行动）</p>\n</li>\n<li>\n<p><i>adv.</i></p>\n<p>装饰，点缀</p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>78. orthodox <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>正宗的；传统的</p>\n</div></details>\n<details class=\"info\"><summary>79. pot <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>罐，壶</p>\n</div></details>\n<details class=\"info\"><summary>80. pound</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>英镑；磅</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>猛击，敲打</p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>81. powder <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>粉末；火药，炸药</p>\n</div></details>\n<details class=\"info\"><summary>82. represent <span style=\"float:right\"><i> v.</i></span></summary><div>\n<p>代表，象征；</p>\n<p>表述，描绘；</p>\n<p>体现，反映</p>\n</div></details>\n<details class=\"info\"><summary>83. representative</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>代表，代理人；</p>\n</li>\n<li>\n<p><i>adj.</i></p>\n<p>有代表性的，典型的</p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>84. repression <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>镇压，抑制</p>\n</div></details>\n<details class=\"info\"><summary>85. repress <span style=\"float:right\"><i> v.</i></span></summary><div>\n<p>镇压，抑制</p>\n</div></details>\n<details class=\"info\"><summary>86. repressor <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>镇压者</p>\n</div></details>\n<details class=\"info\"><summary>87. repressive <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>镇压的</p>\n</div></details>\n<details class=\"info\"><summary>88. repressiable <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>可镇压的</p>\n</div></details>\n<details class=\"info\"><summary>89. reproach <span style=\"float:right\"><i> n.  v.</i></span></summary><div>\n<p>责备，批评</p>\n</div></details>\n<details class=\"info\"><summary>90. reproduce <span style=\"float:right\"><i> v.</i></span></summary><div>\n<p>生殖，繁殖；</p>\n<p>复制，仿造</p>\n</div></details>\n<details class=\"info\"><summary>91. republic <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>共和国</p>\n</div></details>\n<details class=\"info\"><summary>92. republican <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>共和的</p>\n</div></details>\n<details class=\"info\"><summary>93. sore</summary><div>\n<ol>\n<li>\n<p><i>adj.</i></p>\n<p>痛的，痛苦的；</p>\n<p>难堪的，生气的</p>\n</li>\n<li>\n<p><i>n.</i></p>\n<p>痛处</p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>94. sorrow <span style=\"float:right\"><i> n.</i></span></summary><div>\n<p>悲哀，悲痛</p>\n</div></details>\n<details class=\"info\"><summary>95. so-called <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>所谓的</p>\n</div></details>\n<details class=\"info\"><summary>96. spark</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>火花，火星；</p>\n<p>丝毫，一点</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>发火花，闪耀；</p>\n<p>点燃，触发</p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>97. sparkle <span style=\"float:right\"><i>vi.</i></span></summary><div>\n<p>发光，闪耀；</p>\n<p>焕发</p>\n</div></details>\n<details class=\"info\"><summary>98. space</summary><div>\n<ol>\n<li>\n<p><i>n.</i></p>\n<p>间隔，距离；</p>\n<p>空间，太空</p>\n</li>\n<li>\n<p><i>v.</i></p>\n<p>留间隔，隔开</p>\n</li>\n</ol>\n</div></details>\n<details class=\"info\"><summary>99. spacecraft <span style=\"float:right\"><i>n.</i></span></summary><div>\n<p>宇宙飞船</p>\n</div></details>\n<details class=\"info\"><summary>100. spacious <span style=\"float:right\"><i> adj.</i></span></summary><div>\n<p>广阔的</p>\n</div></details>\n",
            "tags": [
                "英语"
            ]
        },
        {
            "id": "https://www.htired.top/2023/06/08/algorithm/%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%85%AC%E5%9B%A0%E6%95%B0%E6%8E%92%E5%BA%8F/",
            "url": "https://www.htired.top/2023/06/08/algorithm/%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%85%AC%E5%9B%A0%E6%95%B0%E6%8E%92%E5%BA%8F/",
            "title": "数组的最大公因数排序",
            "date_published": "2023-06-08T09:05:48.000Z",
            "content_html": "<p><a href=\"https://leetcode.cn/problems/gcd-sort-of-an-array/\">1998. 数组的最大公因数排序</a></p>\n<p>难度困难</p>\n<p>给你一个整数数组  <code>nums</code>  ，你可以在  <code>nums</code>  上执行下述操作 <strong>任意次</strong> ：</p>\n<ul>\n<li>如果  <code>gcd(nums[i], nums[j]) &gt; 1</code>  ，交换  <code>nums[i]</code>  和  <code>nums[j]</code>  的位置。其中  <code>gcd(nums[i], nums[j])</code>  是  <code>nums[i]</code>  和  <code>nums[j]</code>  的最大公因数。</li>\n</ul>\n<p>如果能使用上述交换方式将  <code>nums</code>  按 <strong>非递减顺序</strong> 排列，返回  <code>true</code>  ；否则，返回  <code>false</code>  。</p>\n<p><strong>示例 1：</strong></p>\n<blockquote>\n<p>输入：nums = [7,21,3]</p>\n<p>输出：true</p>\n<p>解释：可以执行下述操作完成对 [7,21,3] 的排序：</p>\n<ul>\n<li>交换 7 和 21 因为 gcd (7,21) = 7 。nums = [21,7,3]</li>\n<li>交换 21 和 3 因为 gcd (21,3) = 3 。nums = [3,7,21]</li>\n</ul>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<blockquote>\n<p>输入：nums = [5,2,6,2]</p>\n<p>输出：false</p>\n<p>解释：无法完成排序，因为 5 不能与其他元素交换。</p>\n</blockquote>\n<p><strong>示例 3：</strong></p>\n<blockquote>\n<p>输入：nums = [10,5,9,3,15]</p>\n<p>输出：true</p>\n<p>解释：<br />\n可以执行下述操作完成对 [10,5,9,3,15] 的排序：</p>\n<ul>\n<li>交换 10 和 15 因为 gcd (10,15) = 5 。nums = [15,5,9,3,10]</li>\n<li>交换 15 和 3 因为 gcd (15,3) = 3 。nums = [3,5,9,15,10]</li>\n<li>交换 10 和 15 因为 gcd (10,15) = 5 。nums = [3,5,9,10,15]</li>\n</ul>\n</blockquote>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 3 * 10^4</code></li>\n<li><code>2 &lt;= nums[i] &lt;= 10^5</code></li>\n</ul>\n<h1 id=\"分解质因数-并查集\"><a class=\"anchor\" href=\"#分解质因数-并查集\">#</a> 分解质因数 + 并查集</h1>\n<p>每个数看作一个点，那么只有二者的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">gcd &gt; 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 时，才会有边。</p>\n<blockquote>\n<p>若直接每两个元素建图，那么时间复杂度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> 级别。</p>\n</blockquote>\n<p>我们可以用质因数作为中间点，让元素与其所有的质因数构成边。</p>\n<p><img loading=\"lazy\" data-src=\"/images/gcd-sort-of-an-array.png\" alt=\"img\" /></p>\n<p>最后按照连通分量对元素进行分类，对同一个连通分量的元素进行排序（因为同一连通分量可以随意交换），并按照所在索引集合依次填入即可，最后判断是否满足非递减顺序排列。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">gcdSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 对每一个连通分量从小到大排序</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 以所有质因数作为转折点</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token number\">200002</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">*</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">boolean</span> f <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    f <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    num <span class=\"token operator\">/=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token function\">union</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token function\">union</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// int[] : [num, cnt]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeMap</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 排序后的下标</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeSet</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> idxs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 合并连通分量</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token class-name\">TreeMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> m <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">computeIfAbsent</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> o <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparingInt</span><span class=\"token punctuation\">(</span>o2 <span class=\"token operator\">-></span> o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> idx <span class=\"token operator\">=</span> idxs<span class=\"token punctuation\">.</span><span class=\"token function\">computeIfAbsent</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> o <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token punctuation\">.</span><span class=\"token function\">comparingInt</span><span class=\"token punctuation\">(</span>o2 <span class=\"token operator\">-></span> o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            m<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            idx<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> k <span class=\"token operator\">:</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token class-name\">TreeMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> treeMap <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> idx <span class=\"token operator\">=</span> idxs<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> v <span class=\"token operator\">:</span> treeMap<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token class-name\">Integer</span> cnt <span class=\"token operator\">=</span> treeMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">--</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    arr<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">.</span><span class=\"token function\">pollFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fa<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        fa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            fa<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">int</span> lAncestor <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">int</span> rAncestor <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        fa<span class=\"token punctuation\">[</span>rAncestor<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lAncestor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">return</span> fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"优化\"><a class=\"anchor\" href=\"#优化\">#</a> 优化</h1>\n<p>合并<strong>元素</strong>与<strong>质因数</strong>，最后将新数组排序，并与原数组进行比较是否处于同一个连通分量</p>\n<blockquote>\n<p>检查 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">arr[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">rr</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> 与 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">nums[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> 是否处于同一连通分量</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>7</mn><mo separator=\"true\">,</mo><mn>21</mn><mo separator=\"true\">,</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">7 ,21 ,3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">7</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">21</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span></span></span></span>。排序后：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn><mo separator=\"true\">,</mo><mn>7</mn><mo separator=\"true\">,</mo><mn>21</mn></mrow><annotation encoding=\"application/x-tex\">3,7,21</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">7</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">21</span></span></span></span></p>\n<ul>\n<li>可以知道处于处于同一连通分量</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>6</mn><mo separator=\"true\">,</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">5,2,6,2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">6</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span></span></span></span>。排序后：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>5</mn><mo separator=\"true\">,</mo><mn>6</mn></mrow><annotation encoding=\"application/x-tex\">2,2,5,6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">6</span></span></span></span></p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn><mo separator=\"true\">,</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">5,2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span></span></span></span> 不处于同一连通分量</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">gcdSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 对每一个连通分量从小到大排序</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 以所有质因数作为转折点</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token number\">200002</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">*</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">boolean</span> f <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    f <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    num <span class=\"token operator\">/=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token function\">union</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100000</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token function\">union</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100000</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fa<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        fa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            fa<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">int</span> lAncestor <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">int</span> rAncestor <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        fa<span class=\"token punctuation\">[</span>rAncestor<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lAncestor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">return</span> fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note info\">\n<p><strong>并查集 + 数学</strong></p>\n<ul>\n<li><a href=\"/2023/05/29/algorithm/%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E9%81%8D%E5%8E%86\">最大公约数遍历</a></li>\n<li><a href=\"/2023/06/01/algorithm/%E5%9F%83%E5%BC%8F%E7%AD%9B-%E5%B8%A6%E9%98%88%E5%80%BC%E7%9A%84%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7\">埃式筛 - 带阈值的图连通性</a></li>\n<li><a href=\"/2023/06/01/algorithm/%E6%8C%89%E5%85%AC%E5%9B%A0%E6%95%B0%E8%AE%A1%E7%AE%97%E6%9C%80%E5%A4%A7%E7%BB%84%E4%BB%B6%E5%A4%A7%E5%B0%8F\">按公因数计算最大组件大小</a></li>\n<li><a href=\"/2023/06/08/algorithm/%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%85%AC%E5%9B%A0%E6%95%B0%E6%8E%92%E5%BA%8F\">数组的最大公因数排序</a></li>\n<li><a href=\"/2023/06/03/algorithm/%E4%B9%98%E6%B3%95%E9%80%86%E5%85%83%EF%BC%8C%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86%EF%BC%8C%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%8C%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%B0%86%E5%AD%90%E6%95%B0%E7%BB%84%E9%87%8D%E6%96%B0%E6%8E%92%E5%BA%8F%E5%BE%97%E5%88%B0%E5%90%8C%E4%B8%80%E4%B8%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%96%B9%E6%A1%88%E6%95%B0\">乘法逆元，费马小定理，并查集，动态规划 - 将子数组重新排序得到同一个二叉搜索树的方案数</a></li>\n</ul>\n</div>\n",
            "tags": [
                "算法",
                "困难",
                "并查集",
                "数学"
            ]
        },
        {
            "id": "https://www.htired.top/2023/06/08/algorithm/%E6%8B%BC%E6%8E%A5%E6%9C%80%E5%A4%A7%E6%95%B0/",
            "url": "https://www.htired.top/2023/06/08/algorithm/%E6%8B%BC%E6%8E%A5%E6%9C%80%E5%A4%A7%E6%95%B0/",
            "title": "拼接最大数",
            "date_published": "2023-06-08T08:43:29.000Z",
            "content_html": "<p><a href=\"https://leetcode.cn/problems/create-maximum-number/\">321. 拼接最大数</a></p>\n<p>难度困难</p>\n<p>给定长度分别为  <code>m</code>  和  <code>n</code>  的两个数组，其元素由  <code>0-9</code>  构成，表示两个自然数各位上的数字。现在从这两个数组中选出  <code>k (k &lt;= m + n)</code>  个数字拼接成一个新的数，要求从同一个数组中取出的数字保持其在原数组中的相对顺序。</p>\n<p>求满足该条件的最大数。结果返回一个表示该最大数的长度为  <code>k</code>  的数组。</p>\n<p><strong>说明:</strong> 请尽可能地优化你算法的时间和空间复杂度。</p>\n<p><strong>示例 1:</strong></p>\n<blockquote>\n<p>输入:<br />\nnums1 = [3, 4, 6, 5]<br />\nnums2 = [9, 1, 2, 5, 8, 3]<br />\nk = 5</p>\n<p>输出:<br />\n[9, 8, 6, 5, 3]</p>\n</blockquote>\n<p><strong>示例 2:</strong></p>\n<blockquote>\n<p>输入:<br />\nnums1 = [6, 7]<br />\nnums2 = [6, 0, 4]<br />\nk = 5</p>\n<p>输出:<br />\n[6, 7, 6, 0, 4]</p>\n</blockquote>\n<p><strong>示例 3:</strong></p>\n<blockquote>\n<p>输入:<br />\nnums1 = [3, 9]<br />\nnums2 = [8, 9]<br />\nk = 3</p>\n<p>输出:<br />\n[9, 8, 9]</p>\n</blockquote>\n<h1 id=\"贪心-单调栈\"><a class=\"anchor\" href=\"#贪心-单调栈\">#</a> 贪心 + 单调栈</h1>\n<p>由题可知，需要从 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">nums1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">s</span><span class=\"mord\">1</span></span></span></span> 与 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">nums2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">s</span><span class=\"mord\">2</span></span></span></span> 中选择一共选择 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 个数字，拼接成一个新的最大的数</p>\n<ul>\n<li>\n<p>即从 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">nums1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">s</span><span class=\"mord\">1</span></span></span></span> 中选择 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 个最大数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span>，从 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">nums2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">s</span><span class=\"mord\">2</span></span></span></span> 中选择 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> 个最大数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span>，然后合并二者形成整体最大的数。</p>\n<blockquote>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>=</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">x + y = k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span></p>\n</blockquote>\n</li>\n</ul>\n<p>可以枚举 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>，使得合并后对答案的贡献值最大。</p>\n<hr />\n<p>若选出了 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span> 与 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span>，如何合并呢？贪心。设 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mi>l</mi><mi mathvariant=\"normal\">.</mi><mi>l</mi><mi>e</mi><mi>n</mi><mi>g</mi><mi>t</mi><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">n = l.length</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>=</mo><mi>r</mi><mi mathvariant=\"normal\">.</mi><mi>l</mi><mi>e</mi><mi>n</mi><mi>g</mi><mi>t</mi><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">m=r.length</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span></span></span></span></p>\n<ul>\n<li>\n<p>若 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>&gt;</mo><mo>=</mo><mi>n</mi><mtext>  </mtext><mi mathvariant=\"normal\">&amp;</mi><mi mathvariant=\"normal\">&amp;</mi><mtext>  </mtext><mi>j</mi><mo>&gt;</mo><mo>=</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">i&gt;=n \\;\\&amp;\\&amp;\\;j&gt;=m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6986em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">&amp;&amp;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>，退出循环</p>\n</li>\n<li>\n<p>若 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>&lt;</mo><mi>n</mi><mtext>  </mtext><mi mathvariant=\"normal\">&amp;</mi><mi mathvariant=\"normal\">&amp;</mi><mtext>  </mtext><mi>j</mi><mo>&gt;</mo><mo>=</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">i&lt;n \\;\\&amp;\\&amp;\\;j&gt;=m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6986em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">&amp;&amp;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>，剩余全为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">l[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>，选择 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">l[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span></p>\n</li>\n<li>\n<p>若 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>&gt;</mo><mo>=</mo><mi>n</mi><mtext>  </mtext><mi mathvariant=\"normal\">&amp;</mi><mi mathvariant=\"normal\">&amp;</mi><mtext>  </mtext><mi>j</mi><mo>&lt;</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">i&gt;=n \\;\\&amp;\\&amp;\\;j&lt;m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6986em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">&amp;&amp;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>，剩余全为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">r[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>，选择 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">r[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span></p>\n</li>\n<li>\n<p>若 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>&lt;</mo><mi>r</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">l[i] &lt; r[j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span>，那么选择 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">r[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span></p>\n</li>\n<li>\n<p>若 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mi>r</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">l[i] &gt; r[j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span>，那么选择 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">l[j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span></p>\n</li>\n<li>\n<p>若 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mo>=</mo><mi>r</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">l[i] == r[j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">==</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span>，需要额外的讨论</p>\n<blockquote>\n<p>可以看 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">l[i+1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> 与 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">r[j+1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> 的关系，回到了上述讨论的情况</p>\n</blockquote>\n</li>\n</ul>\n<hr />\n<p>如何在选择 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">nums1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">s</span><span class=\"mord\">1</span></span></span></span> 中选择 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 个最大数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span> 呢？可以转化为删除 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">n - x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 个元素得到的最大值，其实就是 <a href=\"/2023/06/08/algorithm/%E7%A7%BB%E6%8E%89-k-%E4%BD%8D%E6%95%B0%E5%AD%97\">402. 移掉 K 位数字</a></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">maxNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        ans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 枚举 x</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> k <span class=\"token operator\">-</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;=</span> max<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> l <span class=\"token operator\">=</span> <span class=\"token function\">getSubMaxNumber</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> r <span class=\"token operator\">=</span> <span class=\"token function\">getSubMaxNumber</span><span class=\"token punctuation\">(</span>nums2<span class=\"token punctuation\">,</span> k <span class=\"token operator\">-</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">||</span> j <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> idx<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">//l[i] > r[j]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">// 只有 ans 没有被修改过</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag <span class=\"token operator\">&amp;&amp;</span> l<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> ans<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> ans<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                ans<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> l<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token comment\">// 只有 ans 没有被修改过</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> ans<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> ans<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                ans<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> n <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">>=</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 都可以</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">>=</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> r<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token comment\">// 相等，继续往下比较</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getSubMaxNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token comment\">// 将选择变成删除</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token comment\">// 调调递减栈</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> st <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token comment\">// 若 num 与栈顶元素相等，那么也不能移除，因为要让数「尽可能大」，所需能保留就保留</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token comment\">//\t- [5, 5, 1] 选择 2 个数，必然是 [5, 5] 而不是 [5, 1]</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">peekFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                st<span class=\"token punctuation\">.</span><span class=\"token function\">pollFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                k<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            st<span class=\"token punctuation\">.</span><span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token comment\">// 若 k 有剩余，去除最后的 k 个</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">pollLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p>\n<ul>\n<li>\n<p>时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo>+</mo><msup><mi>k</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(k(m +n+k^2))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">))</span></span></span></span>，其中 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 与 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 分别是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">nums1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">s</span><span class=\"mord\">1</span></span></span></span> 和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">nums2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">s</span><span class=\"mord\">2</span></span></span></span> 的长度，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 是拼接的最大长度</p>\n<p>合并 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> 个子序列，需要 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 次合并，每次合并需要比较，最坏情况下需要比较 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 次，即 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">k^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>。</p>\n</li>\n<li>\n<p>空间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span></p>\n</li>\n</ul>\n<div class=\"note info\">\n<p><strong>字典序最小</strong></p>\n<ul>\n<li><a href=\"/2023/06/08/algorithm/%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E5%AD%97%E6%AF%8D\">去除重复字母</a></li>\n<li><a href=\"/2023/06/08/algorithm/%E7%A7%BB%E6%8E%89-K-%E4%BD%8D%E6%95%B0%E5%AD%97\">移掉 K 位数字</a></li>\n<li><a href=\"/2023/06/08/algorithm/%E6%95%B4%E7%90%86%E4%B9%A6%E6%9E%B6\">整理书架</a></li>\n<li><a href=\"/2023/06/08/algorithm/%E6%8B%BC%E6%8E%A5%E6%9C%80%E5%A4%A7%E6%95%B0\">拼接最大数</a></li>\n</ul>\n</div>\n",
            "tags": [
                "算法",
                "栈",
                "单调栈",
                "贪心",
                "困难"
            ]
        },
        {
            "id": "https://www.htired.top/2023/06/08/algorithm/%E7%A7%BB%E6%8E%89-K-%E4%BD%8D%E6%95%B0%E5%AD%97/",
            "url": "https://www.htired.top/2023/06/08/algorithm/%E7%A7%BB%E6%8E%89-K-%E4%BD%8D%E6%95%B0%E5%AD%97/",
            "title": "移掉 K 位数字",
            "date_published": "2023-06-08T08:43:20.000Z",
            "content_html": "<p><a href=\"https://leetcode.cn/problems/remove-k-digits/\">402. 移掉 K 位数字</a></p>\n<p>难度中等</p>\n<p>给你一个以字符串表示的非负整数  <code>num</code>  和一个整数  <code>k</code>  ，移除这个数中的  <code>k</code>  位数字，使得剩下的数字最小。请你以字符串形式返回这个最小的数字。</p>\n<p><strong>示例 1 ：</strong></p>\n<blockquote>\n<p>输入：num = &quot;1432219&quot;, k = 3</p>\n<p>输出：&quot;1219&quot;</p>\n<p>解释：移除掉三个数字 4, 3, 和 2 形成一个新的最小的数字 1219 。</p>\n</blockquote>\n<p><strong>示例 2 ：</strong></p>\n<blockquote>\n<p>输入：num = &quot;10200&quot;, k = 1</p>\n<p>输出：&quot;200&quot;</p>\n<p>解释：移掉首位的 1 剩下的数字为 200. 注意输出不能有任何前导零。</p>\n</blockquote>\n<p><strong>示例 3 ：</strong></p>\n<blockquote>\n<p>输入：num = &quot;10&quot;, k = 2</p>\n<p>输出：&quot;0&quot;</p>\n<p>解释：从原数字移除所有的数字，剩余为空就是 0 。</p>\n</blockquote>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= k &lt;= num.length &lt;= 105</code></li>\n<li><code>num</code>  仅由若干位数字（0 - 9）组成</li>\n<li>除了 <strong>0</strong> 本身之外， <code>num</code>  不含任何前导零</li>\n</ul>\n<h1 id=\"贪心-单调栈\"><a class=\"anchor\" href=\"#贪心-单调栈\">#</a> 贪心 + 单调栈</h1>\n<blockquote>\n<p>若只删除 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 次。</p>\n<p>例如： <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1432219</mn></mrow><annotation encoding=\"application/x-tex\">1432219</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1432219</span></span></span></span>，那么肯定是删除 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span></span></span></span></p>\n<ul>\n<li>\n<p>若删除 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span></span></span></span> 后面的元素 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>32219</mn></mrow><annotation encoding=\"application/x-tex\">32219</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">32219</span></span></span></span> 其中一个，那么最后肯定是前缀为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>14</mn><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">14\\cdots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">14</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span></span></span></span>  的序列</p>\n<p>若删除 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span></span></span></span>，那么前缀变成 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>13</mn><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">13\\cdots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">13</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span></span></span></span>  的序列</p>\n<p>二者的长度必然相等，因为都是删除 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 次</p>\n<p>贪心地选择删除 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span></span></span></span></p>\n</li>\n</ul>\n<p>例如：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1452219</mn></mrow><annotation encoding=\"application/x-tex\">1452219</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1452219</span></span></span></span>，那么肯定删除 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span></span></span></span></p>\n<ul>\n<li>\n<p>对于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span></span></span></span> 后面的元素与上述同理</p>\n</li>\n<li>\n<p>若删除 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span></span></span></span> 前面的元素 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>14</mn></mrow><annotation encoding=\"application/x-tex\">14</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">14</span></span></span></span> 其中一个，那么最后 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>15</mn><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">15\\cdots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">15</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span></span></span></span> 或者 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>45</mn><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">45\\cdots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">45</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span></span></span></span> 的序列必然大于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>14</mn><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">14\\cdots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">14</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span></span></span></span> 的序列</p>\n<p>贪心地选择删除 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span></span></span></span></p>\n</li>\n<li>\n<p>删除 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span></span></span></span> 后的序列 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>142219</mn></mrow><annotation encoding=\"application/x-tex\">142219</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">142219</span></span></span></span>，若还可以删除继续删除，那么必然删除 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span></span></span></span>，分析同上。</p>\n</li>\n</ul>\n</blockquote>\n<p>若是连续递增的序列，那么不必删除</p>\n<p>若当前元素 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">s[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> 小于结尾的元素，那么不断地删除结尾的元素直至 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">s[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> 大于结尾元素，最后将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">s[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> 加入结果集的尾部</p>\n<ul>\n<li>例如：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>145</mn></mrow><annotation encoding=\"application/x-tex\">145</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">145</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">s[i] =2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span>，那么需要不断地删除结尾元素 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>145</mn><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">145\\cdots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">145</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span></span></span></span> 至 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>142</mn><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">142\\cdots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">142</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span></span></span></span> 至 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>12</mn><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">12\\cdots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">12</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span></span></span></span></li>\n</ul>\n<p>最多只能删除 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 次，若 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>=</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">k == 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">==</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> 那么可以直接退出循环，将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span> 中剩余地元素放入结果集</p>\n<blockquote>\n<p>对于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1432219</mn></mrow><annotation encoding=\"application/x-tex\">1432219</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1432219</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">k = 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span></p>\n<p>根据上述步骤删除了 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><mo separator=\"true\">,</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">4,3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span></span></span></span> 此时结果集 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>12</mn></mrow><annotation encoding=\"application/x-tex\">12</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">12</span></span></span></span> ，最后将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>219</mn></mrow><annotation encoding=\"application/x-tex\">219</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">219</span></span></span></span> 加入结果集。</p>\n<p>为什么不删除 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>219</mn></mrow><annotation encoding=\"application/x-tex\">219</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">219</span></span></span></span> 其中一个？</p>\n<p>上文已经分析了，对于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span>：</p>\n<ul>\n<li>\n<p>若删除 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span> 以后的元素 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2219</mn></mrow><annotation encoding=\"application/x-tex\">2219</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2219</span></span></span></span> 其中一个，那么最后肯定是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>143</mn><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">143\\cdots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">143</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span></span></span></span> 的序列</p>\n</li>\n<li>\n<p>若删除 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span>，那么最后是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>142</mn><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">142\\cdots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">142</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span></span></span></span> 的序列</p>\n<p>此时后者必然小于前者，贪心的选择后者，即：删除 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span></p>\n</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span></span></span></span> 也同理</p>\n</blockquote>\n<p>若 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 最后还有剩余，那么可以直接删除尾部的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 个元素，若结果集不足 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 个，那么直接返回 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></p>\n<p>我们可以用栈来表示结果集，可以发现这是个单调递增栈。</p>\n<ul>\n<li>即：栈顶元素 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>e</mi><mi>e</mi><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">peek</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">ee</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 大于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">s[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>，那么不断地删除栈顶元素并更新 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>=</mo><mi>k</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">k=k-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 直至栈顶元素 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>e</mi><mi>e</mi><mi>k</mi><mo>&lt;</mo><mo>=</mo><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">peek &lt;= s[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">ee</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>。将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">s[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> 压入栈顶。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">removeKdigits</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> num<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> num<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">StringBuilder</span> st <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> num<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> ch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                st<span class=\"token punctuation\">.</span><span class=\"token function\">deleteCharAt</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                k<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 除去前导零</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> ch <span class=\"token operator\">!=</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                st<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&lt;=</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">-</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note info\">\n<p><strong>字典序最小</strong></p>\n<ul>\n<li><a href=\"/2023/06/08/algorithm/%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E5%AD%97%E6%AF%8D\">去除重复字母</a></li>\n<li><a href=\"/2023/06/08/algorithm/%E7%A7%BB%E6%8E%89-K-%E4%BD%8D%E6%95%B0%E5%AD%97\">移掉 K 位数字</a></li>\n<li><a href=\"/2023/06/08/algorithm/%E6%95%B4%E7%90%86%E4%B9%A6%E6%9E%B6\">整理书架</a></li>\n<li><a href=\"/2023/06/08/algorithm/%E6%8B%BC%E6%8E%A5%E6%9C%80%E5%A4%A7%E6%95%B0\">拼接最大数</a></li>\n</ul>\n</div>\n",
            "tags": [
                "算法",
                "栈",
                "单调栈",
                "中等",
                "贪心",
                "字符串"
            ]
        },
        {
            "id": "https://www.htired.top/2023/06/08/algorithm/%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E5%AD%97%E6%AF%8D/",
            "url": "https://www.htired.top/2023/06/08/algorithm/%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E5%AD%97%E6%AF%8D/",
            "title": "去除重复字母",
            "date_published": "2023-06-08T08:43:01.000Z",
            "content_html": "<p><a href=\"https://leetcode.cn/problems/remove-duplicate-letters/\">316. 去除重复字母</a></p>\n<p>难度中等</p>\n<p>给你一个字符串  <code>s</code>  ，请你去除字符串中重复的字母，使得每个字母只出现一次。需保证 <strong>返回结果的字典序最小</strong>（要求不能打乱其他字符的相对位置）。</p>\n<p><strong>示例 1：</strong></p>\n<blockquote>\n<p>输入：s = &quot;bcabc&quot;</p>\n<p>输出：&quot;abc&quot;</p>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<blockquote>\n<p>输入：s = &quot;cbacdcbc&quot;</p>\n<p>输出：&quot;acdb&quot;</p>\n</blockquote>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= s.length &lt;= 10^4</code></li>\n<li><code>s</code>  由小写英文字母组成</li>\n</ul>\n<h1 id=\"贪心-单调栈\"><a class=\"anchor\" href=\"#贪心-单调栈\">#</a> 贪心 + 单调栈</h1>\n<blockquote>\n<p>例如：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mi>c</mi><mi>a</mi><mi>b</mi><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">bcabc</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">ab</span><span class=\"mord mathnormal\">c</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">i =0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> 已经是满足字典序最小</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">i=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">bc</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">c</span></span></span></span> 已经是满足字典序最小</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">i=2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span>：发现 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo>&gt;</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">c &gt; a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span></p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> 后面有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span>，那么应该是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">ac</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span></span></span></span> 而不是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">ca</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">a</span></span></span></span>。即：移除 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span>，还剩余 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span></li>\n<li>此时 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>&gt;</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">b &gt; a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> 后面有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>，那么应该是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">ab</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">ab</span></span></span></span> 而不是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">ba</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">ba</span></span></span></span>。即：移除 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span></li>\n<li>最后的结果集：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span></li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">i=3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span>：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">ab</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">ab</span></span></span></span> 已经是满足字典序最小</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>=</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">i=4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span></span></span></span>：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>b</mi><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">abc</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">ab</span><span class=\"mord mathnormal\">c</span></span></span></span> 已经是满足字典序最小</p>\n<hr />\n<p>例如：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>b</mi><mi>a</mi><mi>c</mi><mi>d</mi><mi>c</mi><mi>b</mi><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">cbacdcbc</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">ba</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">c</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">i=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> 已经是满足字典序最小</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">i=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mo>&gt;</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">c&gt;b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> 后面含有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span>，那么应该是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">bc</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">c</span></span></span></span> 而不是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">cb</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">b</span></span></span></span>。即：移除 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span>，将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> 放入结果集：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">i=2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span>：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>&gt;</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">b &gt; a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> 后面含有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>，那么应该是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">ab</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">ab</span></span></span></span> 而不是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">ba</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">ba</span></span></span></span>。即：移除 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>，将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> 放入结果集：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">i=3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span>：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">ac</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span></span></span></span> 已经是满足字典序最小</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>=</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">i=4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span></span></span></span>：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>c</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">acd</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span></span></span></span> 已经是满足字典序最小</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>=</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">i=5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span></span></span></span>：结果集中含有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span>，可以贪心的选择前面的，排除当前元素</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>c</mi><mi>d</mi><mo>&gt;</mo><mi>a</mi><mi>d</mi><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">acd &gt; adc</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">c</span></span></span></span>，选择后者则会导致结果集变大</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>=</mo><mn>6</mn></mrow><annotation encoding=\"application/x-tex\">i=6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">6</span></span></span></span>：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo>&gt;</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">d &gt; b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> 后面没有元素 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span>，那么放入结果集：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>c</mi><mi>d</mi><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">acdb</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">b</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>=</mo><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">i=7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">7</span></span></span></span>：结果集中含有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span>，可以贪心的选择前面的，排除当前元素</p>\n<p>最后的结果集：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>c</mi><mi>d</mi><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">acdb</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">b</span></span></span></span></p>\n</blockquote>\n<p>枚举下标 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span></p>\n<ul>\n<li>若栈中元素包含 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">s[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>，那么舍弃 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">s[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>，因为若舍弃栈中元素，则会导致字典序更大</li>\n<li>若栈顶元素大于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">s[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>，若 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 后面含有栈顶元素，那么移除栈顶元素，不断地重复此过程直至栈顶元素 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>&lt;</mo><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">&lt; s[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> 或者 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 后面不包含栈顶元素，最后将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">s[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> 入栈形成字典序最小</li>\n<li>若栈顶元素小于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">s[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>，那么此时已经满足字典序最小，将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">s[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> 入栈</li>\n</ul>\n<p>设 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mi>d</mi><mi>x</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">idx[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> 为元素 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 后面的重复元素的最远下标，采用 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mi>i</mi><mi>s</mi><mi>i</mi><mi>t</mi><mi>e</mi><mi>d</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">visited[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> 数组记录栈中是否包含元素 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">removeDuplicateLetters</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">//i 后面的重复元素的最远下标</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 单调栈</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">StringBuilder</span> st <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> visited <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token number\">26</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> ch <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">int</span> peek<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 栈顶元素大于当前元素 &amp;&amp; s [i] 后面包含栈顶元素</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>peek <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> v <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span>peek<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                st<span class=\"token punctuation\">.</span><span class=\"token function\">deleteCharAt</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                visited<span class=\"token punctuation\">[</span>peek<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            visited<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            st<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note info\">\n<p><strong>字典序最小</strong></p>\n<ul>\n<li><a href=\"/2023/06/08/algorithm/%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E5%AD%97%E6%AF%8D\">去除重复字母</a></li>\n<li><a href=\"/2023/06/08/algorithm/%E7%A7%BB%E6%8E%89-K-%E4%BD%8D%E6%95%B0%E5%AD%97\">移掉 K 位数字</a></li>\n<li><a href=\"/2023/06/08/algorithm/%E6%95%B4%E7%90%86%E4%B9%A6%E6%9E%B6\">整理书架</a></li>\n<li><a href=\"/2023/06/08/algorithm/%E6%8B%BC%E6%8E%A5%E6%9C%80%E5%A4%A7%E6%95%B0\">拼接最大数</a></li>\n</ul>\n</div>\n",
            "tags": [
                "算法",
                "栈",
                "单调栈",
                "中等",
                "贪心",
                "字符串"
            ]
        },
        {
            "id": "https://www.htired.top/2023/06/07/algorithm/%E7%BB%9F%E8%AE%A1%E5%85%A8%E4%B8%BA-1-%E5%AD%90%E7%9F%A9%E5%BD%A2/",
            "url": "https://www.htired.top/2023/06/07/algorithm/%E7%BB%9F%E8%AE%A1%E5%85%A8%E4%B8%BA-1-%E5%AD%90%E7%9F%A9%E5%BD%A2/",
            "title": "统计全为 1 子矩形",
            "date_published": "2023-06-06T16:19:15.000Z",
            "content_html": "<p><a href=\"https://leetcode.cn/problems/count-submatrices-with-all-ones/\">1504. 统计全 1 子矩形</a></p>\n<p>难度中等 159</p>\n<p>给你一个  <code>m x n</code>  的二进制矩阵  <code>mat</code>  ，请你返回有多少个 <strong>子矩形</strong> 的元素全部都是 1 。</p>\n<p><strong>示例 1：</strong></p>\n<p><img loading=\"lazy\" data-src=\"/images/count-submatrices-with-all-ones-1.png\" alt=\"img\" /></p>\n<blockquote>\n<p>输入：mat = [[1,0,1],[1,1,0],[1,1,0]]</p>\n<p>输出：13</p>\n<p>解释：<br />\n有 6 个 1x1 的矩形。<br />\n有 2 个 1x2 的矩形。<br />\n有 3 个 2x1 的矩形。<br />\n有 1 个 2x2 的矩形。<br />\n有 1 个 3x1 的矩形。<br />\n矩形数目总共 = 6 + 2 + 3 + 1 + 1 = 13 。</p>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<p><img loading=\"lazy\" data-src=\"/images/count-submatrices-with-all-ones-2.png\" alt=\"img\" /></p>\n<blockquote>\n<p>输入：mat = [[0,1,1,0],[0,1,1,1],[1,1,1,0]]</p>\n<p>输出：24</p>\n<p>解释：</p>\n<p>有 8 个 1x1 的子矩形。<br />\n有 5 个 1x2 的子矩形。<br />\n有 2 个 1x3 的子矩形。<br />\n有 4 个 2x1 的子矩形。<br />\n有 2 个 2x2 的子矩形。<br />\n有 2 个 3x1 的子矩形。<br />\n有 1 个 3x2 的子矩形。<br />\n矩形数目总共 = 8 + 5 + 2 + 4 + 2 + 2 + 1 = 24 。</p>\n</blockquote>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= m, n &lt;= 150</code></li>\n<li><code>mat[i][j]</code>  仅包含  <code>0</code>  或  <code>1</code></li>\n</ul>\n<h1 id=\"单调栈-动态规划\"><a class=\"anchor\" href=\"#单调栈-动态规划\">#</a> 单调栈 + 动态规划</h1>\n<p>枚举每一层，设 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">height[j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span> 为当前层位置 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> 的向上延伸的高度</p>\n<p>若当前位置为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span>，一种直观的做法是倒序枚举 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo>∼</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0\\sim j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span> 的位置并计算对答案的贡献值直至遇到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">height[j] == 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">==</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> 退出循环</p>\n<blockquote>\n<p>例如：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo>:</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">height:0,1,3,4,0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span></span></span></span></p>\n<p>若当前元素为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span>，那么倒序枚举，则对答案的贡献值为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><mo>+</mo><mn>3</mn><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">4+3+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></p>\n</blockquote>\n<p>有没有什么做法可以将免去倒序枚举，在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> 的时间得出答案？</p>\n<hr />\n<p>设 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp[j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span> 为当前层位置 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> 所包含的子矩形的个数，以位置 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> 作为<strong>最小高度值</strong>。</p>\n<ul>\n<li>\n<p>那么只需要往前寻到找第一个小于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">height[j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span> 的元素下标 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span></p>\n<p>此时：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>j</mi><mo>−</mo><mi>k</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mi>h</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp[j] = dp[k] + (j - k) * height[j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span></p>\n<p>然后累加到答案中</p>\n</li>\n<li>\n<p>可以参考下图：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    第二部分：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    矩形的数量由</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    下标 k 所指的柱子</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    所能形成的矩形数量</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    决定─┐</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         │</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         │          ┌第一部分：(j - k) * height [i][j]</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        ┌┴─┐        │</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        │  │        │ </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        │  │        │  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        │  │    ┌──┐│   </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        │  │ ┌──┼──┼┴─┐</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        │ ┌┴─┤..│..│..│</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       ┌┴─┤xx│..│..│..│</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       │xx│xx│..│..│..│</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     ──┴──┴──┴──┴──┴──┴──</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            │        │</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            k        j  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>*/</span></pre></td></tr></table></figure><p><strong>参考代码</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numSubmat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> mat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> mat<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 单调栈 + 动态规划</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 每一层的高</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> height <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">// 上一个小于他的元素</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 递增 st</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">Deque</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> st <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayDeque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            st<span class=\"token punctuation\">.</span><span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                height<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mat<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> height<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> height<span class=\"token punctuation\">[</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">peekFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> height<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    st<span class=\"token punctuation\">.</span><span class=\"token function\">pollFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">// 上一个小于其元素的下标以及当前为右下角的子矩阵个数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">peekFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> height<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                ans <span class=\"token operator\">+=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token comment\">//dp[i] = dp[j] + sum(j + 1, i)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                st<span class=\"token punctuation\">.</span><span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>j<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<p><strong>时间复杂度</strong>：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nm)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">nm</span><span class=\"mclose\">)</span></span></span></span></p>\n<p><strong>空间复杂度</strong>：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span></p>\n<div class=\"note info\">\n<p><strong>矩形单调栈</strong></p>\n<ul>\n<li><a href=\"/2023/06/03/algorithm/%E6%9F%B1%E7%8A%B6%E5%9B%BE%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E7%9F%A9%E5%BD%A2\">柱状图中最大的矩形</a></li>\n<li><a href=\"/2023/06/03/algorithm/%E6%9C%80%E5%A4%A7%E7%9F%A9%E5%BD%A2\">最大矩形</a></li>\n<li><a href=\"/2023/06/03/algorithm/%E6%9C%80%E5%A4%A7%E6%AD%A3%E6%96%B9%E5%BD%A2\">最大正方形</a></li>\n<li><a href=\"/2023/06/07/algorithm/%E7%BB%9F%E8%AE%A1%E5%85%A8-1-%E5%AD%90%E7%9F%A9%E5%BD%A2\">统计全 1 子矩形</a></li>\n</ul>\n</div>\n",
            "tags": [
                "算法",
                "单调栈",
                "中等",
                "动态规划",
                "矩阵"
            ]
        },
        {
            "id": "https://www.htired.top/2023/06/03/algorithm/%E4%B9%98%E6%B3%95%E9%80%86%E5%85%83%EF%BC%8C%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86%EF%BC%8C%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%8C%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%B0%86%E5%AD%90%E6%95%B0%E7%BB%84%E9%87%8D%E6%96%B0%E6%8E%92%E5%BA%8F%E5%BE%97%E5%88%B0%E5%90%8C%E4%B8%80%E4%B8%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%96%B9%E6%A1%88%E6%95%B0/",
            "url": "https://www.htired.top/2023/06/03/algorithm/%E4%B9%98%E6%B3%95%E9%80%86%E5%85%83%EF%BC%8C%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86%EF%BC%8C%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%8C%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%B0%86%E5%AD%90%E6%95%B0%E7%BB%84%E9%87%8D%E6%96%B0%E6%8E%92%E5%BA%8F%E5%BE%97%E5%88%B0%E5%90%8C%E4%B8%80%E4%B8%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%96%B9%E6%A1%88%E6%95%B0/",
            "title": "乘法逆元，费马小定理， 并查集， 动态规划-将子数组重新排序得到同一个二叉搜索树的方案数",
            "date_published": "2023-06-03T12:36:58.000Z",
            "content_html": "<p><a href=\"https://leetcode.cn/problems/number-of-ways-to-reorder-array-to-get-same-bst/\">1569. 将子数组重新排序得到同一个二叉搜索树的方案数</a></p>\n<p>难度困难</p>\n<p>给你一个数组  <code>nums</code>  表示  <code>1</code>  到  <code>n</code>  的一个排列。我们按照元素在  <code>nums</code>  中的顺序依次插入一个初始为空的二叉搜索树（BST）。请你统计将  <code>nums</code>  重新排序后，统计满足如下条件的方案数：重排后得到的二叉搜索树与  <code>nums</code>  原本数字顺序得到的二叉搜索树相同。</p>\n<p>比方说，给你  <code>nums = [2,1,3]</code> ，我们得到一棵 2 为根，1 为左孩子，3 为右孩子的树。数组  <code>[2,3,1]</code>  也能得到相同的 BST，但  <code>[3,2,1]</code>  会得到一棵不同的 BST 。</p>\n<p>请你返回重排  <code>nums</code>  后，与原数组  <code>nums</code>  得到相同二叉搜索树的方案数。</p>\n<p>由于答案可能会很大，请将结果对  <code>10^9 + 7</code>  取余数。</p>\n<p><strong>示例 1：</strong></p>\n<p><img loading=\"lazy\" data-src=\"/images/number-of-ways-to-reorder-array-to-get-same-bst-6.png\" alt=\"img\" /></p>\n<pre><code>输入：nums = [2,1,3]\n输出：1\n解释：我们将 nums 重排， [2,3,1] 能得到相同的 BST 。没有其他得到相同 BST 的方案了。\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<p><img loading=\"lazy\" data-src=\"/images/number-of-ways-to-reorder-array-to-get-same-bst-7.png\" alt=\"img\" /></p>\n<pre><code>输入：nums = [3,4,5,1,2]\n输出：5\n解释：下面 5 个数组会得到相同的 BST：\n[3,1,2,4,5]\n[3,1,4,2,5]\n[3,1,4,5,2]\n[3,4,1,2,5]\n[3,4,1,5,2]\n</code></pre>\n<p><strong>示例 3：</strong></p>\n<p><img loading=\"lazy\" data-src=\"/images/number-of-ways-to-reorder-array-to-get-same-bst-8.png\" alt=\"img\" /></p>\n<pre><code>输入：nums = [1,2,3]\n输出：0\n解释：没有别的排列顺序能得到相同的 BST 。\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n<li><code>1 &lt;= nums[i] &lt;= nums.length</code></li>\n<li><code>nums</code>  中所有数 <strong>互不相同</strong> 。</li>\n</ul>\n<h1 id=\"动态规划-组合数\"><a class=\"anchor\" href=\"#动态规划-组合数\">#</a> 动态规划 + 组合数</h1>\n<p>令 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>a</mi><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[ai]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">ai</span><span class=\"mclose\">]</span></span></span></span> 为当前节点作为根节点所得的满足条件的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mi>S</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">BST</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">BST</span></span></span></span> 方案</p>\n<ul>\n<li>设其左孩子节点个数为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">leftSize</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">tS</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">ze</span></span></span></span></li>\n<li>设其孩子节点个数为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mi>o</mi><mi>t</mi><mi>a</mi><mi>l</mi><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">totalSize</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">lS</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">ze</span></span></span></span></li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>a</mi><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><msubsup><mi>C</mi><mrow><mi>t</mi><mi>o</mi><mi>t</mi><mi>a</mi><mi>l</mi><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow></msubsup><mo>×</mo><mi>f</mi><mo stretchy=\"false\">[</mo><mi>a</mi><mi>i</mi><mi>l</mi><mo stretchy=\"false\">]</mo><mo>×</mo><mi>f</mi><mo stretchy=\"false\">[</mo><mi>a</mi><mi>i</mi><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[ai]=C_{totalSize}^{leftSize} \\times f[ail]\\times f[air]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">ai</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2683em;vertical-align:-0.3013em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.967em;\"><span style=\"top:-2.3987em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">t</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">lS</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\">ze</span></span></span></span><span style=\"top:-3.1809em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">tS</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\">ze</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3013em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">ai</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">ai</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span></p>\n<ul>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>C</mi><mrow><mi>t</mi><mi>o</mi><mi>t</mi><mi>a</mi><mi>l</mi><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\">C_{totalSize}^{leftSize}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2683em;vertical-align:-0.3013em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.967em;\"><span style=\"top:-2.3987em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">t</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">lS</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\">ze</span></span></span></span><span style=\"top:-3.1809em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">e</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05764em;\">tS</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mord mathnormal mtight\">ze</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3013em;\"><span></span></span></span></span></span></span></span></span></span>：从 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mi>o</mi><mi>t</mi><mi>a</mi><mi>l</mi><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">totalSize</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">lS</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">ze</span></span></span></span> 选择 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">leftSize</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">tS</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">ze</span></span></span></span> 个的组合数。</p>\n<blockquote>\n<p>由于小于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">ai</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">ai</span></span></span></span> 的数 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">left</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span></span></span></span> 作为一个整体在剩余位置中无论放在哪里都不会影响最后生成的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mi>S</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">BST</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">BST</span></span></span></span></p>\n<ul>\n<li>\n<p>对于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">1,2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span></span></span></span> 的位置在剩余位置中任意选择 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> 个位置放置，如下所示其中 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span> 个位置</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtable rowspacing=\"0.16em\" columnalign=\"center center center center center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi mathvariant=\"normal\">_</mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi mathvariant=\"normal\">_</mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi mathvariant=\"normal\">_</mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi mathvariant=\"normal\">_</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi mathvariant=\"normal\">_</mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi mathvariant=\"normal\">_</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi mathvariant=\"normal\">_</mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi mathvariant=\"normal\">_</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi mathvariant=\"normal\">_</mi></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi mathvariant=\"normal\">_</mi></mstyle></mtd></mtr></mtable><mtext> </mtext></mrow><annotation encoding=\"application/x-tex\">\\begin{matrix}3 &amp; \\_ &amp; \\_&amp;\\_&amp;\\_\\\\3 &amp; 1 &amp; 2 &amp;\\_&amp;\\_\\\\3 &amp; \\_ &amp; 1&amp;2&amp;\\_\\\\3&amp;1&amp;\\_&amp;2&amp;\\_\\end{matrix}\\,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:4.8em;vertical-align:-2.15em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.65em;\"><span style=\"top:-4.81em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span></span></span><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span></span></span><span style=\"top:-1.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.15em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.65em;\"><span style=\"top:-4.81em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span></span></span><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span></span></span><span style=\"top:-1.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.15em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.65em;\"><span style=\"top:-4.81em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span></span></span><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-1.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.15em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.65em;\"><span style=\"top:-4.81em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span></span></span><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-1.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.15em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.65em;\"><span style=\"top:-4.81em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span></span></span><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span></span></span><span style=\"top:-2.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span></span></span><span style=\"top:-1.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.15em;\"><span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span></span></span></span></p>\n</li>\n</ul>\n<p>因 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">left</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span></span></span></span> 必然在根节点 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span> 的左边，所以 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">right</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span></span></span></span> 不会影响 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">left</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span></span></span></span> 的放置位置</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">right</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span></span></span></span> 必然放置在根节点 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span> 的右边</li>\n</ul>\n<p>即可放的位置数：在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mi>o</mi><mi>t</mi><mi>a</mi><mi>l</mi><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">totalSize</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">lS</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">ze</span></span></span></span> 中选择 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">leftSize</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">tS</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">ze</span></span></span></span> 个位置</p>\n<ul>\n<li>剩余的位置即为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>S</mi><mi>i</mi><mi>z</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">rightSize</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">tS</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">ze</span></span></span></span> 的位置数量</li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>a</mi><mi>i</mi><mi>l</mi><mo stretchy=\"false\">]</mo><mo>×</mo><mi>f</mi><mo stretchy=\"false\">[</mo><mi>a</mi><mi>i</mi><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[ail]\\times f[air]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">ai</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">ai</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span>：根据乘法原理</p>\n<p>固定左边 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>a</mi><mi>i</mi><mi>l</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[ail]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">ai</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mclose\">]</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>a</mi><mi>i</mi><mi>l</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[ail]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">ai</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mclose\">]</span></span></span></span> 对应 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>a</mi><mi>i</mi><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[air]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">ai</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span> 每一种方案</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token constant\">MOD</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numOfWays</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 计算组合数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 叶子节点，组合数为 1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                c<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">TreeNode</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 先构建一颗 BST</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">//f [ai] 为当前节点作为根节点所得的满足条件的 BST 方案</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">long</span> lf <span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">long</span> rf <span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">int</span> leftSize <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>totalSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">int</span> rightSize <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>totalSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        root<span class=\"token punctuation\">.</span>totalSize <span class=\"token operator\">=</span> leftSize <span class=\"token operator\">+</span> rightSize <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">[</span>leftSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">.</span>totalSize <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>lf <span class=\"token operator\">*</span> rf <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">TreeNode</span> prev <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            prev <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>v <span class=\"token operator\">&lt;</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                root <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">.</span>v <span class=\"token operator\">&lt;</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            prev<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            prev<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token class-name\">TreeNode</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token class-name\">TreeNode</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">int</span> totalSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>v <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"乘法逆元-费马小定理-并查集-动态规划\"><a class=\"anchor\" href=\"#乘法逆元-费马小定理-并查集-动态规划\">#</a> 乘法逆元  + 费马小定理 + 并查集 + 动态规划</h1>\n<blockquote>\n<p>参考：<a href=\"https://leetcode.cn/problems/number-of-ways-to-reorder-array-to-get-same-bst/solution/jiang-zi-shu-zu-zhong-xin-pai-xu-de-dao-tong-yi-2/\">将子数组重新排序得到同一个二叉查找树的方案数</a></p>\n</blockquote>\n<p>从上述方法可以看出时间复杂度耗费在求解组合数与构建 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mi>S</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">BST</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">BST</span></span></span></span> 上</p>\n<p>组合数：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>C</mi><mi>n</mi><mi>k</mi></msubsup><mo>=</mo><mfrac><mrow><mi>n</mi><mo>⋅</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>⋯</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><mrow><mi>k</mi><mo stretchy=\"false\">!</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy=\"false\">!</mo></mrow><mrow><mi>k</mi><mo stretchy=\"false\">!</mo><mo>⋅</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>k</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">!</mo></mrow></mfrac><mtext> </mtext></mrow><annotation encoding=\"application/x-tex\">C_n^k=\\frac{n\\cdot (n-1)\\cdots(n-k+1)}{k!}=\\frac{n!}{k!\\cdot(n-k)!}\\,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0961em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-2.453em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.355em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose mtight\">!</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.485em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">⋅</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span><span class=\"minner mtight\">⋯</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4001em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8801em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose mtight\">!</span><span class=\"mbin mtight\">⋅</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose mtight\">)!</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">!</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span></span></span></span></p>\n<blockquote>\n<p><a href=\"https://oi-wiki.org/math/number-theory/inverse/\">乘法逆元</a>：若一个线性同余方程：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>b</mi><mo>≡</mo><mn>1</mn><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">ab\\equiv 1\\,mod\\,(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">ab</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span>，则称 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> 是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">a\\, mod \\,m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 的乘法逆元，记作：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">a^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>即：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mn>1</mn><mi>a</mi></mfrac><mo>=</mo><mi>b</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{a}= b\\,mod\\,(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span></p>\n<blockquote>\n<p>乘法逆元就是平时说的倒数</p>\n</blockquote>\n<p>那么：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mi>c</mi><mi>a</mi></mfrac><mo>=</mo><mi>c</mi><mo>⋅</mo><mi>b</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\frac{c}{a} = c\\cdot b\\,mod\\,(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0404em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span></p>\n<hr />\n<p>如何求解 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> 呢？</p>\n<p>若 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 为质数，由<a href=\"https://oi-wiki.org/math/number-theory/fermat/\">费马小定理</a>：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>b</mi><mo>≡</mo><mn>1</mn><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mo>≡</mo><msup><mi>a</mi><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msup><mtext> </mtext><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">ab\\equiv1\\,mod\\,(m)\\equiv a^{m-1}\\,\\,mod\\,(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">ab</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>≡</mo><msup><mi>a</mi><mrow><mi>m</mi><mo>−</mo><mn>2</mn></mrow></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">b\\equiv a^{m-2}\\,mod\\,(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span></p>\n<blockquote>\n<p>可以采用「快速幂算法」求解 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mrow><mi>m</mi><mo>−</mo><mn>2</mn></mrow></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">a^{m-2}\\,mod\\,(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span></p>\n</blockquote>\n<hr />\n<ul>\n<li>\n<p>只需预处理所有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mi>a</mi><mi>c</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>i</mi><mo stretchy=\"false\">!</mo><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">fac[i] = i!\\, mod \\,(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">!</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span></p>\n</li>\n<li>\n<p>只需预处理所有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mi>a</mi><mi>c</mi><mi>I</mi><mi>n</mi><mi>v</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">!</mo><msup><mo stretchy=\"false\">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">facInv[i] = (i!)^{-1}\\, mod \\,(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">!</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span></p>\n</li>\n</ul>\n<p>那么 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>C</mi><mi>n</mi><mi>k</mi></msubsup><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy=\"false\">!</mo></mrow><mrow><mi>k</mi><mo stretchy=\"false\">!</mo><mo>⋅</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>k</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">!</mo></mrow></mfrac><mo>=</mo><mi>f</mi><mi>a</mi><mi>c</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo><mo>⋅</mo><mi>f</mi><mi>a</mi><mi>c</mi><mi>I</mi><mi>n</mi><mi>v</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>⋅</mo><mi>f</mi><mi>a</mi><mi>c</mi><mi>I</mi><mi>n</mi><mi>v</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo>−</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C_n^k=\\frac{n!}{k!\\cdot(n-k)!}=fac[n]\\cdot facInv[k]\\cdot facInv[n-k]\\,mod\\,(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0961em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-2.453em;margin-left:-0.0715em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4001em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8801em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose mtight\">!</span><span class=\"mbin mtight\">⋅</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose mtight\">)!</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">!</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span></p>\n<hr />\n<p>如上所示，采用快速幂算法需要 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">log(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span> 的时间，其实可以「线性求逆元」</p>\n<p>设 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>=</mo><mi>u</mi><mo>⋅</mo><mi>i</mi><mo>+</mo><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">m = u\\cdot i + v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>，其中 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mo>=</mo><mo stretchy=\"false\">⌊</mo><mi>m</mi><mi mathvariant=\"normal\">/</mi><mi>i</mi><mo stretchy=\"false\">⌋</mo><mo separator=\"true\">,</mo><mi>v</mi><mo>=</mo><mi>m</mi><mtext> </mtext><mi mathvariant=\"normal\">%</mi><mtext> </mtext><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">u=⌊m/i⌋ ,v=m \\,\\% \\,i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord mathnormal\">m</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">⌋</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">%</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> ，即：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 除以 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 的商和余数</p>\n<p>两边同时 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">mod\\,m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mo>⋅</mo><mi>i</mi><mo>+</mo><mi>v</mi><mo>≡</mo><mn>0</mn><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">u\\cdot i + v \\equiv 0\\,(mod\\, m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4637em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mo>+</mo><mi>v</mi><mo>⋅</mo><msup><mi>i</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>≡</mo><mn>0</mn><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">u + v \\cdot i^{-1}\\equiv 0\\,(mod\\, m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mo>⋅</mo><msup><mi>v</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><msup><mi>i</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>≡</mo><mn>0</mn><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">u\\cdot v^{-1} +  i^{-1}\\equiv 0\\,(mod\\, m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>i</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>≡</mo><mo>−</mo><mi>u</mi><mo>⋅</mo><msup><mi>v</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">i^{-1}\\equiv -u\\cdot v^{-1}  \\,(mod\\, m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">i</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">u</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>即：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mi>n</mi><mi>v</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mo>−</mo><mo stretchy=\"false\">⌊</mo><mi>m</mi><mi mathvariant=\"normal\">/</mi><mi>i</mi><mo stretchy=\"false\">⌋</mo><mo>⋅</mo><mi>i</mi><mi>n</mi><mi>v</mi><mo stretchy=\"false\">[</mo><mi>m</mi><mtext> </mtext><mi mathvariant=\"normal\">%</mi><mtext> </mtext><mi>i</mi><mo stretchy=\"false\">]</mo><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">inv[i] = - ⌊m/i⌋ \\cdot inv[m \\,\\% \\,i] \\,(mod \\,m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mopen\">⌊</span><span class=\"mord mathnormal\">m</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">⌋</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">%</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span></p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mi>a</mi><mi>c</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>i</mi><mo stretchy=\"false\">!</mo><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">fac[i] = i!\\, mod \\,(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">!</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mi>a</mi><mi>c</mi><mi>I</mi><mi>n</mi><mi>v</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">!</mo><msup><mo stretchy=\"false\">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>i</mi><mi>n</mi><mi>v</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>⋅</mo><mi>f</mi><mi>a</mi><mi>c</mi><mi>I</mi><mi>n</mi><mi>v</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">facInv[i] = (i!)^{-1}\\, mod \\,(m)=inv[i] \\cdot facInv[i - 1]\\,mod\\,(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">!</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n</blockquote>\n<p>构建 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mi>S</mi><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">BST</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">BST</span></span></span></span></p>\n<blockquote>\n<p>前提注意：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">nums</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">s</span></span></span></span> 表示 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 的一个排列，所以每个元素有且仅出现一次</p>\n<p>若 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">num</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span></span></span></span> 出现在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">num - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 之前，那么 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">num - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 所在的树是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">num</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span></span></span></span> 的左子树</p>\n<blockquote>\n<p>若 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">num - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 为根的树是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">num</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span></span></span></span> 的右子树，由于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">num</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span></span></span></span> 在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">num - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 之前，所以必然会走向 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">num</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span></span></span></span> 的左子树</p>\n</blockquote>\n<p>若 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">num</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span></span></span></span> 出现在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">num - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 之后，那么 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">num</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span></span></span></span> 为所在的树是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">num - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 的右子树，且 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">num</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span></span></span></span> 的左子树为空</p>\n<blockquote>\n<p>因为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">num - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">num</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span></span></span></span> 之前遍历，若 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span> 要走到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">num</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span></span></span></span> 左子树，必然 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mo>&lt;</mo><mi>n</mi><mi>u</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">v &lt; num</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span></span></span></span></p>\n</blockquote>\n<p>对于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">num + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 同理。</p>\n<hr />\n<p>那么如何寻找 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">num - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 与 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">num + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 所在子树的根节点呢？</p>\n<p>可以采用并查集维护当前 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">num</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span></span></span></span> 所在子树的根节点</p>\n<p>所以倒序遍历数组 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">nums</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">s</span></span></span></span></p>\n<ul>\n<li>\n<p>若 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">num + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 在之前就遍历过，那么寻找 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">num + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 所在子树的根节点 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo>=</mo><mi>f</mi><mi>i</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>u</mi><mi>m</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">root = find(num + 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> ，并将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>u</mi><mi>r</mi><mi mathvariant=\"normal\">.</mi><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo>=</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">cur.right = root</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span></span></span></span>。</p>\n<p>否则：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>u</mi><mi>r</mi><mi mathvariant=\"normal\">.</mi><mi>r</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo>=</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">cur.right = null</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">ll</span></span></span></span></p>\n</li>\n<li>\n<p>若 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">num - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>​ 在之前就遍历过，那么寻找 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">num - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 所在子树的根节点 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo>=</mo><mi>f</mi><mi>i</mi><mi>n</mi><mi>d</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>u</mi><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">root = find(num - 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">in</span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> ，并将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>u</mi><mi>r</mi><mi mathvariant=\"normal\">.</mi><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo>=</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">cur.left= root</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">roo</span><span class=\"mord mathnormal\">t</span></span></span></span>。</p>\n<p>否则：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>u</mi><mi>r</mi><mi mathvariant=\"normal\">.</mi><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo>=</mo><mi>n</mi><mi>u</mi><mi>l</mi><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">cur.left = null</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">ll</span></span></span></span></p>\n</li>\n</ul>\n</blockquote>\n<p><strong>并查集的维护过程</strong></p>\n<p>\n\n<!-- Swiper -->\n\n<div class=\"swiper-container\">\n    <div class=\"swiper-wrapper\">\n        <div class=\"swiper-slide\"><img loading=\"lazy\" data-src=\"/images/number-of-ways-to-reorder-array-to-get-same-bst-1.png\" alt=\"\">\n        </div>\n        <div class=\"swiper-slide\"><img loading=\"lazy\" data-src=\"/images/number-of-ways-to-reorder-array-to-get-same-bst-2.png\" alt=\"\">\n        </div>\n        <div class=\"swiper-slide\"><img loading=\"lazy\" data-src=\"/images/number-of-ways-to-reorder-array-to-get-same-bst-3.png\" alt=\"\">\n        </div>\n        <div class=\"swiper-slide\"><img loading=\"lazy\" data-src=\"/images/number-of-ways-to-reorder-array-to-get-same-bst-4.png\" alt=\"\">\n        </div>\n        <div class=\"swiper-slide\"><img loading=\"lazy\" data-src=\"/images/number-of-ways-to-reorder-array-to-get-same-bst-5.png\" alt=\"\">\n        </div>\n    </div>\n    <!-- Add Pagination -->\n    <div class=\"swiper-pagination\"></div>\n</div>\n\n\n\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/Swiper/5.4.5/css/swiper.min.css\">\n\n<style>\n    /* 最外层盒子 */\n    .swiper-container {\n        width: 100%;\n        height: 100%;\n        margin-top: 10px;\n    }/* 图片 */\n    .swiper-container img {\n        display: block;\n        height: 100%;\n        width: 100%;\n        overflow: hidden;\n    }\n</style>\n\n\n\n<!-- 此处，引入js文件 -->\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Swiper/5.4.5/js/swiper.js\"></script>\n<script>\n    var swiper = new Swiper('.swiper-container', {\n        pagination: {\n            el: '.swiper-pagination',\n            dynamicBullets: true,\n        },\n    });\n</script>\n\n\n\n</p>\n<blockquote>\n<p>若轮播图加载不出来，请刷新</p>\n</blockquote>\n<h2 id=\"快速幂求解逆元\"><a class=\"anchor\" href=\"#快速幂求解逆元\">#</a> 快速幂求解逆元</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token constant\">MOD</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fac<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> facInv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numOfWays</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        fac <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        facInv <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        fac<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        facInv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            fac<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fac<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            facInv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>fac<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">MOD</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 数字对应的节点</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 倒序构建 BST</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">//num + 1 在之前遍历过</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token function\">union</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">//num - 1 在之前遍历过</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token function\">union</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 若结果刚好是 MOD 的整数倍时，ans = 0，那么 ans - 1 为负数</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// 左边的方案数</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">long</span> lAns <span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 右边的方案数</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">long</span> rAns <span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">// 左子树的节点数</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">int</span> leftTotal <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>totalSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">// 右子树的节点数</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">int</span> rightTotal <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>totalSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        root<span class=\"token punctuation\">.</span>totalSize <span class=\"token operator\">=</span> leftTotal <span class=\"token operator\">+</span> rightTotal <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">return</span> fac<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">.</span>totalSize <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> facInv<span class=\"token punctuation\">[</span>leftTotal<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span> <span class=\"token operator\">*</span> facInv<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">.</span>totalSize <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> leftTotal<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>lAns <span class=\"token operator\">*</span> rAns <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">// 快速幂：a^x % mod</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">long</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">long</span> base <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                ans <span class=\"token operator\">=</span> ans <span class=\"token operator\">*</span> base <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            base <span class=\"token operator\">=</span> base <span class=\"token operator\">*</span> base <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            x <span class=\"token operator\">>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fa<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        fa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            fa<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">int</span> lAncestor <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">int</span> rAncestor <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        fa<span class=\"token punctuation\">[</span>lAncestor<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rAncestor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token keyword\">return</span> fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token class-name\">TreeNode</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token class-name\">TreeNode</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token keyword\">int</span> totalSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>v <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"线性求解逆元\"><a class=\"anchor\" href=\"#线性求解逆元\">#</a> 线性求解逆元</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token constant\">MOD</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fac<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> inv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> facInv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numOfWays</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        fac <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        inv <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        facInv <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        fac<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> inv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> facInv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        fac<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> inv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> facInv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            fac<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fac<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            inv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token constant\">MOD</span> <span class=\"token operator\">/</span> i <span class=\"token operator\">*</span> inv<span class=\"token punctuation\">[</span><span class=\"token constant\">MOD</span> <span class=\"token operator\">%</span> i<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            facInv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>facInv<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> inv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span> <span class=\"token operator\">+</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 数字对应的节点</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 倒序构建 BST</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token class-name\">TreeNode</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">//num + 1 在之前遍历过</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token function\">union</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">//num - 1 在之前遍历过</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token function\">union</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token comment\">// 左边的方案数</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">long</span> lAns <span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">// 右边的方案数</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">long</span> rAns <span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token comment\">// 左子树的节点数</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">int</span> leftTotal <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>totalSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">// 右子树的节点数</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">int</span> rightTotal <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>totalSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        root<span class=\"token punctuation\">.</span>totalSize <span class=\"token operator\">=</span> leftTotal <span class=\"token operator\">+</span> rightTotal <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">return</span> fac<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">.</span>totalSize <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> facInv<span class=\"token punctuation\">[</span>leftTotal<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span> <span class=\"token operator\">*</span> facInv<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">.</span>totalSize <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> leftTotal<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>lAns <span class=\"token operator\">*</span> rAns <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">// 快速幂：a^x % mod</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">long</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">long</span> base <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                ans <span class=\"token operator\">=</span> ans <span class=\"token operator\">*</span> base <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            base <span class=\"token operator\">=</span> base <span class=\"token operator\">*</span> base <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            x <span class=\"token operator\">>>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fa<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        fa <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            fa<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token keyword\">int</span> lAncestor <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token keyword\">int</span> rAncestor <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        fa<span class=\"token punctuation\">[</span>lAncestor<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rAncestor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token keyword\">return</span> fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token class-name\">TreeNode</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token class-name\">TreeNode</span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token keyword\">int</span> totalSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>v <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note info\">\n<p><strong>并查集 + 数学</strong></p>\n<ul>\n<li><a href=\"/2023/05/29/algorithm/%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E9%81%8D%E5%8E%86\">最大公约数遍历</a></li>\n<li><a href=\"/2023/06/01/algorithm/%E5%9F%83%E5%BC%8F%E7%AD%9B-%E5%B8%A6%E9%98%88%E5%80%BC%E7%9A%84%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7\">埃式筛 - 带阈值的图连通性</a></li>\n<li><a href=\"/2023/06/01/algorithm/%E6%8C%89%E5%85%AC%E5%9B%A0%E6%95%B0%E8%AE%A1%E7%AE%97%E6%9C%80%E5%A4%A7%E7%BB%84%E4%BB%B6%E5%A4%A7%E5%B0%8F\">按公因数计算最大组件大小</a></li>\n<li><a href=\"/2023/06/08/algorithm/%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%85%AC%E5%9B%A0%E6%95%B0%E6%8E%92%E5%BA%8F\">数组的最大公因数排序</a></li>\n<li><a href=\"/2023/06/03/algorithm/%E4%B9%98%E6%B3%95%E9%80%86%E5%85%83%EF%BC%8C%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86%EF%BC%8C%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%8C%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%B0%86%E5%AD%90%E6%95%B0%E7%BB%84%E9%87%8D%E6%96%B0%E6%8E%92%E5%BA%8F%E5%BE%97%E5%88%B0%E5%90%8C%E4%B8%80%E4%B8%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%96%B9%E6%A1%88%E6%95%B0\">乘法逆元，费马小定理，并查集，动态规划 - 将子数组重新排序得到同一个二叉搜索树的方案数</a></li>\n</ul>\n</div>\n",
            "tags": [
                "算法",
                "动态规划",
                "困难",
                "并查集",
                "数学"
            ]
        },
        {
            "id": "https://www.htired.top/2023/06/02/os/5%E3%80%81%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86/",
            "url": "https://www.htired.top/2023/06/02/os/5%E3%80%81%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86/",
            "title": "5、设备管理",
            "date_published": "2023-06-02T08:00:04.000Z",
            "content_html": "<p><strong>操作系统对外部硬件的设备管理</strong></p>\n<h1 id=\"io-设备的基本概念与分类\"><a class=\"anchor\" href=\"#io-设备的基本概念与分类\">#</a> I/O 设备的基本概念与分类</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230221230915562.png\" alt=\"image-20230221230915562\" /></p>\n<h2 id=\"什么是-io-设备\"><a class=\"anchor\" href=\"#什么是-io-设备\">#</a> 什么是 I/O 设备</h2>\n<p>“I/O” 就是 “输入 / 输出”（Input/Output）</p>\n<p><code>I/O</code>  设备就是可以将数据输入到计算机，或者可以接收计算机输出数据的外部设备，属于计算机中的硬件部件。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230221231118977.png\" alt=\"image-20230221231118977\" /></p>\n<hr />\n<p><code>UNIX</code>  系统将外部设备抽象为一种特殊的文件，用户可以使用与文件操作相同的方式对外部设备进行操作。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230221231250529.png\" alt=\"image-20230221231250529\" /></p>\n<h2 id=\"按使用特性分类\"><a class=\"anchor\" href=\"#按使用特性分类\">#</a> 按使用特性分类</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230221231420741.png\" alt=\"image-20230221231420741\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230221231424858.png\" alt=\"image-20230221231424858\" /></p>\n<hr />\n<h2 id=\"按传输速率分类\"><a class=\"anchor\" href=\"#按传输速率分类\">#</a> 按传输速率分类</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230221231513131.png\" alt=\"image-20230221231513131\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230221231515433.png\" alt=\"image-20230221231515433\" /></p>\n<h2 id=\"按信息交换的单元分类\"><a class=\"anchor\" href=\"#按信息交换的单元分类\">#</a> 按信息交换的单元分类</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230221232006907.png\" alt=\"image-20230221232006907\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230221232009054.png\" alt=\"image-20230221232009054\" /></p>\n<hr />\n<h2 id=\"整体框架\"><a class=\"anchor\" href=\"#整体框架\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230221232905773.png\" alt=\"image-20230221232905773\" /></p>\n<hr />\n<h1 id=\"io-控制器\"><a class=\"anchor\" href=\"#io-控制器\">#</a> I/O 控制器</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230221233053098.png\" alt=\"image-20230221233053098\" /></p>\n<h2 id=\"io-设备的机械部件\"><a class=\"anchor\" href=\"#io-设备的机械部件\">#</a> I/O 设备的机械部件</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230221233232337.png\" alt=\"image-20230221233232337\" /></p>\n<p><code>I/O</code>  设备的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>机械部件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}机械部件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">机械部件</span></span></span></span>主要用来执行具体  <code>l/O</code>  操作。</p>\n<ul>\n<li>如我们看得见摸得着的鼠标 / 键盘的按钮；显示器的 LED 屏；移动硬盘的磁臂、磁盘盘面。</li>\n</ul>\n<p><code>I/O</code>  设备的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>电子部件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}电子部件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">电子部件</span></span></span></span>通常是一块插入主板扩充槽的印刷电路板。</p>\n<hr />\n<h2 id=\"io-设备的电子部件io-控制器\"><a class=\"anchor\" href=\"#io-设备的电子部件io-控制器\">#</a> I/O 设备的电子部件（I/O 控制器）</h2>\n<p><code>CPU</code>  无法直接控制  <code>I/O</code>  设备的机械部件，因此  <code>I/O</code>  设备还要有一个电子部件作为  <code>CPU</code>  和  <code>I/O</code>  设备机械部件之间的 “中介”，用于实现  <code>CPU</code>  对设备的控制。</p>\n<p>这个电子部件就是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mi>I</mi><mi mathvariant=\"normal\">/</mi><mi>O</mi><mtext>控制器</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}I/O 控制器</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;color:red;\">I</span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">O</span><span class=\"mord cjk_fallback\" style=\"color:red;\">控制器</span></span></span></span>，又称<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>设备控制器</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}设备控制器</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">设备控制器</span></span></span></span>。</p>\n<p><code>CPU</code>  可控制  <code>I/O</code>  控制器，又由  <code>I/O</code>  控制器来控制设备的机械部件。</p>\n<h2 id=\"io-控制器的功能\"><a class=\"anchor\" href=\"#io-控制器的功能\">#</a> I/O 控制器的功能</h2>\n<p>① 接受和识别  <code>CPU</code>  发出的命令</p>\n<p>如  <code>CPU</code>  发来的 read/write 命令， <code>I/O</code>  控制器中会有相应的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>控制寄存器</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}控制寄存器</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">控制寄存器</span></span></span></span>存放命令和参数</p>\n<p>② 向  <code>CPU</code>  报告设备的状态</p>\n<p><code>I/O</code>  控制器中会有相应的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>状态寄存器</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}状态寄存器</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">状态寄存器</span></span></span></span>。用于记录  <code>I/O</code>  设备的当前状态。</p>\n<ul>\n<li>如：1 表示空闲， 0 表示忙碌</li>\n</ul>\n<p>③ 数据交换</p>\n<p><code>I/O</code>  控制器中会设置相应的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>数据寄存器</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}数据寄存器</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">数据寄存器</span></span></span></span>。</p>\n<ul>\n<li>输出时，数据寄存器用于暂存  <code>CPU</code>  发来的数据，之后再由控制器传送设备。</li>\n<li>输入时，数据寄存器用于暂存设备发来的数据，之后  <code>CPU</code>  从数据寄存器中取走数据。</li>\n</ul>\n<p>④ 地址识别</p>\n<p>类似于内存的地址，<strong>为了区分设备控制器中的各个寄存器</strong>，也需要给各个寄存器设置一个特定的 “地址”。</p>\n<p><code>I/O</code>  控制器通过  <code>CPU</code>  提供的 “地址” 来判断  <code>CPU</code>  要读 / 写的是哪个寄存器</p>\n<hr />\n<h2 id=\"io-控制器的组成\"><a class=\"anchor\" href=\"#io-控制器的组成\">#</a> I/O 控制器的组成</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230221234752599.png\" alt=\"image-20230221234752599\" /></p>\n<p>小细节：</p>\n<p>① 一个 I/O 可能会对应多个设备；</p>\n<p>② 数据寄存器、控制寄存器、状态寄存器可能有多个（如：每个控制 / 状态寄存器对应一个具体的设备），且<strong>这些寄存器都要有相应的地址</strong>，才能方便  <code>CPU</code>  操作。</p>\n<ul>\n<li>有的计算机会让这些寄存器占用内存地址的一部分，称为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>内存映像</mtext><mi>I</mi><mi mathvariant=\"normal\">/</mi><mi>O</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}内存映像 I/O</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">内存映像</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;color:red;\">I</span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">O</span></span></span></span>；</li>\n<li>另一些计算机则采用  <code>I/O</code>  专用地址，即<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>寄存器独立编址</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}寄存器独立编址</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">寄存器独立编址</span></span></span></span>。</li>\n</ul>\n<h2 id=\"内存映像-io-与-寄存器独立编址\"><a class=\"anchor\" href=\"#内存映像-io-与-寄存器独立编址\">#</a> 内存映像 I/O 与 寄存器独立编址</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230221235443075.png\" alt=\"image-20230221235443075\" /></p>\n<h2 id=\"整体框架-2\"><a class=\"anchor\" href=\"#整体框架-2\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230222000150951.png\" alt=\"image-20230222000150951\" /></p>\n<h1 id=\"io-控制方式\"><a class=\"anchor\" href=\"#io-控制方式\">#</a> I/O 控制方式</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230228205610272.png\" alt=\"image-20230228205610272\" /></p>\n<p>即：用什么样的方式来控制  <code>I/O</code>  设备的数据读 / 写</p>\n<p>需要注意的问题:</p>\n<ol>\n<li>完成一次读 / 写操作的流程；</li>\n<li><code>CPU</code>  干预的频率；</li>\n<li>数据传送的单位；</li>\n<li>数据的流向；</li>\n<li>主要缺点和主要优点。</li>\n</ol>\n<hr />\n<h2 id=\"程序直接控制方式\"><a class=\"anchor\" href=\"#程序直接控制方式\">#</a> 程序直接控制方式</h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mi>K</mi><mi>e</mi><mi>y</mi><mi>w</mi><mi>o</mi><mi>r</mi><mi>d</mi><mtext>：轮询</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}Key word：轮询</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:red;\">Key</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;color:red;\">w</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">or</span><span class=\"mord mathnormal\" style=\"color:red;\">d</span><span class=\"mord cjk_fallback\" style=\"color:red;\">：轮询</span></span></span></span></p>\n<p>① 完成一次读 / 写操作的流程（以<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>读操作</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}读操作</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">读操作</span></span></span></span>为例）</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230228220356488.png\" alt=\"image-20230228220356488\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230228220901015.png\" alt=\"image-20230228220901015\" /></p>\n<hr />\n<p>②  <code>CPU</code>  干预的频率</p>\n<p>很频繁， <code>I/O</code>  操作开始之前、完成之后需要  <code>CPU</code>  介入，并且<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>在等待</mtext><mi mathvariant=\"normal\">‘</mi><mi>l</mi><mi mathvariant=\"normal\">/</mi><mi>O</mi><mi mathvariant=\"normal\">‘</mi><mtext>完成的过程中</mtext><mi mathvariant=\"normal\">‘</mi><mi>C</mi><mi>P</mi><mi>U</mi><mi mathvariant=\"normal\">‘</mi><mtext>需要不断地轮询检查</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}在等待 `l/O` 完成的过程中 `CPU` 需要不断地轮询检查</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">在等待</span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:red;\">l</span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">O</span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord cjk_fallback\" style=\"color:red;\">完成的过程中</span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">CP</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:red;\">U</span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord cjk_fallback\" style=\"color:red;\">需要不断地轮询检查</span></span></span></span></p>\n<hr />\n<p>③ 数据传送的单位</p>\n<hr />\n<p>④ 数据的流向</p>\n<p>读操作（数据输入）：I/O 设备 -&gt; CPU（<strong>指的是 CPU 的寄存器</strong>） -&gt; 内存</p>\n<p>写操作（数据输出）：内存 -&gt; CPU -&gt; I/O 设备</p>\n<p>每个字的读 / 写都需要 CPU 的帮助</p>\n<hr />\n<p>⑤ 主要缺点和主要优点</p>\n<p>优点：实现简单。在读 / 写指令之后，加上实现循环检查的一系列指令即可</p>\n<ul>\n<li>因此才称为 “程序直接控制方式”</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>缺点：</mtext><mi mathvariant=\"normal\">‘</mi><mi>C</mi><mi>P</mi><mi>U</mi><mi mathvariant=\"normal\">‘</mi><mtext>和</mtext><mi mathvariant=\"normal\">‘</mi><mi>I</mi><mi mathvariant=\"normal\">/</mi><mi>O</mi><mi mathvariant=\"normal\">‘</mi><mtext>设备只能串行工作，</mtext><mi mathvariant=\"normal\">‘</mi><mi>C</mi><mi>P</mi><mi>U</mi><mi mathvariant=\"normal\">‘</mi><mtext>需要一直轮询检查，长期处于“忙等”状态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}缺点：`CPU` 和 `I/O` 设备只能串行工作，`CPU` 需要一直轮询检查，长期处于“忙等”状态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">缺点：</span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">CP</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:red;\">U</span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord cjk_fallback\" style=\"color:red;\">和</span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;color:red;\">I</span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">O</span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord cjk_fallback\" style=\"color:red;\">设备只能串行工作，</span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">CP</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:red;\">U</span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord cjk_fallback\" style=\"color:red;\">需要一直轮询检查，长期处于</span><span class=\"mord\" style=\"color:red;\">“</span><span class=\"mord cjk_fallback\" style=\"color:red;\">忙等</span><span class=\"mord\" style=\"color:red;\">”</span><span class=\"mord cjk_fallback\" style=\"color:red;\">状态</span></span></span></span>， <code>CPU</code>  利用率低。</p>\n<hr />\n<h2 id=\"中断驱动方式\"><a class=\"anchor\" href=\"#中断驱动方式\">#</a> 中断驱动方式</h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mi>K</mi><mi>e</mi><mi>y</mi><mi>w</mi><mi>o</mi><mi>r</mi><mi>d</mi><mtext>：中断</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}Key word：中断</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:red;\">Key</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;color:red;\">w</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">or</span><span class=\"mord mathnormal\" style=\"color:red;\">d</span><span class=\"mord cjk_fallback\" style=\"color:red;\">：中断</span></span></span></span></p>\n<p>引入<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>中断机制</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}中断机制</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">中断机制</span></span></span></span>。由于  <code>I/O</code>  设备速度很慢，因此在  <code>CPU</code>  发出读 / 写命令后，可<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>将等待</mtext><mi mathvariant=\"normal\">‘</mi><mi>l</mi><mi mathvariant=\"normal\">/</mi><mi>O</mi><mi mathvariant=\"normal\">‘</mi><mtext>的进程阻塞</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}将等待 `l/O` 的进程阻塞</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">将等待</span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:red;\">l</span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">O</span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord cjk_fallback\" style=\"color:red;\">的进程阻塞</span></span></span></span>，先切换到别的进程执行。当  <code>I/O</code>  完成后，控制器会向  <code>CPU</code>  发出一个中断信号， <code>CPU</code>  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>检测到中断信号后</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}检测到中断信号后</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">检测到中断信号后</span></span></span></span>，会保存当前进程的运行环境信息，转去执行中断处理程序处理该中断。处理中断的过程中， <code>CPU</code>  从  <code>I/O</code>  控制器读<strong>一个字</strong>的数据传送到  <code>CPU</code>  寄存器，再写入主存。接着，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mi mathvariant=\"normal\">‘</mi><mi>C</mi><mi>P</mi><mi>U</mi><mi mathvariant=\"normal\">‘</mi><mtext>恢复等待</mtext><mi mathvariant=\"normal\">‘</mi><mi>I</mi><mi mathvariant=\"normal\">/</mi><mi>O</mi><mi mathvariant=\"normal\">‘</mi><mtext>的进程（或其他进程）的运行环境，然后继续执行</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}`CPU` 恢复等待 `I/O` 的进程（或其他进程）的运行环境，然后继续执行</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">CP</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:red;\">U</span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord cjk_fallback\" style=\"color:red;\">恢复等待</span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;color:red;\">I</span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">O</span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord cjk_fallback\" style=\"color:red;\">的进程（或其他进程）的运行环境，然后继续执行</span></span></span></span>。</p>\n<ul>\n<li>也可以选择不回复它，让它在就绪队列中继续等待，先执行别的进程</li>\n<li>若存储字长 32 位的话，1 个字等于 4 字节</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230228222144531.png\" alt=\"image-20230228222144531\" /></p>\n<p>注意:</p>\n<p>①  <code>CPU</code>  会在每个指令周期的末尾检查中断；<br />\n② 中断处理过程中需要保存、恢复进程的运行环境，这个过程是需要一定时间开销的。可见，如果中断发生的频率太高，也会降低系统性能。</p>\n<hr />\n<p>②  <code>CPU</code>  干预的频率</p>\n<p>每次  <code>I/O</code>  操作开始之前、完成之后需要  <code>CPU</code>  介入。<br />\n等待  <code>I/O</code>  完成的过程中  <code>CPU</code>  可以切换到别的进程执行。</p>\n<p>③ 数据传送的单位</p>\n<p>每次读 / 写一个字</p>\n<p>④ 数据的流向</p>\n<p>读操作（数据输入）：I/O 设备 -&gt; CPU（<strong>指的是 CPU 的寄存器</strong>） -&gt; 内存</p>\n<p>写操作（数据输出）：内存 -&gt; CPU -&gt; I/O 设备</p>\n<p>⑤ 主要缺点和主要优点</p>\n<p>优点：与 “程序直接控制方式” 相比，在 “中断驱动方式” 中， <code>I/O</code>  控制器会通过中断信号主动报告  <code>I/O</code>  已完成， <code>CPU</code>  不再需要不停地轮询。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mi mathvariant=\"normal\">‘</mi><mi>C</mi><mi>P</mi><mi>U</mi><mi mathvariant=\"normal\">‘</mi><mtext>和</mtext><mi mathvariant=\"normal\">‘</mi><mi>I</mi><mi mathvariant=\"normal\">/</mi><mi>O</mi><mi mathvariant=\"normal\">‘</mi><mtext>设备可并行工作</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}`CPU` 和 `I/O` 设备可并行工作</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">CP</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:red;\">U</span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord cjk_fallback\" style=\"color:red;\">和</span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;color:red;\">I</span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">O</span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord cjk_fallback\" style=\"color:red;\">设备可并行工作</span></span></span></span>， <code>CPU</code>  利用率得到明显提升。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>缺点</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}缺点</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">缺点</span></span></span></span>：<strong>每个字</strong>在  <code>I/O</code>  设备与内存之间的传输，都需要经过  <code>CPU</code>  。而<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>频繁的中断处理会消耗较多的</mtext><mi mathvariant=\"normal\">‘</mi><mi>C</mi><mi>P</mi><mi>U</mi><mi mathvariant=\"normal\">‘</mi><mtext>时间</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}频繁的中断处理会消耗较多的 `CPU` 时间</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">频繁的中断处理会消耗较多的</span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">CP</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:red;\">U</span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord cjk_fallback\" style=\"color:red;\">时间</span></span></span></span>。</p>\n<hr />\n<h2 id=\"dma-方式\"><a class=\"anchor\" href=\"#dma-方式\">#</a> DMA 方式</h2>\n<p>与 “中断驱动方式” 相比，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mi mathvariant=\"normal\">‘</mi><mi>D</mi><mi>M</mi><mi>A</mi><mi mathvariant=\"normal\">‘</mi><mtext>方式</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}`DMA` 方式</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">D</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:red;\">M</span><span class=\"mord mathnormal\" style=\"color:red;\">A</span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord cjk_fallback\" style=\"color:red;\">方式</span></span></span></span>（Direct Memory Access，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>直接存储器存取</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}直接存储器存取</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">直接存储器存取</span></span></span></span>。主要用于块设备的  <code>I/O</code>  控制）有这样几个改进:</p>\n<p>① <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>数据的传送单位是“块”</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}数据的传送单位是“块”</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">数据的传送单位是</span><span class=\"mord\" style=\"color:red;\">“</span><span class=\"mord cjk_fallback\" style=\"color:red;\">块</span><span class=\"mord\" style=\"color:red;\">”</span></span></span></span>。不再是一个字、一个字的传送；</p>\n<p>② 数据的流向是<strong>从设备直接放入内存，或者从内存直接到设备</strong>。不再需要  <code>CPU</code>  作为 “快递小哥”。</p>\n<p>③ 仅在传送一个或多个数据块的开始和结束时，才需要  <code>CPU</code>  干预。</p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230228223141458.png\" alt=\"image-20230228223141458\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230228223718028.png\" alt=\"image-20230228223718028\" /></p>\n<p><code>DR</code>  （Data Register，数据寄存器）∶暂存从设备到内存，或从内存到设备的数据。</p>\n<p><code>MAR</code> （Memory Address Register，内存地址寄存器)∶</p>\n<ul>\n<li>在输入时， <code>MAR</code>  表示数据应放到内存中的什么位置；</li>\n<li>输出时  <code>MAR</code>  表示要输出的数据放在内存中的什么位置。</li>\n</ul>\n<p><code>DC</code> （Data Counter，数据计数器）：表示剩余要读 / 写的字节数。</p>\n<p><code>CR</code>  （Command Register，命令 / 状态寄存器)∶用于存放  <code>CPU</code>  发来的  <code>I/O</code>  命令，或设备的状态信息。</p>\n<hr />\n<p>其实  <code>DMA</code>  控制器在读入数据的过程中，也是一个字一个字读入的，每次读入的一个字放在  <code>DR</code>  中，再从  <code>DR</code>  写入到内存当中</p>\n<hr />\n<p>②  <code>CPU</code>  干预的频率</p>\n<p>仅在传送一个或多个数据块的开始和结束时，才需要 CPU 千预。</p>\n<p>③ 数据传送的单位</p>\n<p>每次读 / 写<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>一个或多个块（注意：每次读写的只能是连续的多个块</mtext><mo separator=\"true\">,</mo><mtext>且这些块读入内存后在内存中也必须是连续的</mtext><mo stretchy=\"false\">)</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}一个或多个块（注意：每次读写的只能是连续的多个块,且这些块读入内存后在内存中也必须是连续的)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">一个或多个块（注意：每次读写的只能是连续的多个块</span><span class=\"mpunct\" style=\"color:red;\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">且这些块读入内存后在内存中也必须是连续的</span><span class=\"mclose\" style=\"color:red;\">)</span></span></span></span></p>\n<ul>\n<li>若采用离散的方式的话，同样需要  <code>CPU</code>  发送多条  <code>I/O</code>  指令</li>\n</ul>\n<p>④ 数据的流向（不再需要经过 CPU）</p>\n<p>读操作（数据输入）： <code>l/O</code>  设备 -&gt; 内存</p>\n<p>写操作（数据输出）：内存 -&gt;  <code>I/O</code>  设备</p>\n<p>⑤ 主要缺点和主要优点</p>\n<p>优点：数据传输以 “块” 为单位， <code>CPU</code>  介入频率进一步降低。数据的传输不再需要先经过  <code>CPU</code>  再写入内存，数据传输效率进一步增加。 <code>CPU</code>  和  <code>I/O</code>  设备的并行性得到提升。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>缺点</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}缺点</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">缺点</span></span></span></span>： <code>CPU</code>  每发出一条  <code>I/O</code>  指令，只能读 / 写一个或多个连续的数据块。</p>\n<p>如果要读 / 写多个离散存储的数据块，或者要将数据分别写到不同的内存区域时， <code>CPU</code>  要分别发出多条  <code>I/O</code>  指令，进行多次中断处理才能完成。</p>\n<hr />\n<h2 id=\"通道控制方式\"><a class=\"anchor\" href=\"#通道控制方式\">#</a> 通道控制方式</h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>通道</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}通道</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">通道</span></span></span></span>：一种<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>硬件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}硬件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">硬件</span></span></span></span>，可以理解为是 “<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>弱鸡版的</mtext><mi>C</mi><mi>P</mi><mi>U</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}弱鸡版的 CPU</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">弱鸡版的</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">CP</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:red;\">U</span></span></span></span>”。通道可以识别并执行一系列<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>通道指令</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}通道指令</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">通道指令</span></span></span></span></p>\n<p>与  <code>CPU</code>  相比，通道可以执行的指令很单一，并且通道程序是放在主机内存中的，也就是说通道与  <code>CPU</code>  共享内存</p>\n<ul>\n<li>\n<p>通道 = 弱鸡版  <code>CPU</code></p>\n</li>\n<li>\n<p>通道程序 = 任务清单</p>\n</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230228224826849.png\" alt=\"image-20230228224826849\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230228224909553.png\" alt=\"image-20230228224909553\" /></p>\n<p>②  <code>CPU</code>  干预的频率</p>\n<p>极低，通道会根据  <code>CPU</code>  的指示执行相应的通道程序，只有完成一组数据块的读 / 写后才需要发出中断信号，请求 <code>CPU</code>  干预。</p>\n<p>③ 数据传送的单位</p>\n<p>每次读 / 写<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>一组数据块</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}一组数据块</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">一组数据块</span></span></span></span></p>\n<p>④ 数据的流向（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>在通道的控制下进行</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}在通道的控制下进行</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">在通道的控制下进行</span></span></span></span>）</p>\n<p>读操作（数据输入）： <code>l/O</code>  设备 -&gt; 内存</p>\n<p>写操作（数据输出）：内存 -&gt;  <code>I/O</code>  设备</p>\n<p>⑤ 主要缺点和主要优点</p>\n<p>缺点：实现复杂，需要专门的通道硬件支持</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>优点：</mtext><mi mathvariant=\"normal\">‘</mi><mi>C</mi><mi>P</mi><mi>U</mi><mi mathvariant=\"normal\">‘</mi><mtext>、通道、</mtext><mi mathvariant=\"normal\">‘</mi><mi>I</mi><mi mathvariant=\"normal\">/</mi><mi>O</mi><mi mathvariant=\"normal\">‘</mi><mtext>设备可并行工作，资源利用率很高</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}优点：`CPU`、通道、`I/O` 设备可并行工作，资源利用率很高</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">优点：</span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">CP</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:red;\">U</span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord cjk_fallback\" style=\"color:red;\">、通道、</span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;color:red;\">I</span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">O</span><span class=\"mord\" style=\"color:red;\">‘</span><span class=\"mord cjk_fallback\" style=\"color:red;\">设备可并行工作，资源利用率很高</span></span></span></span>。</p>\n<hr />\n<h2 id=\"整体框架-3\"><a class=\"anchor\" href=\"#整体框架-3\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230228231326011.png\" alt=\"image-20230228231326011\" /></p>\n<h1 id=\"i-0-软件层次结构\"><a class=\"anchor\" href=\"#i-0-软件层次结构\">#</a> I-0 软件层次结构</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230228233253369.png\" alt=\"image-20230228233253369\" /></p>\n<h2 id=\"用户层软件\"><a class=\"anchor\" href=\"#用户层软件\">#</a> 用户层软件</h2>\n<p>用户层软件<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>实现了与用户交互的接口</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}实现了与用户交互的接口</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">实现了与用户交互的接口</span></span></span></span>，用户可直接使用该层提供的、与  <code>I/O</code>  操作相关的库函数对设备进行操作</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230228233508504.png\" alt=\"image-20230228233508504\" /></p>\n<hr />\n<h2 id=\"设备独立性软件逻辑设备表lut\"><a class=\"anchor\" href=\"#设备独立性软件逻辑设备表lut\">#</a> 设备独立性软件，逻辑设备表（LUT）</h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>设备独立性软件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}设备独立性软件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">设备独立性软件</span></span></span></span>，又称<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>设备无关性软件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}设备无关性软件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">设备无关性软件</span></span></span></span>。与设备的硬件特性无关的功能几乎都在这一层实现。</p>\n<p>主要实现的功能：</p>\n<p>① 向上层提供统一的调用接口（如  <code>read/write</code>  系统调用）</p>\n<p>② 设备的保护</p>\n<p>原理类似与文件保护。设备被看做是一种特殊的文件，不同用户对各个文件的访问权限是不一样的，<strong>同理，对设备的访问权限也不一样。</strong></p>\n<p>③ 差错处理</p>\n<p>设备独立性软件需要对一些设备的错误进行处理</p>\n<p>④ 设备的分配与回收</p>\n<p>⑤ 数据缓冲区管理</p>\n<p>可以通过缓冲技术屏蔽设备之间数据交换单位大小和传输速度的差异</p>\n<p>⑥ <strong>建立逻辑设备名到物理设备名的映射关系</strong>；根据设备类型选择调用相应的驱动程序</p>\n<p>用户或用户层软件发出  <code>I/O</code>  操作相关系统调用的系统调用时，需要指明此次要操作的  <code>I/O</code>  设备的逻辑设备名</p>\n<ul>\n<li>eg：去学校打印店打印时，需要选择打印机 1 / 打印机 2 / 打印机 3 ，其实这些都是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>逻辑设备名</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}逻辑设备名</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">逻辑设备名</span></span></span></span></li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>设备独立性软件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}设备独立性软件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">设备独立性软件</span></span></span></span>需要通过 “<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>逻辑设备表（</mtext><mi>L</mi><mi>U</mi><mi>T</mi><mtext>，</mtext><mi>L</mi><mi>o</mi><mi>g</mi><mi>i</mi><mi>c</mi><mi>a</mi><mi>l</mi><mi>U</mi><mi>n</mi><mi>i</mi><mi>t</mi><mi>T</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi><mtext>）</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}逻辑设备表（LUT，Logical UnitTable）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">逻辑设备表（</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:red;\">LU</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">T</span><span class=\"mord cjk_fallback\" style=\"color:red;\">，</span><span class=\"mord mathnormal\" style=\"color:red;\">L</span><span class=\"mord mathnormal\" style=\"color:red;\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:red;\">g</span><span class=\"mord mathnormal\" style=\"color:red;\">i</span><span class=\"mord mathnormal\" style=\"color:red;\">c</span><span class=\"mord mathnormal\" style=\"color:red;\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:red;\">l</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:red;\">U</span><span class=\"mord mathnormal\" style=\"color:red;\">ni</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">tT</span><span class=\"mord mathnormal\" style=\"color:red;\">ab</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:red;\">l</span><span class=\"mord mathnormal\" style=\"color:red;\">e</span><span class=\"mord cjk_fallback\" style=\"color:red;\">）</span></span></span></span>” 来确定逻辑设备对应的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>物理设备</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}物理设备</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">物理设备</span></span></span></span>，并找到该设备对应的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>设备驱动程序</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}设备驱动程序</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">设备驱动程序</span></span></span></span></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230228234247127.png\" alt=\"image-20230228234247127\" /></p>\n<p>操作系统系统可以采用两种方式管理 $\\color {red} 逻辑设备表（LUT) $:</p>\n<p>第一种方式，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>整个系统只设置一张</mtext><mi>L</mi><mi>U</mi><mi>T</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}整个系统只设置一张 LUT</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">整个系统只设置一张</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:red;\">LU</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">T</span></span></span></span>，这就意味着所有用户不能使用相同的逻辑设备名，因此这种方式只适用于单用户操作系统。</p>\n<p>第二种方式，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>为每个用户设置一张</mtext><mi>L</mi><mi>U</mi><mi>T</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}为每个用户设置一张 LUT</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">为每个用户设置一张</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:red;\">LU</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">T</span></span></span></span>，各个用户使用的逻辑设备名可以重复，适用于多用户操作系统。</p>\n<ul>\n<li>系统会在用户登录时为其建立一个用户管理进程，而  <code>LUT</code>  就存放在用户管理进程的  <code>PCB</code>  中。</li>\n</ul>\n<p>类似于单级目录和两级目录</p>\n<hr />\n<h2 id=\"不同类型的-io-设备需要有不同的驱动程序处理设备驱动程序\"><a class=\"anchor\" href=\"#不同类型的-io-设备需要有不同的驱动程序处理设备驱动程序\">#</a> 不同类型的 I/O 设备需要有不同的驱动程序处理？（设备驱动程序）</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230228234624484.png\" alt=\"image-20230228234624484\" /></p>\n<p>各式各样的设备，外形不同，其内部的电子部件（ <code>I/O</code>  控制器）也有可能不同</p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230228234743751.png\" alt=\"image-20230228234743751\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230228234827726.png\" alt=\"image-20230228234827726\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230228234921244.png\" alt=\"image-20230228234921244\" /></p>\n<p><strong>就是  <code>I/O</code>  控制器可能不相同</strong></p>\n<p>不同设备的内部硬件特性也不同，这些特性只有厂家才知道，因此厂家须提供与设备相对应的驱动程序， <code>CPU</code>  执行驱动程序的指令序列，来完成设置设备寄存器，检查设备状态等工作</p>\n<ul>\n<li>例如：鼠标或者键盘，当  <code>usb</code>  插入到电脑的时候，右下角会有正在安装驱动程序的提示</li>\n</ul>\n<hr />\n<h2 id=\"设备驱动程序\"><a class=\"anchor\" href=\"#设备驱动程序\">#</a> 设备驱动程序</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230228235203660.png\" alt=\"image-20230228235203660\" /></p>\n<p>注：驱动程序一般会以一个独立进程的方式存在</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230228234247127.png\" alt=\"image-20230228234247127\" /></p>\n<h2 id=\"中断处理程序\"><a class=\"anchor\" href=\"#中断处理程序\">#</a> 中断处理程序</h2>\n<p>当  <code>I/O</code>  任务完成时， <code>l/O</code>  控制器会发送一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>中断信号</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}中断信号</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">中断信号</span></span></span></span>，系统会<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>根据中断信号类型</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}根据中断信号类型</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">根据中断信号类型</span></span></span></span>找到相应的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>中断处理程序</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}中断处理程序</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">中断处理程序</span></span></span></span>并执行。中断处理程序的处理流程如下:</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230228235721872.png\" alt=\"image-20230228235721872\" /></p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230301000131129.png\" alt=\"image-20230301000131129\" /></p>\n<p>理解并记住  <code>I/O</code>  软件<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>各个层次之间的顺序</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}各个层次之间的顺序</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">各个层次之间的顺序</span></span></span></span>，要能够推理判断某个处理应该是在哪个层次完成的</p>\n<p>最常考的是设备独立性软件、设备驱动程序这两层。</p>\n<p>只需理解一个特点即可：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>直接涉及到硬件具体细节、且与中断无关的操作肯定是在设备驱动程序层完成的</mtext><mo separator=\"true\">;</mo><mtext>没有涉及硬件的、对各种设备都需要进行的管理工作都是在设备独立性软件层完成的</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}直接涉及到硬件具体细节、且与中断无关的操作肯定是在设备驱动程序层完成的;没有涉及硬件的、对各种设备都需要进行的管理工作都是在设备独立性软件层完成的</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">直接涉及到硬件具体细节、且与中断无关的操作肯定是在设备驱动程序层完成的</span><span class=\"mpunct\" style=\"color:red;\">;</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">没有涉及硬件的、对各种设备都需要进行的管理工作都是在设备独立性软件层完成的</span></span></span></span></p>\n<h1 id=\"i-o-核心子系统\"><a class=\"anchor\" href=\"#i-o-核心子系统\">#</a> I-O 核心子系统</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318174102667.png\" alt=\"image-20230318174102667\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318174241557.png\" alt=\"image-20230318174241557\" /></p>\n<p>注：假脱机技术（ <code>SPOOLing</code>  技术）需要请求 “磁盘设备” 的设备独立性软件的服务，因此一般来说假脱机技术是在用户层软件实现的。但是 408 大纲又将假脱机技术归为 “I/O 核心子系统” 的功能，因此考试时还是以大纲为准。</p>\n<hr />\n<h2 id=\"io-调度\"><a class=\"anchor\" href=\"#io-调度\">#</a> I/O 调度</h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mi>I</mi><mi mathvariant=\"normal\">/</mi><mi>O</mi><mtext>调度：用某种算法确定一个好的顺序来处理各个</mtext><mi>l</mi><mi mathvariant=\"normal\">/</mi><mi>O</mi><mtext>请求。</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}I/O 调度：用某种算法确定一个好的顺序来处理各个 l/O 请求。</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;color:red;\">I</span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">O</span><span class=\"mord cjk_fallback\" style=\"color:red;\">调度：用某种算法确定一个好的顺序来处理各个</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:red;\">l</span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">O</span><span class=\"mord cjk_fallback\" style=\"color:red;\">请求。</span></span></span></span></p>\n<p>如：磁盘调度（先来先服务算法、最短寻道优先算法、SCAN 算法、C-SCAN 算法、LOOK 算法 C-LOOK 算法）。当多个磁盘  <code>I/O</code>  请求到来时，用某种调度算法确定满足  <code>l/O</code>  请求的顺序。</p>\n<p>同理，打印机等设备也可以用先来先服务算法、优先级算法、短作业优先等算法来确定  <code>l/O</code>  调度顺序。</p>\n<hr />\n<h2 id=\"设备保护\"><a class=\"anchor\" href=\"#设备保护\">#</a> 设备保护</h2>\n<p>操作系统需要实现<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>文件保护功能</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}文件保护功能</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">文件保护功能</span></span></span></span>，不同的用户对各个文件有不同的访问权限（如：只读、读和写等）。</p>\n<p>在  <code>UNIX</code>  系统中，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>设备被看做是一种特殊的文件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}设备被看做是一种特殊的文件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">设备被看做是一种特殊的文件</span></span></span></span>，每个设备也会有对应的  <code>FCB</code> 。</p>\n<ul>\n<li>当用户请求访问某个设备时，系统根据  <code>FCB</code>  中记录的信息来判断该用户是否有相应的访问权限，以此实现 “设备保护” 的功能。（参考 “<a href=\"#4.8%E3%80%81%E6%96%87%E4%BB%B6%E4%BF%9D%E6%8A%A4\">4.8、文件保护</a> ” 小节)</li>\n</ul>\n<hr />\n<h2 id=\"假脱机技术spooling-技术\"><a class=\"anchor\" href=\"#假脱机技术spooling-技术\">#</a> 假脱机技术（SPOOLing 技术）</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318174949686.png\" alt=\"image-20230318174949686\" /></p>\n<hr />\n<h3 id=\"什么是脱机技术\"><a class=\"anchor\" href=\"#什么是脱机技术\">#</a> 什么是脱机技术</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318175050072.png\" alt=\"image-20230318175050072\" /></p>\n<p>手工操作阶段：主机直接从  <code>l/O</code>  设备获得数据，由于设备速度慢，主机速度很快。人机速度矛盾明显，主机要浪费很多时间来等待设备</p>\n<hr />\n<p>批处理阶段引入了<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>脱机输入</mtext><mi mathvariant=\"normal\">/</mi><mtext>输出技术</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}脱机输入/输出技术</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">脱机输入</span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord cjk_fallback\" style=\"color:red;\">输出技术</span></span></span></span>（用磁带完成）:</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318175250570.png\" alt=\"image-20230318175250570\" /></p>\n<p>Tips：为什么称为 “脱机”―― <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>脱离主机的控制</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}脱离主机的控制</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">脱离主机的控制</span></span></span></span>进行的输入 / 输出操作。</p>\n<p>引入脱机技术后，缓解了  <code>CPU</code>  与慢速  <code>I/O</code>  设备的速度矛盾。</p>\n<ul>\n<li>另一方面，即使  <code>CPU</code>  在忙碌，也可以提前将数据输入到磁带；</li>\n<li>即使慢速的输出设备正在忙碌，也可以提前将数据输出到磁带。</li>\n</ul>\n<hr />\n<h3 id=\"假脱机技术\"><a class=\"anchor\" href=\"#假脱机技术\">#</a> 假脱机技术</h3>\n<p>“假脱机技术”，又称 “SPOOLing 技术” 是用软件的方式模拟脱机技术。 <code>SPOOLing</code>  系统的组成如下:</p>\n<hr />\n<h4 id=\"输入井和输出井\"><a class=\"anchor\" href=\"#输入井和输出井\">#</a> 输入井和输出井</h4>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318175602243.png\" alt=\"image-20230318175602243\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318175659256.png\" alt=\"image-20230318175659256\" /></p>\n<hr />\n<h4 id=\"输入进程与输出进程\"><a class=\"anchor\" href=\"#输入进程与输出进程\">#</a> 输入进程与输出进程</h4>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318175736968.png\" alt=\"image-20230318175736968\" /></p>\n<p>要实现  <code>SPOOLing</code>  技术，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>必须要有多道程序技术的支持</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}必须要有多道程序技术的支持</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">必须要有多道程序技术的支持</span></span></span></span>。系统会建立 “输入进程” 和 “输出进程”。</p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318175919640.png\" alt=\"image-20230318175919640\" /></p>\n<hr />\n<h4 id=\"输入输出缓冲区\"><a class=\"anchor\" href=\"#输入输出缓冲区\">#</a> 输入 / 输出缓冲区</h4>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318180149434.png\" alt=\"image-20230318180149434\" /></p>\n<hr />\n<h3 id=\"共享打印机原理分析\"><a class=\"anchor\" href=\"#共享打印机原理分析\">#</a> 共享打印机原理分析</h3>\n<p>独占式设备――<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>只允许各个进程串行使用的设备</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}只允许各个进程串行使用的设备</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">只允许各个进程串行使用的设备</span></span></span></span>。一段时间内只能满足一个进程的请求。</p>\n<p>共享设备――<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>允许多个进程“同时”使用的设备</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}允许多个进程“同时”使用的设备</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">允许多个进程</span><span class=\"mord\" style=\"color:red;\">“</span><span class=\"mord cjk_fallback\" style=\"color:red;\">同时</span><span class=\"mord\" style=\"color:red;\">”</span><span class=\"mord cjk_fallback\" style=\"color:red;\">使用的设备</span></span></span></span>（宏观上同时使用，微观上可能是交替使用）。可以同时满足多个进程的使用请求。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318180708641.png\" alt=\"image-20230318180708641\" /></p>\n<p>独占式设备的例子：若进程 1 正在使用打印机，则进程 2 请求使用打印机时必然阻塞等待</p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318181050755.png\" alt=\"image-20230318181050755\" /></p>\n<p>当多个用户进程提出输出打印的请求时，系统会答应它们的请求，但是并不是真正把打印机分配给他们，而是由假脱机管理进程为每个进程做两件事:</p>\n<p>(1）在磁盘输出井中为进程申请一个空闲缓冲区（也就是说，这个缓冲区是在磁盘上的），并将要打印的数据送入其中；</p>\n<p>(2）为用户进程申请一张空白的打印请求表，并将用户的打印请求填入表中（其实就是用来说明用户的打印数据存放位置等信息的），再将该表挂到假脱机文件队列上（打印任务队列）。<br />\n当打印机空闲时，输出进程会从文件队列的队头取出一张打印请求表，并根据表中的要求将要打印的数据从输出井传送到输出缓冲区，再输出到打印机进行打印。用这种方式可依次处理完全部的打印任务</p>\n<hr />\n<p>虽然系统中只有一个台打印机，但每个进程提出打印请求时，系统都会为在输出井中为其分配一个存储区（相当于分配了一个逻辑设备），使每个用户进程都觉得自己在独占一台打印机，从而实现对打印机的共享。</p>\n<hr />\n<p><code>SPOOLing</code>  技术可以把一台物理设备<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>虚拟</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}虚拟</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">虚拟</span></span></span></span>成逻辑上的多台设备，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>可将独占式设备改造成共享设备</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}可将独占式设备改造成共享设备</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">可将独占式设备改造成共享设备</span></span></span></span>。</p>\n<h3 id=\"整体框架-4\"><a class=\"anchor\" href=\"#整体框架-4\">#</a> 整体框架</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318181530354.png\" alt=\"image-20230318181530354\" /></p>\n<h2 id=\"设备的分配与回收\"><a class=\"anchor\" href=\"#设备的分配与回收\">#</a> 设备的分配与回收</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318181729558.png\" alt=\"image-20230318181729558\" /></p>\n<h3 id=\"设备分配时应考虑的因素\"><a class=\"anchor\" href=\"#设备分配时应考虑的因素\">#</a> 设备分配时应考虑的因素</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318181817129.png\" alt=\"image-20230318181817129\" /></p>\n<p>设备的固有属性可分为三种：独占设备、共享设备、虚拟设备。</p>\n<hr />\n<p><strong>设备的固有属性</strong></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>独占设备</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}独占设备</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">独占设备</span></span></span></span> ―― 一个时段只能分配给一个进程（如打印机）</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>共享设备</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}共享设备</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">共享设备</span></span></span></span> ―― 可同时分配给多个进程使用（如磁盘），各进程往往是宏观上同时共享使用设备，而微观上交替使用。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>虚拟设备</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}虚拟设备</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">虚拟设备</span></span></span></span> ―― 采用  <code>SPOOLing</code>  技术将独占设备改造成虚拟的共享设备，可同时分配给多个进程使用</p>\n<ul>\n<li>如采用 <code>SPOOLing</code>  技术实现的共享打印机</li>\n</ul>\n<hr />\n<p><strong>设备的分配算法</strong></p>\n<p>先来先服务</p>\n<p>优先级高者优先</p>\n<p>短任务优先</p>\n<hr />\n<p><strong>设备分配中的安全性</strong></p>\n<p>从进程运行的安全性上考虑，设备分配有两种方式:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>安全分配方式</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}安全分配方式</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">安全分配方式</span></span></span></span>：为进程分配一个设备后就将进程阻塞，本次  <code>I/O</code>  完成后才将进程唤醒。</p>\n<ul>\n<li>eg：考虑进程请求打印机打印输出的例子</li>\n</ul>\n<p>一个时段内每个进程只能使用一个设备</p>\n<p>优点：破坏了 “请求和保持” 条件，不会死锁<br />\n缺点：对于一个进程来说， <code>CPU</code>  和  <code>I/O</code>  设备只能串行工作</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>不安全分配方式</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}不安全分配方式</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">不安全分配方式</span></span></span></span>：进程发出  <code>I/O</code>  请求后，系统为其分配  <code>I/O</code>  设备，进程可继续执行，之后还可以发出新的  <code>l/O</code>  请求。只有某个  <code>l/O</code>  请求得不到满足时才将进程阻塞。</p>\n<p>一个进程可以同时使用多个设备</p>\n<p>优点：进程的计算任务和  <code>I/O</code>  任务可以并行处理，使进程迅速推进</p>\n<p>缺点：有可能发生死锁（死锁避免、死锁的检测和解除)</p>\n<hr />\n<h3 id=\"静态分配和动态分配\"><a class=\"anchor\" href=\"#静态分配和动态分配\">#</a> 静态分配和动态分配</h3>\n<p>静态分配：进程运行前为其分配全部所需资源，运行结束后归还资源</p>\n<ul>\n<li>破坏了 “请求和保持” 条件，不会死锁</li>\n</ul>\n<p>动态分配：进程运行过程中动态申请设备资源</p>\n<ul>\n<li>可用银行家算法或者结合资源分配图对死锁的检测和解除</li>\n</ul>\n<hr />\n<h3 id=\"设备分配管理中的数据结构\"><a class=\"anchor\" href=\"#设备分配管理中的数据结构\">#</a> 设备分配管理中的数据结构</h3>\n<p>“设备、控制器、通道” 之间的关系:</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318183344989.png\" alt=\"image-20230318183344989\" /></p>\n<p>一个通道可控制多个设备控制器，每个设备控制器可控制多个设备。</p>\n<hr />\n<h4 id=\"设备控制表dct\"><a class=\"anchor\" href=\"#设备控制表dct\">#</a> 设备控制表（DCT）</h4>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>设备控制表（</mtext><mi>D</mi><mi>C</mi><mi>T</mi><mtext>）</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}设备控制表（DCT）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">设备控制表（</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">D</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">CT</span><span class=\"mord cjk_fallback\" style=\"color:red;\">）</span></span></span></span>：系统为每个设备配置一张  <code>DCT</code> ，用于记录设备情况</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318183658426.png\" alt=\"image-20230318183658426\" /></p>\n<p>注：“进程管理” 章节中曾经提到过 “系统会根据阻塞原因不同，将进程  <code>PCB</code>  挂到不同的阻塞队列中”</p>\n<ul>\n<li>若某进程需要等待  <code>I/O</code>  设备的分配，但是这个  <code>I/O</code>  设备没法给该进程分配资源，会将该进程就会挂到这个  <code>I/O</code>  设备的设备控制表所指向的设备队列的队尾</li>\n</ul>\n<hr />\n<h4 id=\"控制器控制表coct\"><a class=\"anchor\" href=\"#控制器控制表coct\">#</a> 控制器控制表（COCT）</h4>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>控制器控制表（</mtext><mi>C</mi><mi>O</mi><mi>C</mi><mi>T</mi><mtext>）</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}控制器控制表（COCT）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">控制器控制表（</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">COCT</span><span class=\"mord cjk_fallback\" style=\"color:red;\">）</span></span></span></span>：每个设备控制器都会对应一张  <code>COCT</code> 。操作系统根据  <code>COCT</code>  的信息对控制器进行操作和管理。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318184214735.png\" alt=\"image-20230318184214735\" /></p>\n<h4 id=\"通道控制表chct\"><a class=\"anchor\" href=\"#通道控制表chct\">#</a> 通道控制表（CHCT）</h4>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>通道控制表（</mtext><mi>C</mi><mi>H</mi><mi>C</mi><mi>T</mi><mtext>）</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}通道控制表（CHCT）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">通道控制表（</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;color:red;\">C</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;color:red;\">H</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">CT</span><span class=\"mord cjk_fallback\" style=\"color:red;\">）</span></span></span></span>：每个通道都会对应一张  <code>CHCT</code> 。操作系统根据  <code>CHCT</code>  的信息对通道进行操作和管理。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318184417573.png\" alt=\"image-20230318184417573\" /></p>\n<h4 id=\"系统设备表sdt\"><a class=\"anchor\" href=\"#系统设备表sdt\">#</a> 系统设备表（SDT）</h4>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>系统设备表（</mtext><mi>S</mi><mi>D</mi><mi>T</mi><mtext>）</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}系统设备表（SDT）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">系统设备表（</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;color:red;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">D</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">T</span><span class=\"mord cjk_fallback\" style=\"color:red;\">）</span></span></span></span>：记录了<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>系统中全部设备</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}系统中全部设备</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">系统中全部设备</span></span></span></span>的情况，每个设备对应一个表目。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318184508904.png\" alt=\"image-20230318184508904\" /></p>\n<hr />\n<h3 id=\"设备分配的步骤\"><a class=\"anchor\" href=\"#设备分配的步骤\">#</a> 设备分配的步骤</h3>\n<p>① 根据进程请求的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>物理设备名</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}物理设备名</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">物理设备名</span></span></span></span>查找  <code>SDT</code> （注：物理设备名是进程请求分配设备时提供的参数)</p>\n<p>② 根据  <code>SDT</code>  找到  <code>DCT</code>  ，若<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>设备</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}设备</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">设备</span></span></span></span>忙碌则将进程  <code>PCB</code>  挂到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>设备等待队列</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}设备等待队列</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">设备等待队列</span></span></span></span>中，不忙碌则将<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>设备</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}设备</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">设备</span></span></span></span>分配给进程。</p>\n<p>③ 根据  <code>DCT</code>  找到  <code>COCT</code>  ，若<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>控制器</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}控制器</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">控制器</span></span></span></span>忙碌则将进程  <code>PCB</code>  挂到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>控制器等待队列</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}控制器等待队列</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">控制器等待队列</span></span></span></span>中，不忙碌则将<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>控制器</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}控制器</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">控制器</span></span></span></span>分配给进程。</p>\n<p>④ 根据  <code>COCT</code>  找到  <code>CHCT</code> ，若<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>通道</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}通道</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">通道</span></span></span></span>忙碌则将进程  <code>PCB</code>  挂到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>通道等待队列</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}通道等待队列</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">通道等待队列</span></span></span></span>中，不忙碌则将<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>通道</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}通道</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">通道</span></span></span></span>分配给进程。</p>\n<hr />\n<p>缺点:</p>\n<p>① 用户编程时必须使用 “物理设备名”，底层细节对用户不透明，不方便编程</p>\n<p>② 若换了一个物理设备，则程序无法运行</p>\n<p>③ 若进程请求的物理设备正在忙碌，则即使系统中还有同类型的设备，进程也必须阻塞等待</p>\n<ul>\n<li>若有 3 台打印机，若此时进程请求的是第 1 台打印机，虽然其他 2 台打印机是空闲的，但是只要第 1 台打印机是忙碌的，进程依然是要阻塞等待</li>\n</ul>\n<hr />\n<h3 id=\"设备分配步骤的改进逻辑设备表\"><a class=\"anchor\" href=\"#设备分配步骤的改进逻辑设备表\">#</a> 设备分配步骤的改进（逻辑设备表）</h3>\n<p>改进方法：建立逻辑设备名与物理设备名的映射机制，用户编程时只需提供逻辑设备名</p>\n<hr />\n<p>① 根据进程请求的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>逻辑设备名</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}逻辑设备名</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">逻辑设备名</span></span></span></span>查找  <code>SDT</code> （<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>注</mtext><mo>:</mo><mtext>用户编程时提供的逻辑设备名其实就是“设备类型”</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}注:用户编程时提供的逻辑设备名其实就是 “设备类型”</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">注</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">用户编程时提供的逻辑设备名其实就是</span><span class=\"mord\" style=\"color:red;\">“</span><span class=\"mord cjk_fallback\" style=\"color:red;\">设备类型</span><span class=\"mord\" style=\"color:red;\">”</span></span></span></span> ）</p>\n<p>② 查找  <code>SDT</code> ，找到用户进程<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>指定类型的、并且空闲</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}指定类型的、并且空闲</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">指定类型的、并且空闲</span></span></span></span>的设备，将其分配给该进程。操作系统<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>在逻辑设备表（</mtext><mi>L</mi><mi>U</mi><mi>T</mi><mtext>）中新增一个表项</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}在逻辑设备表（LUT）中新增一个表项</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">在逻辑设备表（</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:red;\">LU</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">T</span><span class=\"mord cjk_fallback\" style=\"color:red;\">）中新增一个表项</span></span></span></span>。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318185553757.png\" alt=\"image-20230318185553757\" /></p>\n<p>② 根据  <code>SDT</code>  找到  <code>DCT</code>  ，若<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>设备</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}设备</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">设备</span></span></span></span>忙碌则将进程  <code>PCB</code>  挂到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>设备等待队列</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}设备等待队列</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">设备等待队列</span></span></span></span>中，不忙碌则将<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>设备</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}设备</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">设备</span></span></span></span>分配给进程。</p>\n<p>③ 根据  <code>DCT</code>  找到  <code>COCT</code>  ，若<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>控制器</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}控制器</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">控制器</span></span></span></span>忙碌则将进程  <code>PCB</code>  挂到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>控制器等待队列</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}控制器等待队列</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">控制器等待队列</span></span></span></span>中，不忙碌则将<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>控制器</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}控制器</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">控制器</span></span></span></span>分配给进程。</p>\n<p>④ 根据  <code>COCT</code>  找到  <code>CHCT</code> ，若<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>通道</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}通道</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">通道</span></span></span></span>忙碌则将进程  <code>PCB</code>  挂到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>通道等待队列</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}通道等待队列</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">通道等待队列</span></span></span></span>中，不忙碌则将<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>通道</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}通道</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">通道</span></span></span></span>分配给进程。</p>\n<hr />\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>逻辑设备表（</mtext><mi>L</mi><mi>U</mi><mi>T</mi><mtext>）建立了逻辑设备名与物理设备名之间的映射关系。</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}逻辑设备表（LUT）建立了逻辑设备名与物理设备名之间的映射关系。</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">逻辑设备表（</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:red;\">LU</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">T</span><span class=\"mord cjk_fallback\" style=\"color:red;\">）建立了逻辑设备名与物理设备名之间的映射关系。</span></span></span></span></p>\n<p>某用户进程第一次使用设备时使用逻辑设备名向操作系统发出请求，操作系统根据用户进程指定的设备类型（逻辑设备名）查找系统设备表，找到一个空闲设备分配给进程，并在  <code>LUT</code>  中增加相应表项。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>如果之后用户进程再次通过相同的逻辑设备名请求使用设备，则操作系统通过</mtext><mi>L</mi><mi>U</mi><mi>T</mi><mtext>表即可知道用户进程实际要使用的是哪个物理设备了，并且也能知道该设备的驱动程序入口地址。</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}如果之后用户进程再次通过相同的逻辑设备名请求使用设备，则操作系统通过 LUT 表即可知道用户进程实际要使用的是哪个物理设备了，并且也能知道该设备的驱动程序入口地址。</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">如果之后用户进程再次通过相同的逻辑设备名请求使用设备，则操作系统通过</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:red;\">LU</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">T</span><span class=\"mord cjk_fallback\" style=\"color:red;\">表即可知道用户进程实际要使用的是哪个物理设备了，并且也能知道该设备的驱动程序入口地址。</span></span></span></span></p>\n<ul>\n<li>类似于缓存</li>\n</ul>\n<hr />\n<p>逻辑设备表的设置问题:</p>\n<p>整个系统只有一张  <code>LUT</code> ：各用户所用的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>逻辑设备名不允许重复</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}逻辑设备名不允许重复</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">逻辑设备名不允许重复</span></span></span></span>，适用于单用户操作系统</p>\n<p>每个用户一张  <code>LUT</code> ：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>不同用户的逻辑设备名可重复</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}不同用户的逻辑设备名可重复</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">不同用户的逻辑设备名可重复</span></span></span></span>，适用于多用户操作系统</p>\n<h3 id=\"整体框架-5\"><a class=\"anchor\" href=\"#整体框架-5\">#</a> 整体框架</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318191503132.png\" alt=\"image-20230318191503132\" /></p>\n<h2 id=\"缓冲区管理\"><a class=\"anchor\" href=\"#缓冲区管理\">#</a> 缓冲区管理</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318192447770.png\" alt=\"image-20230318192447770\" /></p>\n<h3 id=\"什么是缓冲区有什么作用\"><a class=\"anchor\" href=\"#什么是缓冲区有什么作用\">#</a> 什么是缓冲区？有什么作用？</h3>\n<p>缓冲区是一个存储区域，可以由专门的硬件寄存器组成，也可利用内存作为缓冲区。</p>\n<p>使用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>硬件作为缓冲区</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}硬件作为缓冲区</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">硬件作为缓冲区</span></span></span></span>的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>成本较高</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}成本较高</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">成本较高</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>容量也较小</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}容量也较小</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">容量也较小</span></span></span></span>，一般仅用在对速度要求非常高的场合</p>\n<ul>\n<li>如存储器管理中所用的联想寄存器，由于对页表的访问频率极高，因此使用速度很快的联想寄存器来存放页表项的副本</li>\n</ul>\n<p>一般情况下，更多的是利用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>内存作为缓冲区</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}内存作为缓冲区</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">内存作为缓冲区</span></span></span></span>，“设备独立性软件” 的缓冲区管理就是要组织管理好这些缓冲区</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318193018994.png\" alt=\"image-20230318193018994\" /></p>\n<hr />\n<p>如下所示：只有缓冲区中的数据充满了或者被取走为空后，  <code>CPU</code>  才会介入来处理中断</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318192747361.png\" alt=\"image-20230318192747361\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318192817102.png\" alt=\"image-20230318192817102\" /></p>\n<hr />\n<h3 id=\"单缓冲\"><a class=\"anchor\" href=\"#单缓冲\">#</a> 单缓冲</h3>\n<p>假设某用户进程请求某种块设备读入若干块的数据。若采用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>单缓冲</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}单缓冲</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">单缓冲</span></span></span></span>的策略，操作系统会<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>在主存中为其分配一个缓冲区</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}在主存中为其分配一个缓冲区</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">在主存中为其分配一个缓冲区</span></span></span></span>（若题目中没有特别说明，一个缓冲区的大小就是一个块）。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>注意：当缓冲区数据非空时，不能往缓冲区冲入数据，只能从缓冲区把数据传出；当缓冲区为空时，可以往缓冲区冲入数据，但必须把缓冲区充满以后，才能从缓冲区把数据传出。</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}注意：当缓冲区数据非空时，不能往缓冲区冲入数据，只能从缓冲区把数据传出；当缓冲区为空时，可以往缓冲区冲入数据，但必须把缓冲区充满以后，才能从缓冲区把数据传出。</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">注意：当缓冲区数据非空时，不能往缓冲区冲入数据，只能从缓冲区把数据传出；当缓冲区为空时，可以往缓冲区冲入数据，但必须把缓冲区充满以后，才能从缓冲区把数据传出。</span></span></span></span></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318195506997.png\" alt=\"image-20230318195506997\" /></p>\n<p>常考题型：计算每处理一块数据平均需要多久？</p>\n<p>技巧：假定一个初始状态，<strong>分析下次到达相同状态需要多少时间</strong>，这就是处理一块数据平均所需时间。</p>\n<p>在 “单缓冲” 题型中，可以假设初始状态为工作区满，缓冲区空。</p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318195814934.png\" alt=\"image-20230318195814934\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318200003587.png\" alt=\"image-20230318200003587\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318200023751.png\" alt=\"image-20230318200023751\" /></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>结论：采用单缓冲策略，处理一块数据平均耗时</mtext><mi>M</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>C</mi><mo separator=\"true\">,</mo><mi>T</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>M</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}结论：采用单缓冲策略，处理一块数据平均耗时 Max(C, T) + M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">结论：采用单缓冲策略，处理一块数据平均耗时</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:red;\">M</span><span class=\"mord mathnormal\" style=\"color:red;\">a</span><span class=\"mord mathnormal\" style=\"color:red;\">x</span><span class=\"mopen\" style=\"color:red;\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;color:red;\">C</span><span class=\"mpunct\" style=\"color:red;\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">T</span><span class=\"mclose\" style=\"color:red;\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\" style=\"color:red;\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:red;\">M</span></span></span></span></p>\n<h3 id=\"双缓冲\"><a class=\"anchor\" href=\"#双缓冲\">#</a> 双缓冲</h3>\n<p>假设某用户进程请求某种块设备读入若干块的数据。若采用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>双缓冲</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}双缓冲</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">双缓冲</span></span></span></span>的策略，操作系统会<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>在主存中为其分配两个缓冲区</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}在主存中为其分配两个缓冲区</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">在主存中为其分配两个缓冲区</span></span></span></span>（若题目中没有特别说明，一个缓冲区的大小就是一个块)</p>\n<p>双缓冲题目中，假设初始状态为：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>工作区空，其中一个缓冲区满，另一个缓冲区空</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}工作区空，其中一个缓冲区满，另一个缓冲区空</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">工作区空，其中一个缓冲区满，另一个缓冲区空</span></span></span></span></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318202253341.png\" alt=\"image-20230318202253341\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318203743449.png\" alt=\"image-20230318203743449\" /></p>\n<hr />\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>结论：采用双缓冲策略，处理一块数据平均耗时</mtext><mi>M</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>C</mi><mo>+</mo><mi>M</mi><mo separator=\"true\">,</mo><mi>T</mi><mo stretchy=\"false\">)</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}结论：采用双缓冲策略，处理一块数据平均耗时 Max(C + M, T)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">结论：采用双缓冲策略，处理一块数据平均耗时</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:red;\">M</span><span class=\"mord mathnormal\" style=\"color:red;\">a</span><span class=\"mord mathnormal\" style=\"color:red;\">x</span><span class=\"mopen\" style=\"color:red;\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;color:red;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\" style=\"color:red;\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:red;\">M</span><span class=\"mpunct\" style=\"color:red;\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">T</span><span class=\"mclose\" style=\"color:red;\">)</span></span></span></span></p>\n<hr />\n<h3 id=\"使用单双缓冲在通信时的区别\"><a class=\"anchor\" href=\"#使用单双缓冲在通信时的区别\">#</a> 使用单 / 双缓冲在通信时的区别</h3>\n<p>两台机器之间通信时，可以配置缓冲区用于数据的发送和接受。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318204027285.png\" alt=\"image-20230318204027285\" /></p>\n<p>显然，若两个相互通信的机器只设置单缓冲区，在任一时刻只能实现数据的单向传输。</p>\n<ul>\n<li>类似于半双工</li>\n</ul>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318205551749.png\" alt=\"image-20230318205551749\" /></p>\n<p>若两个相互通信的机器设置双缓冲区，则同一时刻可以实现双向的数据传输。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>注：管道通信中的“管道”其实就是缓冲区。要实现数据的双向传输，必须设置两个管道</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}注：管道通信中的“管道”其实就是缓冲区。要实现数据的双向传输，必须设置两个管道</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">注：管道通信中的</span><span class=\"mord\" style=\"color:red;\">“</span><span class=\"mord cjk_fallback\" style=\"color:red;\">管道</span><span class=\"mord\" style=\"color:red;\">”</span><span class=\"mord cjk_fallback\" style=\"color:red;\">其实就是缓冲区。要实现数据的双向传输，必须设置两个管道</span></span></span></span></p>\n<ul>\n<li>类似于全双工</li>\n</ul>\n<h3 id=\"循环缓冲区\"><a class=\"anchor\" href=\"#循环缓冲区\">#</a> 循环缓冲区</h3>\n<p>将多个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>大小相等</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}大小相等</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">大小相等</span></span></span></span>的缓冲区链接成一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>循环队列</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}循环队列</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">循环队列</span></span></span></span>。</p>\n<p>注：以下图示中，橙色表示已充满数据的缓冲区，绿色表示空缓冲区。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318205720022.png\" alt=\"image-20230318205720022\" /></p>\n<h3 id=\"缓冲池\"><a class=\"anchor\" href=\"#缓冲池\">#</a> 缓冲池</h3>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>缓冲池</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}缓冲池</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">缓冲池</span></span></span></span>由系统中共用的缓冲区组成。这些缓冲区按使用状况可以分为：空缓冲队列、装满输入数据的缓冲队列（输入队列）、装满输出数据的缓冲队列（输出队列）。</p>\n<p>另外，根据一个缓冲区在实际运算中扮演的功能不同，又设置了四种工作缓冲区:</p>\n<ul>\n<li>用于收容输入数据的工作缓冲区（hin）</li>\n<li>用于提取输入数据的工作缓冲区（sin）</li>\n<li>用于收容输出数据的工作缓冲区（hout）</li>\n<li>用于提取输出数据的工作缓冲区（sout）</li>\n</ul>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318211206465.png\" alt=\"image-20230318211206465\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318211345971.png\" alt=\"image-20230318211345971\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318211513276.png\" alt=\"image-20230318211513276\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318211607495.png\" alt=\"image-20230318211607495\" /></p>\n<h3 id=\"整体框架-6\"><a class=\"anchor\" href=\"#整体框架-6\">#</a> 整体框架</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230318211802506.png\" alt=\"image-20230318211802506\" /></p>\n",
            "tags": [
                "操作系统"
            ]
        },
        {
            "id": "https://www.htired.top/2023/06/02/os/4%E3%80%81%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/",
            "url": "https://www.htired.top/2023/06/02/os/4%E3%80%81%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/",
            "title": "4、文件管理",
            "date_published": "2023-06-02T07:59:56.000Z",
            "content_html": "<h1 id=\"初识文件管理\"><a class=\"anchor\" href=\"#初识文件管理\">#</a> 初识文件管理</h1>\n<h2 id=\"回顾\"><a class=\"anchor\" href=\"#回顾\">#</a> 回顾</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214212705943.png\" alt=\"image-20230214212705943\" /></p>\n<p>计算机中存放了各种各样的文件，一个文件有哪些属性？</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>文件内部</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}文件内部</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">文件内部</span></span></span></span>的数据应该怎样组织起来？</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>文件之间</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}文件之间</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">文件之间</span></span></span></span>又应该又应该怎么组织起来？</p>\n<p>从下往上看， <code>OS</code>  应提供<strong>哪些功能</strong>，才能方便用户、应用程序使用文件？</p>\n<p>从上往下看，文件数据应该怎么存放在外存（磁盘）上？</p>\n<hr />\n<h2 id=\"文件的属性\"><a class=\"anchor\" href=\"#文件的属性\">#</a> 文件的属性</h2>\n<p>一个文件有哪些属性？</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>文件名</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}文件名</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">文件名</span></span></span></span>：由创建文件的用户决定文件名，主要是为了方便用户找到文件，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>同一目录下不允许有重名文件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}同一目录下不允许有重名文件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">同一目录下不允许有重名文件</span></span></span></span>。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214214136798.png\" alt=\"image-20230214214136798\" /></p>\n<hr />\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>标识符</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}标识符</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">标识符</span></span></span></span>：一个系统内的各文件标识符唯一，对用户来说毫无可读性，因此标识符只是操作系统用于<strong>区分各个文件的一种内部名称</strong>。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>类型</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}类型</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">类型</span></span></span></span>：指明文件的类型</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214215656271.png\" alt=\"image-20230214215656271\" /></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>位置</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}位置</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">位置</span></span></span></span>：文件存放的路径（让用户使用）、在外存中的地址（操作系统使用，对用户不可见）</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>大小</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}大小</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">大小</span></span></span></span>：指明文件大小</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>创建时间、上次修改时间</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}创建时间、上次修改时间</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">创建时间、上次修改时间</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>文件所有者信息</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}文件所有者信息</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">文件所有者信息</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>保护信息</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}保护信息</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">保护信息</span></span></span></span>：对文件进行保护的访问控制信息</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214215937832.png\" alt=\"image-20230214215937832\" /></p>\n<hr />\n<h2 id=\"无结构文件有结构文件\"><a class=\"anchor\" href=\"#无结构文件有结构文件\">#</a> 无结构文件 / 有结构文件</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214220215086.png\" alt=\"image-20230214220215086\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214220412681.png\" alt=\"image-20230214220412681\" /></p>\n<p>有结构文件中，各个记录间应该如何组织的问题―— 应该顺序存放？还是用索引表来表示记录间的顺序？――这是 “文件的逻辑结构” 重点要探讨的问题</p>\n<hr />\n<h2 id=\"文件之间应该怎样组织起来\"><a class=\"anchor\" href=\"#文件之间应该怎样组织起来\">#</a> 文件之间应该怎样组织起来？</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214221924543.png\" alt=\"image-20230214221924543\" /></p>\n<hr />\n<h2 id=\"操作系统应该向上提供哪些功能\"><a class=\"anchor\" href=\"#操作系统应该向上提供哪些功能\">#</a> 操作系统应该向上提供哪些功能？</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214222344882.png\" alt=\"image-20230214222344882\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214222450989.png\" alt=\"image-20230214222450989\" /></p>\n<p>读 / 写文件之前，需要 &quot;打开文件&quot;</p>\n<p>读 / 写文件结束之后，需要 &quot;关闭文件&quot;</p>\n<hr />\n<p>可用几个基本操作完成更复杂的操作</p>\n<ul>\n<li>比如：“复制文件”：先创建一个新的空文件，再把源文件读入内存，再将内存中的数据写到新文件中</li>\n</ul>\n<hr />\n<p>操作系统在背后做的处理会在之后进行探讨</p>\n<hr />\n<h2 id=\"从上往下看文件应如何存放在外存\"><a class=\"anchor\" href=\"#从上往下看文件应如何存放在外存\">#</a> 从上往下看，文件应如何存放在外存？</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214224432564.png\" alt=\"image-20230214224432564\" /></p>\n<p>与内存一样，外存也是由一个个存储单元组成的，每个存储单元可以存储一定量的数据（如 1 B）。</p>\n<p>每个存储单元对应一个物理地址</p>\n<hr />\n<p>类似于内存分为一个个 “内存块” ，外存会分为一个个 “<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>块</mtext><mi mathvariant=\"normal\">/</mi><mtext>磁盘块</mtext><mi mathvariant=\"normal\">/</mi><mtext>物理块</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}块/磁盘块/物理块</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">块</span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord cjk_fallback\" style=\"color:red;\">磁盘块</span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord cjk_fallback\" style=\"color:red;\">物理块</span></span></span></span>” 。</p>\n<p>每个磁盘块的大小是相等的，每块一般包含 2 的整数幂个地址</p>\n<ul>\n<li>如本例中，一块包含 2&lt;sup&gt;10&lt;/sup&gt; 个地址，即 1 KB。</li>\n</ul>\n<p>同样类似的是，文件的逻辑地址也可以分为（逻辑块号，块内地址），操作系统同样需要将逻辑地址转换为外存的物理地址（物理块号，块内地址）的形式。块内地址的位数取决于磁盘块的大小</p>\n<hr />\n<p>操作系统以 “<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>块</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}块</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">块</span></span></span></span>” 为单位为文件分配存储空间，因此即使一个文件大小只有 10 B，但它依然需要占用 1 KB 的磁盘块。外存中的数据读入内存时同样以块为单位</p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214224545840.png\" alt=\"image-20230214224545840\" /></p>\n<hr />\n<h2 id=\"其他需要由操作系统实现的文件管理功能\"><a class=\"anchor\" href=\"#其他需要由操作系统实现的文件管理功能\">#</a> 其他需要由操作系统实现的文件管理功能</h2>\n<p>文件共享：使多个用户可以共享使用一个文件</p>\n<p>文件保护：如何保证不同的用户对文件有不同的操作权限</p>\n<h2 id=\"整体框架\"><a class=\"anchor\" href=\"#整体框架\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214224902792.png\" alt=\"image-20230214224902792\" /></p>\n<hr />\n<h1 id=\"文件的逻辑结构\"><a class=\"anchor\" href=\"#文件的逻辑结构\">#</a> 文件的逻辑结构</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214225138140.png\" alt=\"image-20230214225138140\" /></p>\n<p>所谓的 “逻辑结构”，就是指在<strong>用户</strong>看来，文件内部的数据应该是如何组织起来的。</p>\n<p>而 “物理结构” 指的是在<strong>操作系统</strong>看来，文件的数据是如何存放在外存中的。</p>\n<p>类似于数据结构的 “逻辑结构” 和 “物理结构”。</p>\n<p>如 “线性表” 就是一种逻辑结构，在用户角度看来，线性表就是一组有先后关系的元素序列</p>\n<ul>\n<li>如: a，b，c，d，e ......</li>\n</ul>\n<p>“线性表” 这种逻辑结构可以用不同的物理结构实现，</p>\n<p>如：顺序表 / 链表。</p>\n<ul>\n<li>\n<p>顺序表的各个元素在逻辑上相邻，在物理上也相邻；</p>\n</li>\n<li>\n<p>而链表的各个元素在物理上可以是不相邻的。</p>\n</li>\n<li>\n<p>因此，顺序表可以实现 “随机访问” ，而 “链表” 无法实现随机访问。</p>\n</li>\n</ul>\n<p>可见，算法的具体实现与逻辑结构、物理结构都有关</p>\n<ul>\n<li>文件也一样，文件操作的具体实现与文件的逻辑结构、物理结构都有关</li>\n</ul>\n<h2 id=\"无结构文件流式文件\"><a class=\"anchor\" href=\"#无结构文件流式文件\">#</a> 无结构文件（流式文件）</h2>\n<p>按文件是否有结构分类，可以分为无结构文件、有结构文件两种。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>无结构文件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}无结构文件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">无结构文件</span></span></span></span>：文件内部的数据就是一系列二进制流或字符流组成。又称 “<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>流式文件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}流式文件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">流式文件</span></span></span></span>”。</p>\n<ul>\n<li>如：Windows 操作系统中的 .txt 文件。</li>\n</ul>\n<p>文件内部的数据其实就是一系列字符流，没有明显的结构特性。</p>\n<p>因此也不用探讨无结构文件的 “逻辑结构 &quot; 问题。</p>\n<h2 id=\"有结构文件\"><a class=\"anchor\" href=\"#有结构文件\">#</a> 有结构文件</h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>有结构文件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}有结构文件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">有结构文件</span></span></span></span>：由一组相似的记录组成，又称 “<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>记录式文件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}记录式文件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">记录式文件</span></span></span></span>”。每条记录又若干个数据项组成。</p>\n<p>如：数据库表文件。一般来说，每条记录有一个数据项可作为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>关键字</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}关键字</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">关键字</span></span></span></span>（作为识别不同记录的  <code>ID</code> )</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214225826746.png\" alt=\"image-20230214225826746\" /></p>\n<hr />\n<p>根据各条记录的长度（占用存储空间）是否相等，可分为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>定长记录</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}定长记录</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">定长记录</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>可变长记录</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}可变长记录</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">可变长记录</span></span></span></span>两种</p>\n<ul>\n<li>例如： <code>mysql</code>  中的  <code>varchar</code>  和  <code>char</code></li>\n</ul>\n<p>例如：<strong>定长记录</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214230019585.png\" alt=\"image-20230214230019585\" /></p>\n<p>例如：<strong>可变长记录</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214230132021.png\" alt=\"image-20230214230132021\" /></p>\n<h3 id=\"顺序文件\"><a class=\"anchor\" href=\"#顺序文件\">#</a> 顺序文件</h3>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>顺序文件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}顺序文件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">顺序文件</span></span></span></span>：文件中的记录一个接一个地顺序排列（逻辑上），记录可以是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>定长的</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}定长的</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">定长的</span></span></span></span>或<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>可变长的</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}可变长的</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">可变长的</span></span></span></span>。各个记录在物理上可以<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>顺序存储</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}顺序存储</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">顺序存储</span></span></span></span>或<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>链式存储</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}链式存储</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">链式存储</span></span></span></span>。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214230417152.png\" alt=\"image-20230214230417152\" /></p>\n<p>假设：已经知道了文件的起始地址（也就是第一个记录存放的位置）</p>\n<p>思考 1：能否快速找到第 i 个记录对应的地址？（即能否实现随机存取）</p>\n<p>思考 2：能否快速找到某个关键字对应的记录存放的位置？</p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214231253316.png\" alt=\"image-20230214231253316\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214231312328.png\" alt=\"image-20230214231312328\" /></p>\n<hr />\n<p><strong>结论</strong>：定长记录的顺序文件，若物理上采用顺序存储，则可实现随机存取；若能再保证记录的顺序结构，则可实现快速检索（即根据关键字快速找到对应记录）</p>\n<p><strong>注</strong>：一般来说，考试题目中所说的 “顺序文件” 指的是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>物理上顺序存储的顺序文件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}物理上顺序存储的顺序文件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">物理上顺序存储的顺序文件</span></span></span></span>。之后的讲解中提到的顺序文件也默认如此。</p>\n<p>可见，顺序文件的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>缺点</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}缺点</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">缺点</span></span></span></span>是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>增加</mtext><mi mathvariant=\"normal\">/</mi><mtext>删除一个记录比较困难</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}增加/删除一个记录比较困难</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">增加</span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord cjk_fallback\" style=\"color:red;\">删除一个记录比较困难</span></span></span></span>（如果是串结构则相对简单）</p>\n<hr />\n<p>在实际应用当中，为了减少磁盘的  <code>I/O</code>  次数，一般操作系统会管理日志文件，用这个日志文件记录对各个文件修改的信息，每隔一段较长的时间，再把这些信息统一的合并到外存当中的文件数据当中</p>\n<hr />\n<h3 id=\"索引文件\"><a class=\"anchor\" href=\"#索引文件\">#</a> 索引文件</h3>\n<p>对于可变长记录文件，要找到第  <code>i</code>  个记录，必须先顺序第查找前  <code>i - 1</code>  个记录但是很多应用场景中又必须使用可变长记录。如何解决这个问题？</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214232236190.png\" alt=\"image-20230214232236190\" /></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>索引表</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}索引表</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">索引表</span></span></span></span>本身是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>定长记录的顺序文件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}定长记录的顺序文件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">定长记录的顺序文件</span></span></span></span>。因此可以快速找到第  <code>i</code>  个记录对应的索引项。</p>\n<p>可将关键字作为索引号内容，若按关键字顺序排列，则还可以支持按照关键字折半查找。</p>\n<p>每当要增加 / 删除一个记录时，需要对索引表进行修改。</p>\n<p>由于索引文件有很快的检索速度，因此<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>主要用于对信息处理的及时性要求比较高的场合</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}主要用于对信息处理的及时性要求比较高的场合</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">主要用于对信息处理的及时性要求比较高的场合</span></span></span></span>。</p>\n<hr />\n<p>另外，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>可以用不同的数据项建立多个索引表</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}可以用不同的数据项建立多个索引表</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">可以用不同的数据项建立多个索引表</span></span></span></span>。</p>\n<p>如：学生信息表中，可用关键字 “学号” 建立一张索引表。也可用 “姓名” 建立一张索引表。这样就可以根据 “姓名” 快速地检索文件了。<br />\n（Eg： <code>SQL</code>  就支持根据某个数据项建立索引的功能）</p>\n<hr />\n<h3 id=\"索引顺序文件\"><a class=\"anchor\" href=\"#索引顺序文件\">#</a> 索引顺序文件</h3>\n<p>思考索引文件的缺点：每个记录对应一个索引表项，因此索引表可能会很大。</p>\n<p>比如：文件的每个记录平均只占 8 B，而每个索引表项占 32 个字节，那么索引表都要比文件内容本身大 4 倍，</p>\n<ul>\n<li>这样对存储空间的利用率就太低了。</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214232841197.png\" alt=\"image-20230214232841197\" /></p>\n<p>例如：<strong>分块查找</strong>。组间有序，组内无序</p>\n<p>用这种策略确实可以让索引表 “瘦身”，但是是否会出现不定长记录的顺序文件检索速度慢的问题呢？</p>\n<hr />\n<h3 id=\"索引顺序文件检索效率分析\"><a class=\"anchor\" href=\"#索引顺序文件检索效率分析\">#</a> 索引顺序文件（检索效率分析）</h3>\n<p>若一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>顺序文件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}顺序文件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">顺序文件</span></span></span></span>有 10000 个记录，则根据关键字检索文件，只能从头开始顺序查找（这里指的并不是定长记录、顺序结构的顺序文件），<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>平均须查找</mtext><mn>5000</mn><mtext>个记录</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}平均须查找 5000 个记录</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">平均须查找</span><span class=\"mord\" style=\"color:red;\">5000</span><span class=\"mord cjk_fallback\" style=\"color:red;\">个记录</span></span></span></span>。</p>\n<ul>\n<li>(1 + 2 + 3 + ...... + n) / (n + 1) ：设每次再任意位置找到记录的概率相同</li>\n</ul>\n<p>若采用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>索引顺序文件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}索引顺序文件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">索引顺序文件</span></span></span></span>结构，可把 10000 个记录分为 √10000 = 100 组，每组 100 个记录。</p>\n<p>则需要先顺序查找索引表找到分组（共 100 个分组，因此索引表长度为 100 ，平均需要查 50 次)，找到分组后，再在分组中顺序查找记录（每个分组 100 个记录，因此平均需要查 50 次）。</p>\n<p>可见，采用索引顺序文件结构后，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>平均查找次数减少为</mtext><mn>50</mn><mo>+</mo><mn>50</mn><mo>=</mo><mn>100</mn><mtext>次</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}平均查找次数减少为 50 + 50 = 100 次</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">平均查找次数减少为</span><span class=\"mord\" style=\"color:red;\">50</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\" style=\"color:red;\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\" style=\"color:red;\">50</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\" style=\"color:red;\">100</span><span class=\"mord cjk_fallback\" style=\"color:red;\">次</span></span></span></span>。</p>\n<p><strong>可以理解为查字典，先查目录找到相应的位置范围，再位置范围内查找</strong></p>\n<hr />\n<p>同理，若文件共有 10&lt;sup&gt;6&lt;/sup &gt; 个记录，则可分为 1000 个分组，每个分组 1000 个记录。根据关键字检索一个记录平均需要查找 500 + 500 = 1000 次。这个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>查找次数依然很多</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}查找次数依然很多</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">查找次数依然很多</span></span></span></span>，如何解决呢？</p>\n<h3 id=\"多级索引顺序文件\"><a class=\"anchor\" href=\"#多级索引顺序文件\">#</a> 多级索引顺序文件</h3>\n<p>为了进一步提高检索效率，可以为顺序文件<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>建立多级索引表</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}建立多级索引表</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">建立多级索引表</span></span></span></span>。例如，对于一个含 10&lt;sup&gt;6&lt;/sup&gt; 个记录的文件，可先为该文件建立一张低级索引表，每 100 个记录为一组，故低级索引表中共有 10000 个表项（即 10000 个定长记录），再把这 10000 个定长记录分组，每组 100 个，为其建立顶级索引表，故顶级索引表中共有 100 个表项。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214234602146.png\" alt=\"image-20230214234602146\" /></p>\n<p>例如：<strong>B+ 树</strong></p>\n<h2 id=\"整体框架-2\"><a class=\"anchor\" href=\"#整体框架-2\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214234740083.png\" alt=\"image-20230214234740083\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230215000157163.png\" alt=\"image-20230215000157163\" /></p>\n<h1 id=\"文件目录\"><a class=\"anchor\" href=\"#文件目录\">#</a> 文件目录</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230215213908469.png\" alt=\"image-20230215213908469\" /></p>\n<p>这种目录结构对于用户来说有什么好处？</p>\n<p>文件之间的组织结构清晰，易于查找</p>\n<p>编程时也可以很方便的用文件路径找到一个文件</p>\n<p>从操作系统的角度来看，这些目录应该是如何实现的？</p>\n<hr />\n<p>就是我们很熟悉的 Windows 操作系统的 &quot;文件夹&quot;</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230215214235812.png\" alt=\"image-20230215214235812\" /></p>\n<hr />\n<h2 id=\"文件控制块\"><a class=\"anchor\" href=\"#文件控制块\">#</a> 文件控制块</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230215214411194.png\" alt=\"image-20230215214411194\" /></p>\n<p>目录本身就是一种有结构的文件，由一条条记录组成。每一条记录对应一个放在该目录下的文件</p>\n<hr />\n<p>当我们双击 “照片” 后，操作系统会在这个目录表中找到关键字 “照片” 对应的<strong>目录项</strong>（也就是记录)，</p>\n<ul>\n<li>然后从外存中将 “照片” 目录的信息读入内存，于是，“照片” 目录中的内容就可以显示出来了。</li>\n</ul>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230215215236856.png\" alt=\"image-20230215215236856\" /></p>\n<p><code>FCB</code>  的有序集合称为 “<strong>文件目录</strong>”，一个  <code>FCB</code>  就是一个文件<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>目录项</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}目录项</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">目录项</span></span></span></span>。</p>\n<p><code>FCB</code>  中包含了文件的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>基本信息</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}基本信息</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">基本信息</span></span></span></span>（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>文件名</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}文件名</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">文件名</span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>物理地址</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}物理地址</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">物理地址</span></span></span></span>、逻辑结构、物理结构等），存取控制信息（是否可读 / 可写、禁止访问的用户名单等），使用信息（如文件的建立时间、修改时间等）。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>最重要</mtext><mo separator=\"true\">,</mo><mtext>最基本的</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}最重要, 最基本的</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">最重要</span><span class=\"mpunct\" style=\"color:red;\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">最基本的</span></span></span></span>还是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>文件名、文件存放的物理地址</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red} 文件名、文件存放的物理地址</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">文件名、文件存放的物理地址</span></span></span></span></p>\n<p><code>FCB</code>  实现了文件名和文件之间的映射。使用户（用户程序）可以实现 “按名存取”</p>\n<hr />\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>目录文件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}目录文件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">目录文件</span></span></span></span>：是文件目录以文件的形式保存在外存中的文件</p>\n<hr />\n<h2 id=\"需要对目录进行哪些操作\"><a class=\"anchor\" href=\"#需要对目录进行哪些操作\">#</a> 需要对目录进行哪些操作？</h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>搜索</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}搜索</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">搜索</span></span></span></span>：当用户要使用一个文件时，系统要根据文件名搜索目录，找到该文件对应的目录项</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>创建文件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}创建文件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">创建文件</span></span></span></span>：创建一个新文件时，需要在其所属的目录中增加一个目录项</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>删除文件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}删除文件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">删除文件</span></span></span></span>：当删除一个文件时，需要在目录中删除相应的目录项</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>显示目录</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}显示目录</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">显示目录</span></span></span></span>：用户可以请求显示目录的内容，如显示该目录中的所有文件及相应属性</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>修改目录</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}修改目录</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">修改目录</span></span></span></span>：某些文件属性保存在目录中，因此这些属性变化时需要修改相应的目录项</p>\n<ul>\n<li>如：文件重命名</li>\n</ul>\n<hr />\n<h2 id=\"单级目录结构\"><a class=\"anchor\" href=\"#单级目录结构\">#</a> 单级目录结构</h2>\n<p>早期操作系统并不支持多级目录，整个系统中只建立一张目录表，每个文件占一个目录项。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230215220016430.png\" alt=\"image-20230215220016430\" /></p>\n<p>单级目录实现了 &quot;按名存取&quot;，但是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>不允许文件重名</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}不允许文件重名</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">不允许文件重名</span></span></span></span></p>\n<p>在创建一个文件时，需要先检查目录表中有没有重名文件，确定不重名后才能允许建立文件，并将新文件对应的目录项（ <code>FCB</code> ）插入目录表中。</p>\n<p>显然，<strong>单级目录结构不适用于多用户操作系统</strong></p>\n<ul>\n<li>怎么可能让多个用户共享一个目录</li>\n</ul>\n<hr />\n<h2 id=\"两级目录结构\"><a class=\"anchor\" href=\"#两级目录结构\">#</a> 两级目录结构</h2>\n<p>早期的多用户操作系统，采用两级目录结构。分为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>主文件目录</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}主文件目录</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">主文件目录</span></span></span></span>（MFD，Master File Directory）和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>用户文件目录</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}用户文件目录</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">用户文件目录</span></span></span></span>（UFD，User Flie Directory) 。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230215220439627.png\" alt=\"image-20230215220439627\" /></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>允许不同用户的文件重名</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}允许不同用户的文件重名</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">允许不同用户的文件重名</span></span></span></span>文件民虽然相同，但是对应的其实是不同的文件</p>\n<p>两级目录结构允许不同用户的文件重名，也可以在目录上实现实现访问限制（检查此时登录的用户名是否匹配）。</p>\n<p>但是两级目录结构依然缺乏灵活性，<strong>用户不能对自己的文件进行分类。</strong></p>\n<hr />\n<h2 id=\"多级目录结构\"><a class=\"anchor\" href=\"#多级目录结构\">#</a> 多级目录结构</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230215220632638.png\" alt=\"image-20230215220632638\" /></p>\n<p>用户（或用户进程）要访问某个文件时要用文件路径名标识文件，文件路径名是个字符串。</p>\n<p>各级目录之间用 “/” 隔开。从<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>根目录</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}根目录</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">根目录</span></span></span></span>出发的路径称为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>绝对路径</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}绝对路径</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">绝对路径</span></span></span></span>。</p>\n<p>例如：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>自拍</mtext><mi mathvariant=\"normal\">.</mi><mi>j</mi><mi>p</mi><mi>g</mi><mtext>的绝对路径是</mtext><mi mathvariant=\"normal\">&quot;</mi><mtext>照片</mtext><mi mathvariant=\"normal\">/</mi><mn>2015</mn><mo>−</mo><mn>08</mn><mi mathvariant=\"normal\">/</mi><mtext>自拍</mtext><mi mathvariant=\"normal\">.</mi><mi>j</mi><mi>p</mi><mi>g</mi><mi mathvariant=\"normal\">&quot;</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}自拍.jpg 的绝对路径是 &quot;照片/2015-08/自拍.jpg&quot;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">自拍</span><span class=\"mord\" style=\"color:red;\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;color:red;\">j</span><span class=\"mord mathnormal\" style=\"color:red;\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:red;\">g</span><span class=\"mord cjk_fallback\" style=\"color:red;\">的绝对路径是</span><span class=\"mord\" style=\"color:red;\">&quot;</span><span class=\"mord cjk_fallback\" style=\"color:red;\">照片</span><span class=\"mord\" style=\"color:red;\">/2015</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\" style=\"color:red;\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:red;\">08/</span><span class=\"mord cjk_fallback\" style=\"color:red;\">自拍</span><span class=\"mord\" style=\"color:red;\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;color:red;\">j</span><span class=\"mord mathnormal\" style=\"color:red;\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:red;\">g</span><span class=\"mord\" style=\"color:red;\">&quot;</span></span></span></span></p>\n<p>系统根据绝对路径一层一层地找到下一级目录。</p>\n<ul>\n<li>刚开<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>始从外存读入根目录的目录表</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}始从外存读入根目录的目录表</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">始从外存读入根目录的目录表</span></span></span></span>；找到 “照片” 目录的存放位置后，从外存读入对应的目录表；</li>\n<li>再找到 “2015-08” 目录的存放位置，再从<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>外存读入对应目录表</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}外存读入对应目录表</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">外存读入对应目录表</span></span></span></span>；</li>\n<li>最后才找到文件 “自拍.jpg” 的存放位置。</li>\n<li>整个过程<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>需要</mtext><mn>3</mn><mtext>次读磁盘</mtext><mi>l</mi><mi mathvariant=\"normal\">/</mi><mi>O</mi><mtext>操作</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}需要 3 次读磁盘 l/O操作</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">需要</span><span class=\"mord\" style=\"color:red;\">3</span><span class=\"mord cjk_fallback\" style=\"color:red;\">次读磁盘</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;color:red;\">l</span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">O</span><span class=\"mord cjk_fallback\" style=\"color:red;\">操作</span></span></span></span>。</li>\n</ul>\n<hr />\n<p>很多时候，用户会连续访问同一目录内的多个文件</p>\n<ul>\n<li>比如：接连查看 “2015-08&quot; 目录内的多个照片文件</li>\n</ul>\n<p>显然，每次都从根目录开始查找，是很低效的。因此可以设置一个 “<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>当前目录</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}当前目录</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">当前目录</span></span></span></span>”。</p>\n<p>例如，此时已经打开了 “照片” 的目录文件，也就是说，这张目录表已调入内存，那么可以把它设置为 “当前目录”。当用户想要访问某个文件时，可以使用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>从当前目录出发</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}从当前目录出发</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">从当前目录出发</span></span></span></span>的 “<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>相对路径</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}相对路径</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">相对路径</span></span></span></span>”。</p>\n<p>可见，引入 “<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>当前目录</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}当前目录</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">当前目录</span></span></span></span>” 和 &quot;<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>相对路径</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}相对路径</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">相对路径</span></span></span></span> &quot; 后，磁盘  <code>I/O</code>  的次数减少了。这就提升了访问文件的效率。</p>\n<ul>\n<li>只需要从当前目录开始，而不需要重新从根目录开始查询</li>\n</ul>\n<hr />\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>树形目录结构</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}树形目录结构</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">树形目录结构</span></span></span></span>可以很方便地对文件进行分类，层次结构清晰，也能够更有效地进行文件的管理和保护。</p>\n<p>但是，树形结构<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>不便于实现文件的共享</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}不便于实现文件的共享</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">不便于实现文件的共享</span></span></span></span>。为此，提出了 “<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>无环图目录结构</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}无环图目录结构</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">无环图目录结构</span></span></span></span>”。</p>\n<hr />\n<h2 id=\"无环图目录结构\"><a class=\"anchor\" href=\"#无环图目录结构\">#</a> 无环图目录结构</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230215221629488.png\" alt=\"image-20230215221629488\" /></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>可以用不同的文件名指向同一个文件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}可以用不同的文件名指向同一个文件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">可以用不同的文件名指向同一个文件</span></span></span></span>，甚至可以指向同一个目录（共享同一目录下的所有内容）。</p>\n<p>需要为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>每个共享结点设置一个共享计数器</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}每个共享结点设置一个共享计数器</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">每个共享结点设置一个共享计数器</span></span></span></span>，用于记录此时有多少个地方在共享该结点。用户提出删除结点的请求时，只是删除该用户的  <code>FCB</code> 、并使<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>共享计数器减</mtext><mn>1</mn></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}共享计数器减 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">共享计数器减</span><span class=\"mord\" style=\"color:red;\">1</span></span></span></span>，并不会直接删除共享结点。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>只有共享计数器减为</mtext><mn>0</mn><mtext>时，才删除节点</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}只有共享计数器减为 0 时，才删除节点</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">只有共享计数器减为</span><span class=\"mord\" style=\"color:red;\">0</span><span class=\"mord cjk_fallback\" style=\"color:red;\">时，才删除节点</span></span></span></span></p>\n<p>注意：共享文件不同于复制文件。<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>在共享文件中，由于各用户指向的是同一个文件，因此只要其中一个用户修改了文件数据，那么所有用户都可以看到文件数据的变化。</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}在共享文件中，由于各用户指向的是同一个文件，因此只要其中一个用户修改了文件数据，那么所有用户都可以看到文件数据的变化。</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">在共享文件中，由于各用户指向的是同一个文件，因此只要其中一个用户修改了文件数据，那么所有用户都可以看到文件数据的变化。</span></span></span></span></p>\n<p>其实就是：硬链接</p>\n<h2 id=\"索引节点fcb-的改进\"><a class=\"anchor\" href=\"#索引节点fcb-的改进\">#</a> 索引节点（FCB 的改进）</h2>\n<p>按照文件名搜索文件时，并不需要关心其他信息。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230215222242849.png\" alt=\"image-20230215222242849\" /></p>\n<p>思考有何好处？</p>\n<p>假设一个  <code>FCB</code>  是 64 B，磁盘块的大小为 1 KB，则每个盘块中只能存放 16 个  <code>FCB</code> 。若一个文件目录中共有 640 个目录项，则共需要占用 640 / 16 = 40 个盘块。因此按照某文件名检索该目录，平均需要查询 320 个目录项，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>平均需要启动磁盘</mtext><mn>20</mn><mtext>次（每次磁盘</mtext><mi>I</mi><mi mathvariant=\"normal\">/</mi><mi>O</mi><mtext>读入一块）</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}平均需要启动磁盘 20 次（每次磁盘 I/O 读入一块）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">平均需要启动磁盘</span><span class=\"mord\" style=\"color:red;\">20</span><span class=\"mord cjk_fallback\" style=\"color:red;\">次（每次磁盘</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;color:red;\">I</span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">O</span><span class=\"mord cjk_fallback\" style=\"color:red;\">读入一块）</span></span></span></span>。</p>\n<p>若<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>使用索引结点机制</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}使用索引结点机制</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">使用索引结点机制</span></span></span></span>，文件名占 14 B，索引结点指针占 2 B，则每个盘块可存放 64 个目录项，那么按文件名检索目录<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>平均只需要读入</mtext><mn>320</mn><mi mathvariant=\"normal\">/</mi><mn>64</mn><mo>=</mo><mn>5</mn><mtext>个磁盘块</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}平均只需要读入 320 / 64 = 5 个磁盘块</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">平均只需要读入</span><span class=\"mord\" style=\"color:red;\">320/64</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\" style=\"color:red;\">5</span><span class=\"mord cjk_fallback\" style=\"color:red;\">个磁盘块</span></span></span></span>。显然，这<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>将大大提升文件检索速度</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}将大大提升文件检索速度</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">将大大提升文件检索速度</span></span></span></span></p>\n<hr />\n<p>其实就是索引节点指针大小小，相应的该文件目录项也就小，一个磁盘块可以放更多的文件目录项</p>\n<hr />\n<p>当找到文件名对应的目录项时，才需要将索引结点调入内存，索引结点中记录了文件的各种信息，包括文件在外存中的存放位置，根据 “存放位置” 即可找到文件。</p>\n<p>存放<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>在外存中</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}在外存中</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">在外存中</span></span></span></span>的索引结点称为 “ <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>磁盘索引结点</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}磁盘索引结点</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">磁盘索引结点</span></span></span></span>”，当索引结点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>放入内存</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}放入内存</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">放入内存</span></span></span></span>后称为 “<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>内存索引结点</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}内存索引结点</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">内存索引结点</span></span></span></span>”。</p>\n<p>相比之下<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>内存索引结点中需要增加一些信息</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}内存索引结点中需要增加一些信息</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">内存索引结点中需要增加一些信息</span></span></span></span></p>\n<ul>\n<li>比如：文件是否被修改、此时有几个进程正在访问该文件等。</li>\n</ul>\n<h2 id=\"整体框架-3\"><a class=\"anchor\" href=\"#整体框架-3\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230215224148337.png\" alt=\"image-20230215224148337\" /></p>\n<h1 id=\"文件的物理结构文件分配方式对非空闲磁盘块的管理\"><a class=\"anchor\" href=\"#文件的物理结构文件分配方式对非空闲磁盘块的管理\">#</a> 文件的物理结构（文件分配方式）（对非空闲磁盘块的管理）</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230215224413734.png\" alt=\"image-20230215224413734\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230215224750754.png\" alt=\"image-20230215224750754\" /></p>\n<h2 id=\"文件块-磁盘块\"><a class=\"anchor\" href=\"#文件块-磁盘块\">#</a> 文件块、磁盘块</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214224432564.png\" alt=\"image-20230214224432564\" /></p>\n<p>类似于内存分页，磁盘中的存储单元也会被分为一个个 “块 / 磁盘块 / 物理块”。</p>\n<p>很多操作系统中，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>磁盘块的大小与内存块、页面的大小相同</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}磁盘块的大小与内存块、页面的大小相同</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">磁盘块的大小与内存块、页面的大小相同</span></span></span></span></p>\n<ul>\n<li>内存与外存进行数据交换的时候会很方便</li>\n</ul>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230215225041343.png\" alt=\"image-20230215225041343\" /></p>\n<hr />\n<p>在内存管理中，进程的逻辑地址空间被分为一个一个页面</p>\n<p>同样的，在外存管理中，为了方便对文件数据的管理，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>文件的逻辑地址空间也被分为了一个一个的文件“块”</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}文件的逻辑地址空间也被分为了一个一个的文件“块”</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">文件的逻辑地址空间也被分为了一个一个的文件</span><span class=\"mord\" style=\"color:red;\">“</span><span class=\"mord cjk_fallback\" style=\"color:red;\">块</span><span class=\"mord\" style=\"color:red;\">”</span></span></span></span>。</p>\n<p>于是文件的<strong>逻辑地址</strong>也可以表示为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>（逻辑块号，块内地址）</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}（逻辑块号，块内地址）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">（逻辑块号，块内地址）</span></span></span></span>的形式。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230215231655726.png\" alt=\"image-20230215231655726\" /></p>\n<h2 id=\"连续分配\"><a class=\"anchor\" href=\"#连续分配\">#</a> 连续分配</h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>连续分配</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}连续分配</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">连续分配</span></span></span></span>方式要求<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>每个文件在磁盘上占有一组连续的块</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}每个文件在磁盘上占有一组连续的块</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">每个文件在磁盘上占有一组连续的块</span></span></span></span>。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230215231749444.png\" alt=\"image-20230215231749444\" /></p>\n<p>用户通过逻辑地址来操作自己的文件，操作系统如何实现从逻辑地址到物理地址的映射？</p>\n<p><strong>（逻辑块号，块内地址）→（物理块号，块内地址）</strong>。</p>\n<p>只需转换块号就行，块内地址保持不变</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230215231855805.png\" alt=\"image-20230215231855805\" /></p>\n<p>用户给出要访问的逻辑块号，操作系统找到该文件对应的目录项（ <code>FCB</code> ）</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>物理块号</mtext><mo>=</mo><mtext>起始块号＋逻辑块号</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}物理块号 = 起始块号＋逻辑块号</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">物理块号</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">起始块号＋逻辑块号</span></span></span></span></p>\n<ul>\n<li>例如：访问文件 &quot;aaa&quot; 的逻辑块号为 2 的物理地址：4（起始块号）+ 2（逻辑块号）</li>\n</ul>\n<p>当然，还需要检查用户提供的逻辑块号是否合法（逻辑块号 ≥ 长度就不合法）</p>\n<p>可以直接算出逻辑块号对应的物理块号，因此<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>连续分配支持顺序访问和直接访问（即随机访问）</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}连续分配支持顺序访问和直接访问（即随机访问）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">连续分配支持顺序访问和直接访问（即随机访问）</span></span></span></span></p>\n<ul>\n<li>顺序访问：若访问逻辑块号 2，则必须先访问逻辑块号 0 和 1</li>\n<li>直接访问：若访问逻辑块号 2，则没有必要先访问逻辑块号 0 和 1，可以直接访问逻辑块号 2</li>\n</ul>\n<hr />\n<h3 id=\"优点\"><a class=\"anchor\" href=\"#优点\">#</a> 优点</h3>\n<p>读取某个磁盘块时，需要移动磁头。访问的两个磁盘块相隔越远，移动磁头所需时间就越长。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230215232639822.png\" alt=\"image-20230215232639822\" /></p>\n<ul>\n<li>若读取紫色的磁盘块，需要读取之间其他不需要的磁盘块</li>\n</ul>\n<p>结论：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>连续分配的文件在顺序读</mtext><mi mathvariant=\"normal\">/</mi><mtext>写时速度最快</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}连续分配的文件在顺序读/写时速度最快</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">连续分配的文件在顺序读</span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord cjk_fallback\" style=\"color:red;\">写时速度最快</span></span></span></span></p>\n<hr />\n<h3 id=\"缺点\"><a class=\"anchor\" href=\"#缺点\">#</a> 缺点</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230215232905817.png\" alt=\"image-20230215232905817\" /></p>\n<p>若此时文件  <code>A</code>  要拓展，需要再增加一个磁盘块（总共需要连续的 4 个磁盘块）。</p>\n<p>由于采用连续结构，因此文件 A 占用的磁盘块必须是连续的。</p>\n<p>因此只能将文件  <code>A</code>  <strong>全部 “迁移”</strong> 到绿色区域。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230215233014346.png\" alt=\"image-20230215233014346\" /></p>\n<p>结论：物理上采用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>连续分配的文件不方便拓展</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}连续分配的文件不方便拓展</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">连续分配的文件不方便拓展</span></span></span></span></p>\n<ul>\n<li>类比于在数组中插入一个数据，要么后面的数据右移，要么当前连续的数据移到其中空闲的区域</li>\n</ul>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230215233227126.png\" alt=\"image-20230215233227126\" /></p>\n<p>结论：物理上采用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>连续分配，存储空间利用率低，会产生难以利用的磁盘碎片</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}连续分配，存储空间利用率低，会产生难以利用的磁盘碎片</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">连续分配，存储空间利用率低，会产生难以利用的磁盘碎片</span></span></span></span></p>\n<p>可以用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>紧凑</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}紧凑</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">紧凑</span></span></span></span>来处理碎片，但是需要耗费很大的时间代价。</p>\n<ul>\n<li>因为剩余空闲的磁盘块离散的存放，而导致当前连续的文件无法为其分配连续的足够的存储空间</li>\n</ul>\n<hr />\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>优点</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}优点</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">优点</span></span></span></span>：支持顺序访问和直接访问（即随机访问）；连续分配的文件在顺序访问时速度最快</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>缺点</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}缺点</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">缺点</span></span></span></span>：不方便文件拓展；存储空间利用率低，会产生磁盘碎片</p>\n<hr />\n<h2 id=\"链接分配\"><a class=\"anchor\" href=\"#链接分配\">#</a> 链接分配</h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>链接分配</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}链接分配</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">链接分配</span></span></span></span>采取离散分配的方式，可以为文件分配离散的磁盘块。分为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>隐式链接</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}隐式链接</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">隐式链接</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>显式链接</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}显式链接</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">显式链接</span></span></span></span>两种。</p>\n<h3 id=\"隐式链接\"><a class=\"anchor\" href=\"#隐式链接\">#</a> 隐式链接</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230215233847050.png\" alt=\"image-20230215233847050\" /></p>\n<h4 id=\"如何实现文件的逻辑块号到物理块号的转变\"><a class=\"anchor\" href=\"#如何实现文件的逻辑块号到物理块号的转变\">#</a> 如何实现文件的逻辑块号到物理块号的转变？</h4>\n<p>从目录项中找到起始块号（即 0 号块），将 0 号逻辑块读入内存，由此知道 1 号逻辑块存放的物理块号，于是读入 1 号逻辑块，再找到 2 号逻辑块的存放位置....… 以此类推。</p>\n<p>因此，读入  <code>i</code>  号逻辑块，总共需要  <code>i +1</code>  次磁盘  <code>l/O</code>  。</p>\n<hr />\n<p>结论：采用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>链式分配（隐式链接）</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}链式分配（隐式链接）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">链式分配（隐式链接）</span></span></span></span>方式的文件，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>只支持顺序访问，不支持随机访问</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}只支持顺序访问，不支持随机访问</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">只支持顺序访问，不支持随机访问</span></span></span></span>，查找效率低。</p>\n<ul>\n<li>只有知道了前一个逻辑块号的物理地址，才知道当前逻辑块号（由前面一个逻辑块推出来）</li>\n</ul>\n<p>另外，指向下一个盘块的指针也需要耗费少量的存储空间。</p>\n<hr />\n<p><strong>是否方便拓展文件？</strong></p>\n<ul>\n<li>只需随便在磁盘中找到一个空闲的块，并将其挂到链尾即可</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230215234508572.png\" alt=\"image-20230215234508572\" /></p>\n<hr />\n<p>结论：采用隐式链接的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>链接分配方式，很方便文件拓展</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}链接分配方式，很方便文件拓展</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">链接分配方式，很方便文件拓展</span></span></span></span>。</p>\n<p>另外，所有的空闲磁盘块都可以被利用，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>不会有碎片问题，外存利用率高</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}不会有碎片问题，外存利用率高</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">不会有碎片问题，外存利用率高</span></span></span></span>。</p>\n<hr />\n<h4 id=\"总结-2\"><a class=\"anchor\" href=\"#总结-2\">#</a> 总结</h4>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>隐式链接</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}隐式链接</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">隐式链接</span></span></span></span>――除文件的最后一个盘块之外，每个盘块中都存有指向下一个盘块的指针。文件目录包括文件第一块的指针和最后一块的指针。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>优点</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}优点</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">优点</span></span></span></span>：很方便文件拓展，不会有碎片问题，外存利用率高。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>缺点</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}缺点</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">缺点</span></span></span></span>：只支持顺序访问，不支持随机访问，查找效率低，指向下一个盘块的指针也需要耗费少量的存储空间。</p>\n<hr />\n<h3 id=\"显示链接fat\"><a class=\"anchor\" href=\"#显示链接fat\">#</a> 显示链接（FAT）</h3>\n<p><strong>把用于链接文件各物理块的指针显式地存放在一张表中</strong>。即文件分配表（ <code>FAT</code> ，File Allocation Table)</p>\n<ul>\n<li>例如：数组模拟链表（静态链表）</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230215235043754.png\" alt=\"image-20230215235043754\" /></p>\n<p>假设某个新创建的文件 “aaa” 依次存放在磁盘块 2 -&gt; 5 -&gt; 0 -&gt; 1</p>\n<p>假设某个新创建的文件 “bbb” 依次存放在磁盘块 4 -&gt; 23 -&gt; 3</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>注意：一个磁盘仅设置一张</mtext><mi>F</mi><mi>A</mi><mi>T</mi><mtext>。开机时，将</mtext><mi>F</mi><mi>A</mi><mi>T</mi><mtext>读入内存，并常驻内存。</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}注意：一个磁盘仅设置一张 FAT。开机时，将 FAT 读入内存，并常驻内存。</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">注意：一个磁盘仅设置一张</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">F</span><span class=\"mord mathnormal\" style=\"color:red;\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">T</span><span class=\"mord cjk_fallback\" style=\"color:red;\">。开机时，将</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">F</span><span class=\"mord mathnormal\" style=\"color:red;\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">T</span><span class=\"mord cjk_fallback\" style=\"color:red;\">读入内存，并常驻内存。</span></span></span></span></p>\n<p><code>FAT</code>  的各个表项在物理上<strong>连续存储</strong>，且<strong>每一个表项长度相同</strong>，因此 “物理块号” 字段可以是隐含的。</p>\n<hr />\n<h4 id=\"如何实现文件的逻辑块号到物理块号的转变-2\"><a class=\"anchor\" href=\"#如何实现文件的逻辑块号到物理块号的转变-2\">#</a> 如何实现文件的逻辑块号到物理块号的转变？</h4>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230215235448330.png\" alt=\"image-20230215235448330\" /></p>\n<p>用户给出要访问的逻辑块号  <code>i</code> ，操作系统找到该文件对应的目录项（ <code>FCB</code> ） ...</p>\n<p>从目录项中找到起始块号，若  <code>i &gt; 0</code> ，则查询内存中的文件分配表  <code>FAT</code> ，往后找到  <code>i</code>  号逻辑块对应的物理块号。<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>逻辑块号转换成物理块号的过程不需要读磁盘操作</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}逻辑块号转换成物理块号的过程不需要读磁盘操作</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">逻辑块号转换成物理块号的过程不需要读磁盘操作</span></span></span></span>。</p>\n<ul>\n<li>例：若用户想要访问一个文件 &quot;aaa&quot; 的 2 号逻辑块。操作系统首先找到文件 &quot;aaa&quot; 的 0 号逻辑块存放的物理块号是 2，操作系统查询文件分配表，0 号逻辑块下一个逻辑块（1 号逻辑块的）应该是存放在 5 号物理块当中的。1 号逻辑块的下一逻辑块（2 号逻辑块）存放在 0 号物理块当中。于是就知道用户想要访问的 2 号逻辑块存放的物理块号了</li>\n</ul>\n<hr />\n<p>结论：采用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>链式分配（显式链接）</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}链式分配（显式链接）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">链式分配（显式链接）</span></span></span></span>方式的文件，支持顺序访问，也<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>支持随机访问（想访问</mtext><mi>i</mi><mtext>号逻辑块时，并不需要依次访问之前的</mtext><mn>0</mn><mtext> </mtext><mi>i</mi><mo>−</mo><mn>1</mn><mtext>号逻辑块</mtext><mo stretchy=\"false\">)</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}支持随机访问（想访问 i 号逻辑块时，并不需要依次访问之前的 0 ~ i - 1号逻辑块)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">支持随机访问（想访问</span><span class=\"mord mathnormal\" style=\"color:red;\">i</span><span class=\"mord cjk_fallback\" style=\"color:red;\">号逻辑块时，并不需要依次访问之前的</span><span class=\"mord\" style=\"color:red;\">0</span><span class=\"mspace nobreak\" style=\"color:red;\"><span style=\"color:red;\"> </span></span><span class=\"mord mathnormal\" style=\"color:red;\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\" style=\"color:red;\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:red;\">1</span><span class=\"mord cjk_fallback\" style=\"color:red;\">号逻辑块</span><span class=\"mclose\" style=\"color:red;\">)</span></span></span></span>，由于块号转换的过程<strong>不需要访问磁盘</strong>，因此相比于隐式链接来说，访问速度快很多。</p>\n<ul>\n<li><strong>对  <code>FAT</code>  表的顺序访问，来支持磁盘的随机访问</strong></li>\n<li>对内存访问的速度与  <code>I/O</code>  访问的速度不是一个数量级的，内存中的访问  <code>FAT</code>  表操作默认不耗时间</li>\n</ul>\n<p>显然，显式链接<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>也不会产生外部碎片，也可以很方便地对文件进行拓展</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}也不会产生外部碎片，也可以很方便地对文件进行拓展</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">也不会产生外部碎片，也可以很方便地对文件进行拓展</span></span></span></span>。</p>\n<ul>\n<li>只需要在  <code>FAT</code>  表中添加下一物理块号即可</li>\n</ul>\n<hr />\n<h4 id=\"总结-3\"><a class=\"anchor\" href=\"#总结-3\">#</a> 总结</h4>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>显式链接</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}显式链接</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">显式链接</span></span></span></span>――把用于链接文件各物理块的指针显式地存放在一张表中， 即<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>文件分配表</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}文件分配表</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">文件分配表</span></span></span></span>（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mi>F</mi><mi>A</mi><mi>T</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}FAT</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">F</span><span class=\"mord mathnormal\" style=\"color:red;\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">T</span></span></span></span>， File Allocation Table）。</p>\n<p><strong>一个磁盘只会建立一张文件分配表</strong>。开机时文件分配表放入内存，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>并常驻内存</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}并常驻内存</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">并常驻内存</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>优点</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}优点</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">优点</span></span></span></span>：很方便文件拓展，不会有碎片问题，外存利用率高，并且<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>支持随机访问</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}支持随机访问</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">支持随机访问</span></span></span></span>。</p>\n<ul>\n<li>相比于隐式链接来说，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>地址转换时不需要访问磁盘，因此文件的访问效率更高</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}地址转换时不需要访问磁盘，因此文件的访问效率更高</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">地址转换时不需要访问磁盘，因此文件的访问效率更高</span></span></span></span>。</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>缺点</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}缺点</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">缺点</span></span></span></span>：文件分配表的需要占用一定的存储空间。</p>\n<hr />\n<p>若遇到未指明隐式 / 显式的 “链接分配”，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>默认</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}默认</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">默认</span></span></span></span>指的是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>隐式链接</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}隐式链接</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">隐式链接</span></span></span></span>的链接分配</p>\n<h2 id=\"索引分配\"><a class=\"anchor\" href=\"#索引分配\">#</a> 索引分配</h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>索引分配</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}索引分配</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">索引分配</span></span></span></span>允许文件离散地分配在各个磁盘块中，系统会<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>为每个文件建立一张索引表</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}为每个文件建立一张索引表</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">为每个文件建立一张索引表</span></span></span></span>，索引表中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>记录了文件的各个逻辑块对应的物理块</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}记录了文件的各个逻辑块对应的物理块</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">记录了文件的各个逻辑块对应的物理块</span></span></span></span>（索引表的功能类似于内存管理中的页表――建立逻辑页面到物理页之间的映射关系）。</p>\n<p>索引表存放的磁盘块称为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>索引块</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}索引块</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">索引块</span></span></span></span>。文件数据存放的磁盘块称为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>数据块</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}数据块</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">数据块</span></span></span></span>。</p>\n<hr />\n<p>假设某个新创建的文件 “aaa” 的数据依次存放在磁盘块 2 → 5  → 13 → 9。</p>\n<p>7 号磁盘块作为 “aaa” 的索引块，索引块中保存了索引表的内容。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230216191003371.png\" alt=\"image-20230216191003371\" /></p>\n<hr />\n<p>注：在显式链接的链式分配方式中，文件分配表  <code>FAT</code>  是<strong>一个磁盘对应一张</strong>。</p>\n<ul>\n<li>而索引分配方式中，索引表是<strong>一个文件对应一张</strong>。</li>\n</ul>\n<p>可以用<strong>固定的长度</strong>表示物理块号</p>\n<ul>\n<li>\n<p>如：假设磁盘总容量为 1 TB = 2&lt;sup&gt;40&lt;/sup&gt; B，磁盘块大小为 1 KB，则共有 2&lt;sup&gt;30&lt;/sup&gt; 个磁盘块，<strong>则可用 4 B 表示磁盘块号</strong></p>\n</li>\n<li>\n<p>因此，索引表中的 “逻辑块号” 可以是隐含的。</p>\n</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230216191445006.png\" alt=\"image-20230216191445006\" /></p>\n<hr />\n<h3 id=\"如何实现文件的逻辑块号到物理块号的转变-3\"><a class=\"anchor\" href=\"#如何实现文件的逻辑块号到物理块号的转变-3\">#</a> 如何实现文件的逻辑块号到物理块号的转变？</h3>\n<p>用户给出要访问的逻辑块号  <code>i</code> ，操作系统找到该文件对应的目录项（ <code>FCB</code> ），从中找到这个文件对应的索引块的块号，再从这个索引块中读取这个文件的索引表的内容，然后通过逻辑块号  <code>i</code>  查询这个索引表得出该逻辑块号对应的物理块号即可</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230216202529194.png\" alt=\"image-20230216202529194\" /></p>\n<hr />\n<p>可见，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>索引分配方式可以支持随机访问</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}索引分配方式可以支持随机访问</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">索引分配方式可以支持随机访问</span></span></span></span>。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>文件拓展也很容易实现</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}文件拓展也很容易实现</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">文件拓展也很容易实现</span></span></span></span></p>\n<ul>\n<li>只需要给文件分配一个空闲块，并增加一个索引表项即可</li>\n</ul>\n<p>但是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>索引表需要占用一定的存储空间</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}索引表需要占用一定的存储空间</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">索引表需要占用一定的存储空间</span></span></span></span></p>\n<hr />\n<p>若每个磁盘块 1 KB，一个索引表项 4 B，则一个磁盘块只能存放 256 个索引项。</p>\n<p>如果一个文件的大小超过了 256 块，那么一个磁盘块是装不下文件的整张索引表的，如何解决这个问题？</p>\n<h3 id=\"链接方案\"><a class=\"anchor\" href=\"#链接方案\">#</a> 链接方案</h3>\n<p>① <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>链接方案</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}链接方案</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">链接方案</span></span></span></span>：如果索引表太大，一个索引块装不下，那么可以将多个索引块链接起来存放</p>\n<hr />\n<p>若每个磁盘块 1 KB，一个索引表项 4 B，则一个磁盘块只能存放 256 个索引项。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230216203339881.png\" alt=\"image-20230216203339881\" /></p>\n<p>采用链接方案，文件的  <code>FCB</code>  只需要存放第一个索引块号</p>\n<hr />\n<p>假设磁盘块大小为 1 KB，一个索引表项占 4 B，则一个磁盘块只能存放 256 个索引项。</p>\n<p>若一个文件大小为 256 * 256 KB = 65,536 KB= 64 MB</p>\n<p>该文件共有 256 * 256（64 MB） 个块，也就对应 256 * 256 个索引项，也就需要 256 个索引块来存储这些索引块用链接方案连起来。</p>\n<p>若想要访问文件的最后一个逻辑块，就必须找到最后一个索引块（第 256 个索引块），而各个索引块之间是用指针链接起来的，<strong>因此必须先顺序地读入前 255 个索引块。</strong></p>\n<p>这显然是很低效的。</p>\n<hr />\n<h3 id=\"多层索引\"><a class=\"anchor\" href=\"#多层索引\">#</a> 多层索引</h3>\n<p>② <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>多层索引</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}多层索引</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">多层索引</span></span></span></span>：建立多层索引（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>原理类似于多级页表</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}原理类似于多级页表</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">原理类似于多级页表</span></span></span></span>）。使第一层索引块指向第二层的索引块。还可根据文件大小的要求再建立第三层、第四层索引块。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230216204106638.png\" alt=\"image-20230216204106638\" /></p>\n<p>假设磁盘块大小为 1 KB，一个索引表项占 4 B，则一个磁盘块只能存放 256 个索引项。</p>\n<p>若某文件采用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>两层索引</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}两层索引</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">两层索引</span></span></span></span>，则该<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>文件的最大长度</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}文件的最大长度</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">文件的最大长度</span></span></span></span>可以到 256 * 256 * 1 KB = 65,536 KB = 64 MB</p>\n<hr />\n<p>如：要访问 1026 号逻辑块，则 1026 / 256 = 4，1026 % 256 = 2</p>\n<p>因此可以先将一级索引表调入内存，查询 4 号表项，将其对应的二级索引表调入内存，再查询二级索引表的 2 号表项即可知道 1026 号逻辑块存放的磁盘块号了。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>访问目标数据块，需要</mtext><mn>3</mn><mtext>次磁盘</mtext><mi>I</mi><mi mathvariant=\"normal\">/</mi><mi>O</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}访问目标数据块，需要 3 次磁盘 I/O</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">访问目标数据块，需要</span><span class=\"mord\" style=\"color:red;\">3</span><span class=\"mord cjk_fallback\" style=\"color:red;\">次磁盘</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;color:red;\">I</span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">O</span></span></span></span>。</p>\n<hr />\n<p>若采用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>三层索引</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}三层索引</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">三层索引</span></span></span></span>，则<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>文件的最大长度</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}文件的最大长度</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">文件的最大长度</span></span></span></span>为 256 * 256 * 256 * 1 KB =16 GB</p>\n<hr />\n<p>采用 K 层索引结构，且<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mo>&lt;</mo><mi>b</mi><mo>&gt;</mo><mtext>顶级索引表未调入内存</mtext><mo>&lt;</mo><mi mathvariant=\"normal\">/</mi><mi>b</mi><mo>&gt;</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}&lt;b&gt;顶级索引表未调入内存&lt;/b&gt;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\" style=\"color:red;\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">顶级索引表未调入内存</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord mathnormal\" style=\"color:red;\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">&gt;</span></span></span></span>，则访问一个数据块只需要 K+1 次读磁盘操作</p>\n<hr />\n<h3 id=\"混合索引\"><a class=\"anchor\" href=\"#混合索引\">#</a> 混合索引</h3>\n<p>③ <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>混合索引</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}混合索引</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">混合索引</span></span></span></span>：多种索引分配方式的结合。例如，一个文件的顶级索引表中，既包含<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>直接地址索引</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}直接地址索引</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">直接地址索引</span></span></span></span>（直接指向<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>数据块</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}数据块</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">数据块</span></span></span></span>），又包含<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>一级间接索引</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}一级间接索引</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">一级间接索引</span></span></span></span>（指向单层索引表)、还包含<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>两级间接索引</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}两级间接索引</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">两级间接索引</span></span></span></span>（指向两层索引表)。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230216205011714.png\" alt=\"image-20230216205011714\" /></p>\n<p>若顶级索引表<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>还没读入内存</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}还没读入内存</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">还没读入内存</span></span></span></span></p>\n<p>访问 0 ~ 7 号逻辑块：两次读磁盘</p>\n<ul>\n<li>根据  <code>FCB</code>  中的索引块号得出顶级索引表的物理地址，将顶级索引表读出内存后，根据相应的逻辑块号（0 ~ 7）读出目标数据块的物理块号</li>\n</ul>\n<p>访问 8 ~ 263：三次读磁盘</p>\n<p>访问 264 ~ 65799：四次读磁盘</p>\n<p><strong>对于小文件，只需较少的读磁盘次数就可以访问目标数据块</strong>。(一般计算机中小文件更多)</p>\n<hr />\n<h3 id=\"总结-4\"><a class=\"anchor\" href=\"#总结-4\">#</a> 总结</h3>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>索引分配</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}索引分配</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">索引分配</span></span></span></span>允许文件离散地分配在各个磁盘块中，系统会<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>为每个文件建立一张索引表</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}为每个文件建立一张索引表</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">为每个文件建立一张索引表</span></span></span></span>，索引表中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>记录了文件的各个逻辑块对应的物理块</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}记录了文件的各个逻辑块对应的物理块</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">记录了文件的各个逻辑块对应的物理块</span></span></span></span>（索引表的功能类似于内存管理中的页表――建立逻辑页面到物理页之间的映射关系）。</p>\n<p>索引表存放的磁盘块称为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>索引块</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}索引块</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">索引块</span></span></span></span>。文件数据存放的磁盘块称为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>数据块</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}数据块</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">数据块</span></span></span></span>。</p>\n<p>若文件太大，索引表项太多，可以采取以下三种方法解决:</p>\n<p>① <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>链接方案</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}链接方案</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">链接方案</span></span></span></span>：如果索引表太大，一个索引块装不下，那么可以将多个索引块链接起来存放。</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>缺点</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}缺点</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">缺点</span></span></span></span>：若文件很大，索引表很长，就需要将很多个索引块链接起来。想要找到  <code>i</code>  号索引块，必须先依次读入 <code>0 ~ i - 1</code>  号索引块，这就导致磁盘  <code>l/O</code>  次数过多，查找效率低下。</li>\n</ul>\n<hr />\n<p>② <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>多层索引</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}多层索引</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">多层索引</span></span></span></span>：建立多层索引（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>原理类似于多级页表</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}原理类似于多级页表</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">原理类似于多级页表</span></span></span></span>）。使第一层索引块指向第二层的索引块。还可根据文件大小的要求再建立第三层、第四层索引块。采用 K 层索引结构，且<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>顶级索引表未调入内存</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}顶级索引表未调入内存</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">顶级索引表未调入内存</span></span></span></span>，则访问一个数据块只需要 K + 1 次读磁盘操作。</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>缺点</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}缺点</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">缺点</span></span></span></span>：即使是小文件，访问一个数据块依然需要 K + 1 次读磁盘。</li>\n</ul>\n<hr />\n<p>③ <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>混合索引</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}混合索引</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">混合索引</span></span></span></span>：多种索引分配方式的结合。例如，一个文伴的顶级索引表中，既包含<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>直接地址索引</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}直接地址索引</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">直接地址索引</span></span></span></span>（直接指向数据块），又包含<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>一级间接索引</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}一级间接索引</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">一级间接索引</span></span></span></span>（指向单层索引表)、还包含<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>两级间接索引</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}两级间接索引</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">两级间接索引</span></span></span></span>（指向两层索引表）。</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>优点</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}优点</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">优点</span></span></span></span>：对于小文件来说，访问一个数据块所需的读磁盘次数更少。</li>\n</ul>\n<hr />\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mo>&lt;</mo><mi>b</mi><mo>&gt;</mo><mtext>超级超级超级重要考点</mtext><mo>&lt;</mo><mi mathvariant=\"normal\">/</mi><mi>b</mi><mo>&gt;</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}&lt;b&gt;超级超级超级重要考点&lt;/b&gt;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\" style=\"color:red;\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">超级超级超级重要考点</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord mathnormal\" style=\"color:red;\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">&gt;</span></span></span></span>：</p>\n<ul>\n<li>① 要会根据多层索引、混合索引的结构计算出文件的最大长度（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mo>&lt;</mo><mi>b</mi><mo>&gt;</mo><mi>K</mi><mi>e</mi><mi>y</mi><mo>&lt;</mo><mi mathvariant=\"normal\">/</mi><mi>b</mi><mo>&gt;</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}&lt;b&gt;Key&lt;/b&gt;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\" style=\"color:red;\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:red;\">Key</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord mathnormal\" style=\"color:red;\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">&gt;</span></span></span></span>：各级索引表最大不能超过一个块）；</li>\n<li>② 要能自己分析访问某个数据块所需要的读磁盘次数（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mo>&lt;</mo><mi>b</mi><mo>&gt;</mo><mi>K</mi><mi>e</mi><mi>y</mi><mo>&lt;</mo><mi mathvariant=\"normal\">/</mi><mi>b</mi><mo>&gt;</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}&lt;b&gt;Key&lt;/b&gt;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\" style=\"color:red;\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:red;\">Key</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord mathnormal\" style=\"color:red;\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">&gt;</span></span></span></span>： <code>FCB</code>  中会存有指向顶级索引块的指针，因此可以根据  <code>FCB</code>  读入顶级索引块。每次读入下一级的索引块都需要一次读磁盘操作。</li>\n<li>另外，要<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>注意题目条件――顶级索引块是否已调入内存</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}注意题目条件――顶级索引块是否已调入内存</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">注意题目条件</span><span class=\"mord\" style=\"color:red;\">――</span><span class=\"mord cjk_fallback\" style=\"color:red;\">顶级索引块是否已调入内存</span></span></span></span>）</li>\n</ul>\n<h2 id=\"总结-5\"><a class=\"anchor\" href=\"#总结-5\">#</a> 总结</h2>\n<p>&lt;table height=&quot;300&quot; width=&quot;300&quot; border=&quot;1&quot; &gt;<br />\n&lt;thead&gt;<br />\n&lt;tr&gt;<br />\n&lt;th colspan=&quot;2&quot;&gt;&lt;/th&gt;<br />\n&lt;th&gt;How?&lt;/th&gt;<br />\n&lt;th&gt; 目录项内容 &lt;/th&gt;<br />\n&lt;th&gt; 优点 &lt;/th&gt;<br />\n&lt;th&gt; 缺点 &lt;/th&gt;<br />\n&lt;/tr&gt;<br />\n&lt;/thead&gt;<br />\n&lt;tbody&gt;<br />\n&lt;tr&gt;<br />\n&lt;td colspan=&quot;2&quot;&gt; 顺序分配 &lt;/td&gt;<br />\n&lt;td&gt; 为文件分配的必须是连续的磁盘块 &lt;/td&gt;<br />\n&lt;td&gt; 起始块号、文件长度 &lt;/td&gt;<br />\n&lt;td&gt; 顺序存取速度快，支持随机访问 &lt;/td&gt;<br />\n&lt;td&gt; 会产生碎片，不利于文件拓展 &lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td rowspan=&quot;2&quot;&gt; 链接分配 &lt;/td&gt;<br />\n&lt;td&gt; 隐式链接 &lt;/td&gt;<br />\n&lt;td&gt; 出文件的最后一个盘块之外，每个盘块都存有下一个盘块的指针 &lt;/td&gt;<br />\n&lt;td&gt; 起始块号、结束块号 &lt;/td&gt;<br />\n&lt;td&gt; 可解决碎片问题，外村利用率高，文件拓展方便实现 &lt;/td&gt;<br />\n&lt;td&gt; 只能顺序访问，不能随机访问 &lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt; 显式链接 &lt;/td&gt;<br />\n&lt;td&gt; 建立一张文件分配表 ( FAT ), 显示记录盘块的先后关系 &lt;/br&gt;(开机后 FAT 常驻内存)&lt;/td&gt;<br />\n&lt;td&gt; 起始块号 &lt;/td&gt;<br />\n&lt;td&gt; 除了拥有隐式链接的优点外，还可以通过查询内存中的 FAT 实现随机访问 &lt;/td&gt;<br />\n&lt;td&gt;FAT 需要占用一定的存储空间 &lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;td colspan=&quot;2&quot;&gt; 索引分配 &lt;/td&gt;<br />\n&lt;td&gt; 为文件数据块建立索引表，若文件太大，可采用链接方案、多层索引、混合索引 &lt;/td&gt;<br />\n&lt;td&gt; 链接方案记录的是第一个索引块的块号，多层 / 混合索引记录的是顶级索引块的块号 &lt;/td&gt;<br />\n&lt;td&gt; 支持随机访问，易于实现文件的拓展 &lt;/td&gt;<br />\n&lt;td&gt; 索引表需占用一定的存储空间。访问数据块前需要先读入索引块，查找索引块时可能需要多次都磁盘操作 &lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;/tbody&gt;<br />\n&lt;/table&gt;</p>\n<h1 id=\"文件存储空间管理对空闲磁盘块管理\"><a class=\"anchor\" href=\"#文件存储空间管理对空闲磁盘块管理\">#</a> 文件存储空间管理（对空闲磁盘块管理）</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230216213358896.png\" alt=\"image-20230216213358896\" /></p>\n<hr />\n<h2 id=\"存储空间的划分与初始化\"><a class=\"anchor\" href=\"#存储空间的划分与初始化\">#</a> 存储空间的划分与初始化</h2>\n<p>安装 Windows 操作系统的时候，一个必经步骤是――为磁盘分区（C: 盘、D: 盘、E: 盘等）</p>\n<ul>\n<li>存储空间的划分：将物理磁盘划分为一个个文件卷（逻辑卷、逻辑盘)</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230216213723772.png\" alt=\"image-20230216213723772\" /></p>\n<h2 id=\"空闲表法\"><a class=\"anchor\" href=\"#空闲表法\">#</a> 空闲表法</h2>\n<p><strong>适用于 &quot;连续分配方式&quot;</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230216214940121.png\" alt=\"image-20230216214940121\" /></p>\n<p>如何分配磁盘块：与内存管理中的动态分区分配很类似，为一个文件<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>分配连续的存储空间</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}分配连续的存储空间</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">分配连续的存储空间</span></span></span></span>。同样<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>可采用首次适应、最佳适应、最坏适应等算法</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}可采用首次适应、最佳适应、最坏适应等算法</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">可采用首次适应、最佳适应、最坏适应等算法</span></span></span></span>来决定要为文件分配哪个区间。</p>\n<p>Eg：新创建的文件请求 3 个块，采用<strong>首次适应算法</strong></p>\n<ul>\n<li>每次都从第一个空闲盘块号开始查找，找到第一个能满足大小的空闲盘块。</li>\n</ul>\n<hr />\n<p>如何回收磁盘块：与内存管理中的动态分区分配很类似，当回收某个存储区时需要有四种情况―—</p>\n<p>① 回收区的前后都没有相邻空闲区；</p>\n<p>② 回收区的前后都是空闲区；</p>\n<ul>\n<li>合并</li>\n</ul>\n<p>③ 回收区前面是空闲区；</p>\n<ul>\n<li>合并</li>\n</ul>\n<p>④ 回收区后面是空闲区。</p>\n<ul>\n<li>合并</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>总之，回收时需要注意表项的合并问题</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}总之，回收时需要注意表项的合并问题</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">总之，回收时需要注意表项的合并问题</span></span></span></span>。</p>\n<hr />\n<p>例如：② 回收区的前后都是空闲区；</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230216215708925.png\" alt=\"image-20230216215708925\" /></p>\n<hr />\n<h2 id=\"空闲链表法\"><a class=\"anchor\" href=\"#空闲链表法\">#</a> 空闲链表法</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230216215910501.png\" alt=\"image-20230216215910501\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230216220352619.png\" alt=\"image-20230216220352619\" /></p>\n<h3 id=\"空闲盘块链\"><a class=\"anchor\" href=\"#空闲盘块链\">#</a> 空闲盘块链</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230216220135738.png\" alt=\"image-20230216220135738\" /></p>\n<p>操作系统保存着<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>链头、链尾指针</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}链头、链尾指针</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">链头、链尾指针</span></span></span></span>。</p>\n<p>如何分配：若某文件申请 K 个盘块，则从链头开始依次摘下 K 个盘块分配，并修改空闲链的链头指针。</p>\n<p>如何回收：回收的盘块依次挂到链尾，并修改空闲链的链尾指针。</p>\n<hr />\n<p>适用于离散分配的物理结构。为文件分配多个盘块时可能要重复多次操作</p>\n<ul>\n<li>依次从链头摘下</li>\n</ul>\n<h3 id=\"空闲盘区链\"><a class=\"anchor\" href=\"#空闲盘区链\">#</a> 空闲盘区链</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230216220409558.png\" alt=\"image-20230216220409558\" /></p>\n<p>操作系统保存着<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>链头、链尾指针</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}链头、链尾指针</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">链头、链尾指针</span></span></span></span>。</p>\n<p>如何分配：若某文件申请 K 个盘块，则可以采用首次适应、最佳适应等算法，从链头开始检索，按照算法规则找到一个大小符合要求的空闲盘区，分配给文件。</p>\n<ul>\n<li>若没有合适的连续空闲块，也可以将<strong>不同盘区的盘块同时分配给一个文件</strong>，注意分配后可能要修改相应的链指针、盘区大小等数据。</li>\n</ul>\n<p>如何回收：若回收区和某个空闲盘区相邻，则需要将回收区合并到空闲盘区中。</p>\n<ul>\n<li>若回收区没有和任何空闲区相邻，将回收区作为单独的一个空闲盘区挂到链尾。</li>\n</ul>\n<hr />\n<p>离散分配、连续分配都适用。为一个文件分配多个盘块时效率更高</p>\n<ul>\n<li>可以一次摘下多个盘块</li>\n</ul>\n<h3 id=\"位示图法\"><a class=\"anchor\" href=\"#位示图法\">#</a> 位示图法</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230216221733384.png\" alt=\"image-20230216221733384\" /></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>位示图</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}位示图</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">位示图</span></span></span></span>：每个二进制位对应一个盘块。在本例中，“0” 代表盘块空闲，“1” 代表盘块已分配。</p>\n<p>位示图一般用连续的 “字” 来表示，如本例中一个字的字长是 16 位，字中的每一位对应一个盘块。</p>\n<p>因此<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>可以用（字号，位号）对应一个盘块号</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}可以用（字号，位号）对应一个盘块号</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">可以用（字号，位号）对应一个盘块号</span></span></span></span>。当然有的题目中也描述为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>（行</mtext><mo>&lt;</mo><mtext>号，列号）</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}（行&lt;号，列号）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">（行</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">号，列号）</span></span></span></span></p>\n<p>注意：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>盘块号、字号、位号</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}盘块号、字号、位号</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">盘块号、字号、位号</span></span></span></span>到底是从 0 开始还是从 1 开始。</p>\n<ul>\n<li>要能自己推出盘块号与（字号，位号）相互转换的公式</li>\n</ul>\n<p>如本例中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>盘块号、字号、位号从</mtext><mn>0</mn><mtext>开始</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}盘块号、字号、位号从 0 开始</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">盘块号、字号、位号从</span><span class=\"mord\" style=\"color:red;\">0</span><span class=\"mord cjk_fallback\" style=\"color:red;\">开始</span></span></span></span>，若 n 表示字长，则...</p>\n<p>（字号，位号）= （i，j）的二进制位对应的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>盘块号</mtext><mi>b</mi><mo>=</mo><mi>n</mi><mi>i</mi><mo>+</mo><mi>j</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}盘块号 b = ni + j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">盘块号</span><span class=\"mord mathnormal\" style=\"color:red;\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">ni</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\" style=\"color:red;\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;color:red;\">j</span></span></span></span></p>\n<ul>\n<li>\n<p>（0，1）-&gt; 16 * 0 + 1 = 1</p>\n</li>\n<li>\n<p>（1，10）-&gt; 16 * 1 + 10 = 26</p>\n</li>\n</ul>\n<p>b 号盘块对应的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>字号</mtext><mi>i</mi><mo>=</mo><mi>b</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}字号 i = b / n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">字号</span><span class=\"mord mathnormal\" style=\"color:red;\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">b</span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord mathnormal\" style=\"color:red;\">n</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>位号</mtext><mi>j</mi><mo>=</mo><mi>b</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}位号 j = b % n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">位号</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;color:red;\">j</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">b</span></span></span></span></p>\n<ul>\n<li>b = 13 -&gt; i = 13 / 16 = 0，j = 13 % 16 = 13</li>\n<li>b = 31 -&gt; i = 31 / 16 = 1，j = 31 % 16 = 15</li>\n</ul>\n<hr />\n<p><strong>如何分配</strong>：若文件需要 K 个块</p>\n<ul>\n<li>① 顺序扫描位示图，找到 K 个相邻或不相邻的 “0”;</li>\n<li>② 根据字号、位号算出对应的盘块号，将相应盘块分配给文件；</li>\n<li>③ 将相应位设置为 “1”。</li>\n</ul>\n<p><strong>如何回收</strong>：</p>\n<ul>\n<li>① 根据回收的盘块号计算出对应的字号、位号；</li>\n<li>② 将相应二进制位设为 “0”</li>\n</ul>\n<hr />\n<p>连续分配、离散分配都适用</p>\n<ul>\n<li>若采用连续分配，在位示图中找到连续的 k 个 &quot;0&quot;</li>\n<li>若采用离散分配，在位示图中不需要找到连续的 k 个 &quot;0&quot;</li>\n</ul>\n<h2 id=\"成组链接法\"><a class=\"anchor\" href=\"#成组链接法\">#</a> 成组链接法</h2>\n<p>空闲表法、空闲链表法不适用于大型文件系统，因为空闲表或空闲链表可能过大。 <code>UNIX</code>  系统中采用了<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>成组链接法</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}成组链接法</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">成组链接法</span></span></span></span>对磁盘空闲块进行管理。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>文件卷的目录区</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}文件卷的目录区</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">文件卷的目录区</span></span></span></span>中专门用一个<strong>磁盘块</strong>作为 “<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>超级块</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}超级块</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">超级块</span></span></span></span>”，当系统启动时需要将<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>超级块读入内存</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}超级块读入内存</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">超级块读入内存</span></span></span></span>。并且要保证内存与外存中的 “超级块” 数据一致。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230216222454670.png\" alt=\"image-20230216222454670\" /></p>\n<hr />\n<p><strong>每一个分组最后一个盘块号记录者下一个分组的盘块地址</strong></p>\n<p>最后一个分组比其他分组要少一块，因为到此已经没有下一组盘块了</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230216223039616.png\" alt=\"image-20230216223039616\" /></p>\n<p><strong>如何分配？</strong></p>\n<p>Eg：需要 1 个空闲块</p>\n<p>① 检查第一个分组的块数是否足够。1 &lt; 100，因此是足够的。</p>\n<p>② 分配第一个分组中的 1 个空闲块，并修改相应数据</p>\n<p>Eg：需要 100 个空闲块</p>\n<p>① 检查第一个分组的块数是否足够。100 = 100，因此是足够的。</p>\n<p>② 分配第一个分组中的 100 个空闲块。但是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>由于</mtext><mn>300</mn><mtext>号块内存放了再下一组的信息，因此</mtext><mn>300</mn><mtext>号块的数据需要复制到超级块中</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}由于 300 号块内存放了再下一组的信息，因此 300 号块的数据需要复制到超级块中</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">由于</span><span class=\"mord\" style=\"color:red;\">300</span><span class=\"mord cjk_fallback\" style=\"color:red;\">号块内存放了再下一组的信息，因此</span><span class=\"mord\" style=\"color:red;\">300</span><span class=\"mord cjk_fallback\" style=\"color:red;\">号块的数据需要复制到超级块中</span></span></span></span>。</p>\n<ul>\n<li>即：需要将这个分组指向下一分组的链接信息复制到超级块中</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230216223624710.png\" alt=\"image-20230216223624710\" /></p>\n<hr />\n<p><strong>如何回收？</strong></p>\n<p>Eg：假设每个分组最多为 100 个空闲块，此时第一个分组已有 99 个块，还要再回收一个块</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230216224050902.png\" alt=\"image-20230216224050902\" /></p>\n<p>Eg：假设每个分组最多为 100 个空闲块，此时第一个分组已有 100 个块，还要再回收一个块</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>需要将超级块中的数据复制到新回收的块中，并修改超级块的内容，让新回收的块成为第一个分组</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}需要将超级块中的数据复制到新回收的块中，并修改超级块的内容，让新回收的块成为第一个分组</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">需要将超级块中的数据复制到新回收的块中，并修改超级块的内容，让新回收的块成为第一个分组</span></span></span></span>。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230216224355411.png\" alt=\"image-20230216224355411\" /></p>\n<h2 id=\"整体框架-4\"><a class=\"anchor\" href=\"#整体框架-4\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230216225001772.png\" alt=\"image-20230216225001772\" /></p>\n<h1 id=\"文件的基本操作\"><a class=\"anchor\" href=\"#文件的基本操作\">#</a> 文件的基本操作</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230217000905970.png\" alt=\"image-20230217000905970\" /></p>\n<h2 id=\"创建文件\"><a class=\"anchor\" href=\"#创建文件\">#</a> 创建文件</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230217000937551.png\" alt=\"image-20230217000937551\" /></p>\n<p>进行 Create 系统调用时，需要提供的几个主要参数:</p>\n<ol>\n<li>所需的外存空间大小（如：一个盘块，即 1 KB）</li>\n<li>文件存放路径（&quot;D:/Demo&quot;）</li>\n<li>文件名（这个地方默认为 &quot;新建文本文档.txt&quot;）</li>\n</ol>\n<p>操作系统在处理 Create 系统调用时，主要做了两件事：</p>\n<ol>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>在外存中找到文件所需的空间</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}在外存中找到文件所需的空间</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">在外存中找到文件所需的空间</span></span></span></span>（空闲链表、位示图、成组链接法等管理策略，找到空闲空间）</li>\n<li>根据文件存放路径的信息找到该目录对应的目录文件（此处就是 D:/Demo 目录），在目录中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>创建该文件对应的目录项</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}创建该文件对应的目录项</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">创建该文件对应的目录项</span></span></span></span>。目录项中包含了文件名、文件在外存中的存放位置等信息。</li>\n</ol>\n<h2 id=\"删除文件\"><a class=\"anchor\" href=\"#删除文件\">#</a> 删除文件</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230217001614730.png\" alt=\"image-20230217001614730\" /></p>\n<p>进行 Delete 系统调用时，需要提供的几个主要参数:</p>\n<ol>\n<li>文件存放路径（“D:/Demo”)</li>\n<li>文件名（“test.txt”)</li>\n</ol>\n<p>操作系统在处理 Delete 系统调用时，主要做了几件事:</p>\n<ol>\n<li>根据文件存放路径找到相应的目录文件，从目录中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>找到文件名对应的目录项</mtext><mi>F</mi><mi>C</mi><mi>B</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}找到文件名对应的目录项 FCB</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">找到文件名对应的目录项</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;color:red;\">FCB</span></span></span></span>。</li>\n<li>根据该目录项记录的文件在外存的存放位置、文件大小等信息，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>回收文件占用的磁盘块</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}回收文件占用的磁盘块</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">回收文件占用的磁盘块</span></span></span></span>。（回收磁盘块时，根据空闲表法、空闲链表法、位图法等管理策略的不同，需要做不同的处理）</li>\n</ol>\n<hr />\n<h2 id=\"打开文件\"><a class=\"anchor\" href=\"#打开文件\">#</a> 打开文件</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230217002245088.png\" alt=\"image-20230217002245088\" /></p>\n<p>在很多操作系统中，在对文件进行操作之前，要求用户先使用 open 系统调用 “打开文件”，需要提供的几个主要参数:</p>\n<ol>\n<li>文件存放路径（“D:/Demo”）</li>\n<li>文件名（“test.txt”）</li>\n<li>要对文件的操作类型（如: r 只读；rw 读写等)</li>\n</ol>\n<p>操作系统在处理 open 系统调用时，主要做了几件事:</p>\n<ol>\n<li>根据文件存放路径找到相应的目录文件，从目录项中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>找到文件名对应的目录项</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}找到文件名对应的目录项</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">找到文件名对应的目录项</span></span></span></span>，并检查该用户是否有指定的操作权限。</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>将目录项复制到内存中的“打开文件表”中</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}将目录项复制到内存中的 “打开文件表” 中</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">将目录项复制到内存中的</span><span class=\"mord\" style=\"color:red;\">“</span><span class=\"mord cjk_fallback\" style=\"color:red;\">打开文件表</span><span class=\"mord\" style=\"color:red;\">”</span><span class=\"mord cjk_fallback\" style=\"color:red;\">中</span></span></span></span>。并将对应表目的编号返回给用户。之后<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>用户使用打开文件表的编号来指明要操作的文件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}用户使用打开文件表的编号来指明要操作的文件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">用户使用打开文件表的编号来指明要操作的文件</span></span></span></span>。</li>\n</ol>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230217002827178.png\" alt=\"image-20230217002827178\" /></p>\n<p>打开计数器：记录此时有多少个进程打开了此文件</p>\n<p>读写指针：记录了该进程对文件的读 / 写操作进行到的位置</p>\n<p>可以方便实现某些文件管理的功能。</p>\n<p>例如：在 Windows 系统中，我们尝试删除某个 txt 文件，如果此时该文件已被某个 “记事本” 进 程打开，则系统会提示我们 “暂时无法删除该文件” 。</p>\n<ul>\n<li>其实系统在背后做的事就是先检查了系统打开文件表，确认此时是否有进程正在使用该文件。</li>\n</ul>\n<hr />\n<h2 id=\"关闭文件\"><a class=\"anchor\" href=\"#关闭文件\">#</a> 关闭文件</h2>\n<p>进程使用完文件后，要 “关闭文件”</p>\n<p>操作系统在处理 Close 系统调用时，主要做了几件事:</p>\n<ol>\n<li>将进程的打开文件表相应表项删除</li>\n<li>回收分配给该文件的内存空间等资源</li>\n<li>系统打开文件表的计数器 count 减 1，若 count = 0，择善书对应表项</li>\n</ol>\n<h2 id=\"读文件\"><a class=\"anchor\" href=\"#读文件\">#</a> 读文件</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230217003728571.png\" alt=\"image-20230217003728571\" /></p>\n<p>进程使用 read 系统调用完成写操作。</p>\n<ul>\n<li>\n<p>需要指明是哪个文件（在支持 “打开文件” 操作的系统中，只需要提供文件在打开文件表中的<strong>索引号</strong>即可)，</p>\n</li>\n<li>\n<p>还需要指明要读入多少数据（如：读入 1 KB ）</p>\n</li>\n<li>\n<p>指明读入的数据要放在内存中的什么位置。</p>\n</li>\n</ul>\n<p>操作系统在处理 read 系统调用时，会<strong>从读指针指向的外存中，将用户指定大小的数据读入用户指定的内存区域中。</strong></p>\n<h2 id=\"写文件\"><a class=\"anchor\" href=\"#写文件\">#</a> 写文件</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230217004404747.png\" alt=\"image-20230217004404747\" /></p>\n<p>进程使用 write 系统调用完成写操作</p>\n<ul>\n<li>需要指明是哪个文件（在支持 “打开文件” 操作的系统中，只需要提供文件在打开文件表中的索引号即可)，</li>\n<li>还需要指明要写出多少数据（如：写出 1KB）</li>\n<li>写回外存的数据放在内存中的什么位置</li>\n</ul>\n<p>操作系统在处理 write 系统调用时，<strong>会从用户指定的内存区域中，将指定大小的数据写回写指针指向的外存。</strong></p>\n<hr />\n<h2 id=\"整体框架-5\"><a class=\"anchor\" href=\"#整体框架-5\">#</a> 整体框架</h2>\n<p><strong>打开文件时并不会把文件数据直接读入内存</strong>。</p>\n<p><strong>只有读文件时，才会将文件数据从外村读入内存</strong></p>\n<p>“索引号” 也称 “<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>文件描述符</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}文件描述符</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">文件描述符</span></span></span></span>”</p>\n<p>“读 / 写文件” 用 “文件描述符” 即可指明文件，不再需要用到 “文件名”</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230217005559213.png\" alt=\"image-20230217005559213\" /></p>\n<h1 id=\"文件共享\"><a class=\"anchor\" href=\"#文件共享\">#</a> 文件共享</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230219175622127.png\" alt=\"image-20230219175622127\" /></p>\n<p>操作系统为用户提供文件共享功能，可以让多个用户共享地使用同一个文件</p>\n<hr />\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>注意</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}注意</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">注意</span></span></span></span>：多个用户共享同一个文件，意味着系统中只有 “一份” 文件数据。并且只要某个用户修改了该文件的数据，其他用户也可以看到文件数据的变化。</p>\n<p>如果是多个用户都 “复制” 了同一个文件，那么系统中会有 “好几份” 文件数据。其中一个用户修改了自己的那份文件数据，对其他用户的文件数据并没有影响。</p>\n<hr />\n<h2 id=\"基于索引节点的共享方式硬链接\"><a class=\"anchor\" href=\"#基于索引节点的共享方式硬链接\">#</a> 基于索引节点的共享方式（硬链接）</h2>\n<p>知识回顾：索引结点，是一种文件目录瘦身策略。由于检索文件时只需用到文件名，因此可以将除了文件名之外的其他信息放到索引结点中。这样目录项就只需要包含文件名、索引结点指针。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230219175947703.png\" alt=\"image-20230219175947703\" /></p>\n<p>索引结点中设置一个链接计数变量  <code>count</code> ，用于表示链接到本索引结点上的用户目录项数。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230219180019128.png\" alt=\"image-20230219180019128\" /></p>\n<p>若  <code>count = 2</code> ，说明此时有两个用户目录项链接到该索引结点上，或者说是有两个用户在共享此文件。</p>\n<hr />\n<p>若某个用户决定 “删除” 该文件，则只是要把用户目录中与该文件对应的目录项删除，且索引结点的  <code>count</code>  值减 <code>1</code> 。</p>\n<p>若  <code>count &gt; 0</code> ，说明还有别的用户要使用该文件，暂时不能把文件数据删除，否则会导致指针悬空。</p>\n<p>当  <code>count = 0</code>  时系统负责删除文件。</p>\n<hr />\n<h2 id=\"基于符号链的共享方式软链接\"><a class=\"anchor\" href=\"#基于符号链的共享方式软链接\">#</a> 基于符号链的共享方式（软链接）</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230219180309098.png\" alt=\"image-20230219180309098\" /></p>\n<p>当  <code>User3</code>  访问 “ccc” 时，操作系统判断文件 “ccc” 属于  <code>Link</code>  类型文件，于是会根据其中记录的路径层层查找目录，最终找到  <code>User1</code>  的目录表中的 “aaa” 表项，于是就找到了文件 1 的索引结点。</p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230219180535680.png\" alt=\"image-20230219180535680\" /></p>\n<hr />\n<p><strong>删除文件后，在访问快捷方式</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230219180656527.png\" alt=\"image-20230219180656527\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230219180803294.png\" alt=\"image-20230219180803294\" /></p>\n<h2 id=\"整体框架-6\"><a class=\"anchor\" href=\"#整体框架-6\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230219181037779.png\" alt=\"image-20230219181037779\" /></p>\n<h1 id=\"文件保护\"><a class=\"anchor\" href=\"#文件保护\">#</a> 文件保护</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230219181816899.png\" alt=\"image-20230219181816899\" /></p>\n<h2 id=\"口令保护\"><a class=\"anchor\" href=\"#口令保护\">#</a> 口令保护</h2>\n<p>为文件设置一个 “口令” (如: abc112233），用户请求访问该文件时必须提供 “口令” 。</p>\n<p>口令一般存放在文件对应的  <code>FCB</code>  或索引结点中。用户访问文件前需要先输入 “口令”，操作系统会将用户提供的口令与  <code>FCB</code>  中存储的口令进行对比，如果正确，则允许该用户访问文件</p>\n<hr />\n<p>优点：保存口令的空间开销不多，验证口令的时间开销也很小。</p>\n<p>缺点：正确的 “口令” 存放在系统内部，不够安全。</p>\n<ul>\n<li>若系统被入侵</li>\n</ul>\n<h2 id=\"加密保护\"><a class=\"anchor\" href=\"#加密保护\">#</a> 加密保护</h2>\n<p>使用某个 “密码” 对文件进行加密，在访问文件时需要提供正确的 “密码” 才能对文件进行正确的解密。</p>\n<p>Eg：一个最简单的加密算法 —―异或加密假设用于加密 / 解密的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>“密码”为“</mtext><mn>01001</mn><mtext>”</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}“密码” 为 “01001”</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\" style=\"color:red;\">“</span><span class=\"mord cjk_fallback\" style=\"color:red;\">密码</span><span class=\"mord\" style=\"color:red;\">”</span><span class=\"mord cjk_fallback\" style=\"color:red;\">为</span><span class=\"mord\" style=\"color:red;\">“01001”</span></span></span></span></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230219182406963.png\" alt=\"image-20230219182406963\" /></p>\n<p>优点：保密性强，不需要在系统中存储 “密码”<br />\n 缺点：编码 / 译码，或者说加密 / 解密要花费一定时间。</p>\n<h2 id=\"控制访问精简访问控制表\"><a class=\"anchor\" href=\"#控制访问精简访问控制表\">#</a> 控制访问（(精简) 访问控制表）</h2>\n<p>在每个文件的  <code>FCB</code> （或索引结点）中增加一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>访问控制列表</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}访问控制列表</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">访问控制列表</span></span></span></span>（Access-Control List，ACL)，该表中记录了各个用户可以对该文件执行哪些操作。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230219182657190.png\" alt=\"image-20230219182657190\" /></p>\n<p>有的计算机可能会有很多个用户，因此访问控制列表可能会很大，可以用精简的访问列表解决这个问题</p>\n<hr />\n<p>精简的访问列表：以 “组” 为单位，标记各 “组” 用户可以对文件执行哪些操作。如：分为系统管理员、文件主、文件主的伙伴、其他用户几个分组。</p>\n<p>当某用户想要访问文件时，系统会检查该用户所属的分组是否有相应的访问权限</p>\n<ul>\n<li>系统需要管理分组的信息</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230219182820026.png\" alt=\"image-20230219182820026\" /></p>\n<p>若想要让某个用户能够读取文件，只需要把该用户放入 &quot;文件主的伙伴&quot; 这个分组即可</p>\n<hr />\n<h2 id=\"整体框架-7\"><a class=\"anchor\" href=\"#整体框架-7\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230219183445929.png\" alt=\"image-20230219183445929\" /></p>\n<p>如果对某个目录进行了访问权限的控制，那也要对目录下的所有文件进行相同的访问权限控制</p>\n<h1 id=\"文件系统的层次结构\"><a class=\"anchor\" href=\"#文件系统的层次结构\">#</a> 文件系统的层次结构</h1>\n<p>对于文件的逻辑结构，其中的索引文件，会问文件的记录建立索引表，为了查询这些记录对应的逻辑地址而需要查询索引表。在查询索引表之前需要将其调入到内存的文件信息缓冲区。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230219220206171.png\" alt=\"image-20230219220206171\" /></p>\n<hr />\n<p>用一个例子来辅助记忆文件系统的层次结构:</p>\n<p>假设某用户请求删除文件 “D:/ 工作目录 / 学生信息.xlsx” 的最后 100 条记录。</p>\n<ol>\n<li>\n<p>用户需要通过操作系统提供的接口发出上述请求――<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>用户接口</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}用户接口</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">用户接口</span></span></span></span></p>\n</li>\n<li>\n<p>由于用户提供的是文件的存放路径，因此需要操作系统一层一层地查找目录，找到对应的目录项 —―<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>文件目录系统</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}文件目录系统</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">文件目录系统</span></span></span></span> <a href=\"#4.3%E3%80%81%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95\">4.3、文件目录</a></p>\n</li>\n<li>\n<p>不同的用户对文件有不同的操作权限，因此为了保证安全，需要检查用户是否有访问权限 —―<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>存取控制模块（存取控制验证层</mtext><mo stretchy=\"false\">)</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}存取控制模块（存取控制验证层)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">存取控制模块（存取控制验证层</span><span class=\"mclose\" style=\"color:red;\">)</span></span></span></span> <a href=\"#4.8%E3%80%81%E6%96%87%E4%BB%B6%E4%BF%9D%E6%8A%A4\">4.8、文件保护</a></p>\n<ul>\n<li>因为权限的数据在  <code>FCB</code>  或者  <code>FCB</code>  瘦身后的索引节点里面</li>\n</ul>\n</li>\n<li>\n<p>验证了用户的访问权限之后，需要把用户提供的 “记录号” 转变为对应的逻辑地址――<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>逻辑文件系统与文件信息缓冲区 </mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}逻辑文件系统与文件信息缓冲区 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">逻辑文件系统与文件信息缓冲区</span><span class=\"mord\" style=\"color:red;\"> </span></span></span></span><a href=\"#4.2%E3%80%81%E6%96%87%E4%BB%B6%E7%9A%84%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84\">4.2、文件的逻辑结构</a></p>\n</li>\n<li>\n<p>知道了目标记录对应的逻辑地址后，还需要转换成实际的物理地址――<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>物理文件系统 </mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}物理文件系统 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">物理文件系统</span><span class=\"mord\" style=\"color:red;\"> </span></span></span></span><a href=\"#4.4%E3%80%81%E6%96%87%E4%BB%B6%E7%9A%84%E7%89%A9%E7%90%86%E7%BB%93%E6%9E%84%EF%BC%88%E6%96%87%E4%BB%B6%E5%88%86%E9%85%8D%E6%96%B9%E5%BC%8F%EF%BC%89%EF%BC%88%E5%AF%B9%E9%9D%9E%E7%A9%BA%E9%97%B2%E7%A3%81%E7%9B%98%E5%9D%97%E7%9A%84%E7%AE%A1%E7%90%86%EF%BC%89\">4.4、文件的物理结构（文件分配方式）（对非空闲磁盘块的管理）</a></p>\n</li>\n<li>\n<p>要删除这条记录，必定要对磁盘设备发出请求――$\\color {red} 设备管理程序模块 $[ 5、设备管理](# 5、设备管理)</p>\n</li>\n<li>\n<p>删除这些记录后，会有一些盘块空闲，因此要将这些空闲盘块回收――<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>辅助分配模块</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}辅助分配模块</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">辅助分配模块</span></span></span></span>  <a href=\"#4.5%E3%80%81%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86%EF%BC%88%E5%AF%B9%E7%A9%BA%E9%97%B2%E7%A3%81%E7%9B%98%E5%9D%97%E7%AE%A1%E7%90%86%EF%BC%89\">4.5、文件存储空间管理（对空闲磁盘块管理）</a></p>\n</li>\n</ol>\n<h1 id=\"磁盘的结构\"><a class=\"anchor\" href=\"#磁盘的结构\">#</a> 磁盘的结构</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230219221809202.png\" alt=\"image-20230219221809202\" /></p>\n<h2 id=\"磁盘-磁道-扇区\"><a class=\"anchor\" href=\"#磁盘-磁道-扇区\">#</a> 磁盘、磁道、扇区</h2>\n<p>磁盘的表面由一些磁性物质组成，可以用这些磁性物质来记录二进制数据</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230219221854426.png\" alt=\"image-20230219221854426\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230219222322532.png\" alt=\"image-20230219222322532\" /></p>\n<h2 id=\"如何在磁盘中读写数据\"><a class=\"anchor\" href=\"#如何在磁盘中读写数据\">#</a> 如何在磁盘中读 / 写数据</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230219221854426.png\" alt=\"image-20230219221854426\" /></p>\n<p>需要把 &quot;磁头&quot; 移动到想要读 / 写的扇区所在的磁道</p>\n<p>磁盘会转起来，让目标扇区从磁头下面划过，才能完成对扇区的读 / 写操作。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/citou.gif\" alt=\"citou.gif\" /></p>\n<hr />\n<h2 id=\"盘面-柱面\"><a class=\"anchor\" href=\"#盘面-柱面\">#</a> 盘面、柱面</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230219222903755.png\" alt=\"image-20230219222903755\" /></p>\n<p>可用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>（柱面号，盘面号，扇区号）</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}（柱面号，盘面号，扇区号）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">（柱面号，盘面号，扇区号）</span></span></span></span>来定位任意一个 “磁盘块”。在 “文件的物理结构” 小节中，我们经常提到文件数据存放在外存中的几号块，这个块号就可以转换成（柱面号，盘面号，扇区号）的地址形式。</p>\n<p>可根据该地址读取一个 “块”</p>\n<p>① 根据 “柱面号” 移动磁臂，让磁头指向指定柱面；</p>\n<p>② 激活指定盘面对应的磁头；</p>\n<p>③ 磁盘旋转的过程中，指定的扇区会从磁头下面划过，这样就完成了对指定扇区的读 / 写。</p>\n<h2 id=\"磁盘的分类\"><a class=\"anchor\" href=\"#磁盘的分类\">#</a> 磁盘的分类</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230219223246122.png\" alt=\"image-20230219223246122\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230219223313401.png\" alt=\"image-20230219223313401\" /></p>\n<h2 id=\"整体框架-8\"><a class=\"anchor\" href=\"#整体框架-8\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230219224420768.png\" alt=\"image-20230219224420768\" /></p>\n<h1 id=\"磁盘调度算法\"><a class=\"anchor\" href=\"#磁盘调度算法\">#</a> 磁盘调度算法</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230220190513034.png\" alt=\"image-20230220190513034\" /></p>\n<h2 id=\"一次盘读写操作需要的时间\"><a class=\"anchor\" href=\"#一次盘读写操作需要的时间\">#</a> 一次盘读 / 写操作需要的时间</h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>寻找时间（寻道时间）</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}寻找时间（寻道时间）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">寻找时间（寻道时间）</span></span></span></span> <code>Ts</code> ：在读 / 写数据前，将磁头移动到指定磁道所花的时间。</p>\n<p>① <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>启动磁头</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}启动磁头</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">启动磁头</span></span></span></span>臂是需要时间的。假设耗时为  <code>s</code>  ;<br />\n② <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>移动磁头</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}移动磁头</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">移动磁头</span></span></span></span>也是需要时间的。假设磁头匀速移动，每跨越一个磁道耗时为  <code>m</code> ，总共需要跨越  <code>n</code>  条磁道。则:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>寻找时间</mtext><mi>T</mi><mi>s</mi><mo>=</mo><mi>s</mi><mo>+</mo><mi>m</mi><mo>∗</mo><mi>n</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}寻找时间 Ts = s + m * n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">寻找时间</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">T</span><span class=\"mord mathnormal\" style=\"color:red;\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">s</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\" style=\"color:red;\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\" style=\"color:red;\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">n</span></span></span></span></p>\n<ul>\n<li>现在的硬盘移动一个磁道大约需要 0.2 ms，磁臂启动时间约为 2 ms</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/citoumove.gif\" alt=\"citoumove.gif\" /></p>\n<hr />\n<p>$\\color {red} 延迟时间 T&lt;sub&gt;r&lt;/sub&gt; $：通过旋转磁盘，使磁头定位到目标扇区所需要的时间。</p>\n<p>设磁盘转速为  <code>r</code>  （单位：转 / 秒，或转 / 分） ，则平均所需的延迟时间 T&lt;sub&gt;r&lt;/sub&gt; = (1/2) * (1/r) = 1/2r</p>\n<ul>\n<li>1/r 就是转一圈需要的时间。找到目标扇区平均需要转半圈，因此再乘以 1/2</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/cipan.gif\" alt=\"cipan.gif\" /></p>\n<p>硬盘的典型转速为 5400 转 / 分，或 7200 转 / 分</p>\n<hr />\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>传输时间</mtext><mi>T</mi><mo>&lt;</mo><mi>s</mi><mi>u</mi><mi>b</mi><mo>&gt;</mo><mi>t</mi><mo>&lt;</mo><mi mathvariant=\"normal\">/</mi><mi>s</mi><mi>u</mi><mi>b</mi><mo>&gt;</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}传输时间 T&lt;sub&gt;t&lt;/sub&gt;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">传输时间</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">s</span><span class=\"mord mathnormal\" style=\"color:red;\">u</span><span class=\"mord mathnormal\" style=\"color:red;\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6542em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord mathnormal\" style=\"color:red;\">s</span><span class=\"mord mathnormal\" style=\"color:red;\">u</span><span class=\"mord mathnormal\" style=\"color:red;\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">&gt;</span></span></span></span> ：从磁盘读出或向磁盘写入数据所经历的时间</p>\n<p>假设磁盘转速为  <code>r</code> ，此次读 / 写的字节数为  <code>b</code> ，每个磁道上的字节数为  <code>N</code> 。</p>\n<p>则：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>传输时间</mtext><mi>T</mi><mo>&lt;</mo><mi>s</mi><mi>u</mi><mi>b</mi><mo>&gt;</mo><mi>t</mi><mo>&lt;</mo><mi mathvariant=\"normal\">/</mi><mi>s</mi><mi>u</mi><mi>b</mi><mo>&gt;</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>r</mi><mo stretchy=\"false\">)</mo><mo>∗</mo><mo stretchy=\"false\">(</mo><mi>b</mi><mi mathvariant=\"normal\">/</mi><mi>N</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>b</mi><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>N</mi><mo stretchy=\"false\">)</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}传输时间 T&lt;sub&gt;t&lt;/sub&gt; = (1/r) * (b/N) = b/(rN)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">传输时间</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">T</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">s</span><span class=\"mord mathnormal\" style=\"color:red;\">u</span><span class=\"mord mathnormal\" style=\"color:red;\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6542em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord mathnormal\" style=\"color:red;\">s</span><span class=\"mord mathnormal\" style=\"color:red;\">u</span><span class=\"mord mathnormal\" style=\"color:red;\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">&gt;=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\" style=\"color:red;\">(</span><span class=\"mord\" style=\"color:red;\">1/</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">r</span><span class=\"mclose\" style=\"color:red;\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\" style=\"color:red;\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\" style=\"color:red;\">(</span><span class=\"mord mathnormal\" style=\"color:red;\">b</span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:red;\">N</span><span class=\"mclose\" style=\"color:red;\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">b</span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mopen\" style=\"color:red;\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:red;\">N</span><span class=\"mclose\" style=\"color:red;\">)</span></span></span></span></p>\n<ul>\n<li>每个磁道要可存  <code>N</code>  字节的数据，因此  <code>b</code>  字节的数据需要  <code>b/N</code>  个磁道才能存储。而读 / 写一个磁道所需的时间<br />\n刚好又是转一圈所需要的时间  <code>1/r</code></li>\n</ul>\n<hr />\n<p>总的平均存取时间 T&lt;sub&gt;a&lt;/sub&gt; = T&lt;sub&gt;s&lt;/sub&gt;+ 1/2r + b/(rN)</p>\n<hr />\n<p>延迟时间和传输时间都与磁盘转速相关，宜为线性相关。而转速是硬件的固有属性，<strong>因此操作系统也无法优化延迟</strong><br />\n<strong>时间和传输时间</strong></p>\n<p><strong>但是操作系统的磁盘调度算法会直接影响寻道时间</strong></p>\n<hr />\n<h2 id=\"先来先服务算法fcfs\"><a class=\"anchor\" href=\"#先来先服务算法fcfs\">#</a> 先来先服务算法（FCFS）</h2>\n<p>根据进程请求访问磁盘的先后顺序进行调度。</p>\n<p>假设磁头的初始位置是 100 号磁道，有多个进程先后陆续地请求访问 55、58、39、18、90、160、150、38、184 号磁道</p>\n<p>按照  <code>FCFS</code>  的规则，按照请求到达的顺序，磁头需要依次移动到 55、58、39、18、90、160、150、38、184 号磁道</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230220192523469.png\" alt=\"image-20230220192523469\" /></p>\n<p>磁头总共移动了 45+3+19+21+72+70+10+112+146 = 498 个磁道</p>\n<p>响应一个请求平均需要移动 498/9 = 55.3 个磁道（平均寻找长度)</p>\n<hr />\n<p><strong>优点</strong>：公平；如果请求访问的磁道比较集中的话，算法性能还算过的去</p>\n<p><strong>缺点</strong>：如果有大量进程竞争使用磁盘，请求访问的磁道很分散，则  <code>FCFS</code>  在性能上很差，寻道时间长。</p>\n<hr />\n<h2 id=\"最短寻找时间优先sstf\"><a class=\"anchor\" href=\"#最短寻找时间优先sstf\">#</a> 最短寻找时间优先（SSTF）</h2>\n<p><code>SSTF</code>  算法会优先处理的磁道是与当前磁头最近的磁道。可以保证每次的寻道时间最短，但是并不能保证总的寻道时间最短。(其实就是贪心算法的思想，只是选择眼前最优，但是总体未必最优)</p>\n<p>假设磁头的初始位置是 100 号磁道，有多个进程先后陆续地请求访问 55、58、39、18、90、160、150、38、184 号磁道</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230220193053980.png\" alt=\"image-20230220193053980\" /></p>\n<p>磁头总共移动了 (100-18) + (184-18) = 248 个磁道</p>\n<p>响应一个请求平均需要移动 248/9 = 27.5 个磁道（平均寻找长度)</p>\n<p><strong>优点</strong>：性能较好，平均寻道时间短</p>\n<p><strong>缺点</strong>：$\\color {red} 可能产生 “饥饿” $ 现象</p>\n<ul>\n<li>\n<p>Eg：本例中，如果在处理 18 号磁道的访问请求时又来了一个 38 号磁道的访问请求，处理 38 号磁道的访问请求时又来了一个 18 号磁道的访问请求。如果有源源不断的 18 号、38 号磁道的访问请求到来的话，150、160、184 号磁道的访问请求就永远得不到满足，从而产生 “饥饿” 现象。</p>\n</li>\n<li>\n<p>产生饥饿的原因在于：磁头在一个小区域内来回来去地移动</p>\n</li>\n</ul>\n<hr />\n<h2 id=\"扫描电梯算法scan\"><a class=\"anchor\" href=\"#扫描电梯算法scan\">#</a> 扫描 (电梯) 算法（SCAN）</h2>\n<p><code>SSTF</code>  算法会产生饥饿的原因在于：磁头有可能在一个小区域内来回来去地移动。</p>\n<p>为了防止这个问题，可以规定，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>只有磁头移动到最外侧磁道的时候才能往内移动，移动到最内侧磁道的时候才能往外移动</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}只有磁头移动到最外侧磁道的时候才能往内移动，移动到最内侧磁道的时候才能往外移动</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">只有磁头移动到最外侧磁道的时候才能往内移动，移动到最内侧磁道的时候才能往外移动</span></span></span></span>。</p>\n<ul>\n<li>这就是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>扫描算法（</mtext><mi>S</mi><mi>C</mi><mi>A</mi><mi>N</mi><mtext>）</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}扫描算法（SCAN）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">扫描算法（</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;color:red;\">SC</span><span class=\"mord mathnormal\" style=\"color:red;\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:red;\">N</span><span class=\"mord cjk_fallback\" style=\"color:red;\">）</span></span></span></span>的思想。由于磁头移动的方式很像电梯，因此也叫<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>电梯算法</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}电梯算法</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">电梯算法</span></span></span></span>。</li>\n</ul>\n<hr />\n<p>假设某磁盘的磁道为 0 ~ 200 号，磁头的初始位置是 100 号磁道，且<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>此时磁头正在往磁道号增大的方向移动</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}此时磁头正在往磁道号增大的方向移动</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">此时磁头正在往磁道号增大的方向移动</span></span></span></span>，有多个进程先后陆续地请求访问 55、58、39、18、90、160、150、38、184 号磁道</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230220193716276.png\" alt=\"image-20230220193716276\" /></p>\n<p>磁头总共移动了 (200-100) + (200-18) = 282 个磁道</p>\n<p>响应一个请求平均需要移动 282/9 = 31.3 个磁道（平均寻找长度)</p>\n<p><strong>优点</strong>：性能较好，平均寻道时间较短，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>不会产生饥饿现象</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}不会产生饥饿现象</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">不会产生饥饿现象</span></span></span></span></p>\n<p><strong>缺点</strong>：</p>\n<p>① 只有到达最边上的磁道时才能改变磁头移动方向，事实上，处理了 184 号磁道的访问请求之后就不需要再往右移动磁头了。</p>\n<p>②  <code>SCAN</code>  算法对于<strong>各个位置磁道的响应频率不平均</strong></p>\n<ul>\n<li>如：假设此时磁头正在往右移动，且刚处理过 90 号磁道，那么下次处理 90 号磁道的请求就需要等磁头移动很长一段距离；而响应了 184 号磁道的请求之后，很快又可以再次响应 184 号磁道的请求了</li>\n</ul>\n<hr />\n<h2 id=\"lock-调度算法\"><a class=\"anchor\" href=\"#lock-调度算法\">#</a> LOCK 调度算法</h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>扫描算法（</mtext><mi>S</mi><mi>C</mi><mi>A</mi><mi>N</mi><mtext>）</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}扫描算法（SCAN）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">扫描算法（</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;color:red;\">SC</span><span class=\"mord mathnormal\" style=\"color:red;\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:red;\">N</span><span class=\"mord cjk_fallback\" style=\"color:red;\">）</span></span></span></span>中，只有到达最边上的磁道时才能改变磁头移动方向，事实上，处理了 184 号磁道的访问请求之后就不需要再往右移动磁头了。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mi>L</mi><mi>O</mi><mi>O</mi><mi>K</mi><mtext>调度算法</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}LOOK 调度算法</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">OO</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;color:red;\">K</span><span class=\"mord cjk_fallback\" style=\"color:red;\">调度算法</span></span></span></span>就是为了解决这个问题，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>如果在磁头移动方向上已经没有别的请求，就可以立即改变磁头移动方向</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}如果在磁头移动方向上已经没有别的请求，就可以立即改变磁头移动方向</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">如果在磁头移动方向上已经没有别的请求，就可以立即改变磁头移动方向</span></span></span></span></p>\n<ul>\n<li>边移动边观察，因此叫  <code>LOOK</code></li>\n</ul>\n<hr />\n<p>假设某磁盘的磁道为 0 ~ 200 号，磁头的初始位置是 100 号磁道，且<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>此时磁头正在往磁道号增大的方向移动</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}此时磁头正在往磁道号增大的方向移动</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">此时磁头正在往磁道号增大的方向移动</span></span></span></span>，有多个进程先后陆续地请求访问 55、58、39、18、90、160、150、38、184 号磁道</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230220194317231.png\" alt=\"image-20230220194317231\" /></p>\n<p>磁头总共移动了 (184 - 100) + (184 -18) = 250 个磁道</p>\n<p>响应一个请求平均需要移动 250/9= 27.5 个磁道（平均寻找长度)</p>\n<p>优点：比起  <code>SCAN</code>  算法来，不需要每次都移动到最外侧或最内侧才改变磁头方向，使寻道时间进一步缩短</p>\n<hr />\n<h2 id=\"循环扫描算法c-scan\"><a class=\"anchor\" href=\"#循环扫描算法c-scan\">#</a> 循环扫描算法（C-SCAN）</h2>\n<p><code>SCAN</code>  算法对于各个位置磁道的响应频率不平均，而 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mi>C</mi><mo>−</mo><mi>S</mi><mi>C</mi><mi>A</mi><mi>N</mi><mtext>算法</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}C-SCAN 算法</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;color:red;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\" style=\"color:red;\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;color:red;\">SC</span><span class=\"mord mathnormal\" style=\"color:red;\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;color:red;\">N</span><span class=\"mord cjk_fallback\" style=\"color:red;\">算法</span></span></span></span>就是为了解决这个问题。规定只有磁头朝某个特定方向移动时才处理磁道访问请求，而<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>返回时直接快速移动至起始端而不处理任何请求</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}返回时直接快速移动至起始端而不处理任何请求</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">返回时直接快速移动至起始端而不处理任何请求</span></span></span></span>。</p>\n<hr />\n<p>假设某磁盘的磁道为 0 ~ 200 号，磁头的初始位置是 100 号磁道，且<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>此时磁头正在往磁道号增大的方向移动</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}此时磁头正在往磁道号增大的方向移动</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">此时磁头正在往磁道号增大的方向移动</span></span></span></span>，有多个进程先后陆续地请求访问 55、58、39、18、90、160、150、38、184 号磁道</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230220194645833.png\" alt=\"image-20230220194645833\" /></p>\n<p>磁头总共移动了 (200-100) + (200 - 0)+ (90 - 0) = 390 个磁道</p>\n<p>响应一个请求平均需要移动 390/9 = 43.3 个磁道（平均寻找长度)</p>\n<p><strong>优点</strong>：比起  <code>SCAN</code>  来，对于<strong>各个位置磁道的响应频率很平均</strong>。</p>\n<p><strong>缺点</strong>：只有到达最边上的磁道时才能改变磁头移动方向，事实上，处理了 184 号磁道的访问请求之后就不需要再往右移动磁头了；</p>\n<ul>\n<li>\n<p>并且，磁头返回时其实只需要返回到 18 号磁道即可，不需要返回到最边缘的磁道。</p>\n</li>\n<li>\n<p>另外，比起  <code>SCAN</code>  算法来，平均寻道时间更长。</p>\n</li>\n</ul>\n<hr />\n<h2 id=\"c-look-算法\"><a class=\"anchor\" href=\"#c-look-算法\">#</a> C-LOOK 算法</h2>\n<p><code>C-SCAN</code>  算法的主要缺点是只有到达最边上的磁道时才能改变磁头移动方向，并且磁头返回时不一定需要返回到最边缘的磁道上。</p>\n<p><code>C-LOOK</code>  算法就是为了解决这个问题。如果磁头移动的方向上已经没有磁道访问请求了，就可以立即让磁头返回，并且磁头只需要返回到有磁道访问请求的位置即可。</p>\n<p>假设某磁盘的磁道为 0 ~ 200 号，磁头的初始位置是 100 号磁道，且<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>此时磁头正在往磁道号增大的方向移动</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}此时磁头正在往磁道号增大的方向移动</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">此时磁头正在往磁道号增大的方向移动</span></span></span></span>，有多个进程先后陆续地请求访问 55、58、39、18、90、160、150、38、184 号磁道</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230220195005460.png\" alt=\"image-20230220195005460\" /></p>\n<p>磁头总共移动了 (184 - 100) + (184 -18) + (90 - 18) = 322 个磁道</p>\n<p>响应一个请求平均需要移动 322/9 = 35.8 个磁道（平均寻找长度)</p>\n<p><strong>优点</strong>：比起  <code>C-SCAN</code>  算法来，不需要每次都移动到最外侧或最内侧才改变磁头方向，使寻道时间进一步缩短</p>\n<hr />\n<h2 id=\"整体框架-9\"><a class=\"anchor\" href=\"#整体框架-9\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230220195424923.png\" alt=\"image-20230220195424923\" /></p>\n<p>寻找时间（寻道时间）：启动磁臂移动磁头所花的时间</p>\n<ul>\n<li>磁盘调度算法影响的指标</li>\n</ul>\n<hr />\n<h1 id=\"减少磁盘延迟时间的办法\"><a class=\"anchor\" href=\"#减少磁盘延迟时间的办法\">#</a> 减少磁盘延迟时间的办法</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230220203218990.png\" alt=\"image-20230220203218990\" /></p>\n<p>假设要连续读取橙色区域的 2、3、4 扇区:</p>\n<p>磁头读取一块的内容（也就是一个扇区的内容）后，<strong>需要一小段时间处理，而盘片又在不停地旋转</strong></p>\n<p>因此，如果 2、3 号扇区相邻着排列，则读完 2 号扇区后无法连续不断地读入 3 号扇区</p>\n<p>必须等盘片继续旋转，3 号扇区再次划过磁头，才能完成扇区读入</p>\n<p>结论：磁头读入一个扇区数据后需要一小段时间处理，如果逻辑上相邻的扇区在物理上也相邻，则读入几个连续的逻辑扇区，可能需要很长的 “延迟时间”</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230220204055975.png\" alt=\"image-20230220204055975\" /></p>\n<hr />\n<h2 id=\"交替编号\"><a class=\"anchor\" href=\"#交替编号\">#</a> 交替编号</h2>\n<p>若采用交替编号的策略，即让<strong>逻辑上相邻的扇区在物理上有一定的间隔</strong>，可以使读取连续的逻辑扇区所需要的延迟时间更小。</p>\n<p>如下所示，若读取 2 号扇区并处理该数据内容，磁头此时在 6 号扇区，可以直接划过 3 号扇区读取数据，而不需要再等盘片旋转一轮</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230220205131736.png\" alt=\"image-20230220205131736\" /></p>\n<h2 id=\"磁盘地址结构的设计\"><a class=\"anchor\" href=\"#磁盘地址结构的设计\">#</a> 磁盘地址结构的设计</h2>\n<p>思考：为什么？</p>\n<p>磁盘的物理地址是（柱面号，盘面号，扇区号）</p>\n<p>而不是（盘面号，柱面号，扇区号)</p>\n<hr />\n<p>假设某磁盘有 8 个柱面 / 磁道（假设最内侧柱面 / 磁道号为 0 ） , 4 个盘面，8 个扇区。</p>\n<ul>\n<li>则可用 3 个二进制位表示柱面，2 个二进制位表示盘面，3 个二进制位表示扇区。</li>\n</ul>\n<hr />\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>若物理地址结构是（盘面号，柱面号，扇区号）</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}若物理地址结构是（盘面号，柱面号，扇区号）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">若物理地址结构是（盘面号，柱面号，扇区号）</span></span></span></span>，且需要连续读取物理地址（00, 000, 000) ~ (00,001,111）的扇区:</p>\n<p>（00, 000, 000） ~ （00, 000,111）转两圈可读完</p>\n<ul>\n<li>第一圈读取 0，1，2，3</li>\n<li>第二圈读取 4，5，6，7</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230220210011435.png\" alt=\"image-20230220210011435\" /></p>\n<p>之后再读取物理地址相邻的区域，即<br />\n（00, 001, 000） ~ （00, 001, 111 ），<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>需要启动磁头臂，将磁头移动到下一个磁道</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}需要启动磁头臂，将磁头移动到下一个磁道</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">需要启动磁头臂，将磁头移动到下一个磁道</span></span></span></span></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230220210209013.png\" alt=\"image-20230220210209013\" /></p>\n<hr />\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>若物理地址结构是（柱面号，盘面号，扇区号）</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}若物理地址结构是（柱面号，盘面号，扇区号）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">若物理地址结构是（柱面号，盘面号，扇区号）</span></span></span></span>，且需要连续读取物理地址（00, 000, 000) ~ (00,001,111）的扇区:</p>\n<p>（000, 00, 000） ~ （000, 00,111）由盘面 0 的磁头读入数据</p>\n<ul>\n<li>转两圈可读完</li>\n</ul>\n<p>之后再读取物理地址相邻的区域，即</p>\n<p>（000, 01, 000） ~ （000, 01, 111 ），<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>由于柱面号</mtext><mi mathvariant=\"normal\">/</mi><mtext>磁道号相同，只是盘面号不同，因此不需要移动磁头臂。只需要激活相邻盘面的磁头即可</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}由于柱面号/磁道号相同，只是盘面号不同，因此不需要移动磁头臂。只需要激活相邻盘面的磁头即可</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">由于柱面号</span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord cjk_fallback\" style=\"color:red;\">磁道号相同，只是盘面号不同，因此不需要移动磁头臂。只需要激活相邻盘面的磁头即可</span></span></span></span></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230220210507760.png\" alt=\"image-20230220210507760\" /></p>\n<hr />\n<p>柱面号放中间，读地址连续时，就需要移动磁头</p>\n<p>盘面号放中间，读地址连续十，就不需要移动磁头，因为柱面是一致的</p>\n<p>重点是：<strong>减少读取连续地址的时间</strong></p>\n<p>读取地址连续的磁盘块时，采用（柱面号，盘面号，扇区号）的地址结构可以减少磁头移动消耗的时间</p>\n<hr />\n<h2 id=\"错位命名\"><a class=\"anchor\" href=\"#错位命名\">#</a> 错位命名</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230220211457425.png\" alt=\"image-20230220211457425\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230220211709472.png\" alt=\"image-20230220211709472\" /></p>\n<h2 id=\"整体框架-10\"><a class=\"anchor\" href=\"#整体框架-10\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230220211930892.png\" alt=\"image-20230220211930892\" /></p>\n<h1 id=\"磁盘的管理\"><a class=\"anchor\" href=\"#磁盘的管理\">#</a> 磁盘的管理</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230220213229353.png\" alt=\"image-20230220213229353\" /></p>\n<h2 id=\"磁盘初始化\"><a class=\"anchor\" href=\"#磁盘初始化\">#</a> 磁盘初始化</h2>\n<p><code>Step 1</code> ：进行<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>低级格式化（物理格式化）</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}低级格式化（物理格式化）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">低级格式化（物理格式化）</span></span></span></span>，将磁盘的各个磁道<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>划分为扇区</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}划分为扇区</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">划分为扇区</span></span></span></span>。一个扇区通常可分为头、数据区域（如 512 B 大小)、尾 三个部分组成。</p>\n<ul>\n<li>一个数据块指向下一个数据块的指针其实就可以保存在尾部部分</li>\n</ul>\n<p>管理扇区所需要的各种数据结构一般存放在头、尾两个部分，包括扇区校验码（如奇偶校验、 <code>CRC</code>  循环冗余校验码等，校验码用于校验扇区中的数据是否发生错误)</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230220213702380.png\" alt=\"image-20230220213702380\" /></p>\n<hr />\n<p><code>Step 2</code> ：将<strong>磁盘分区</strong>，每个分区由若干柱面组成（即分为我们熟悉的 C 盘、D 盘、E 盘)</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230220214858136.png\" alt=\"image-20230220214858136\" /></p>\n<hr />\n<p>Step 3：进行<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>逻辑格式化</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}逻辑格式化</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">逻辑格式化</span></span></span></span>，创建文件系统。包括创建文件系统的根目录、初始化存储空间管理所用的数据结构（如位示图、空闲分区表)</p>\n<hr />\n<h2 id=\"引导块\"><a class=\"anchor\" href=\"#引导块\">#</a> 引导块</h2>\n<p>计算机开机时需要进行一系列初始化的工作，这些初始化工作是通过执行<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>初始化程序（自举程序）</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}初始化程序（自举程序）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">初始化程序（自举程序）</span></span></span></span>完成的</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230220215018228.png\" alt=\"image-20230220215018228\" /></p>\n<hr />\n<p>初始化程序程序（自举程序）放在  <code>ROM</code>  中存在什么问题？</p>\n<p>万一需要更新自举程序，将会很不方便，因为  <code>ROM</code>  中的数据无法更改。如何解决呢？</p>\n<p><strong>完整的自举程序放在磁盘的启动块（即引导块 / 启动分区）上，启动块位于磁盘的固定位置。</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230220220238195.png\" alt=\"image-20230220220238195\" /></p>\n<p>自举程序的更新会很方便</p>\n<p>拥有启动分区的磁盘称为<em>启动磁盘</em>或<em>系统磁盘</em>（C: 盘）</p>\n<hr />\n<h2 id=\"坏块的管理\"><a class=\"anchor\" href=\"#坏块的管理\">#</a> 坏块的管理</h2>\n<p>坏了、无法正常使用的扇区就是 “坏块”。</p>\n<p>这属于硬件故障，操作系统是无法修复的。应该将坏块标记出来，以免错误地使用到它</p>\n<hr />\n<p>对于 <code>简单的磁盘</code> ，可以在逻辑格式化时（建立文件系统时）对整个磁盘进行坏块检查，标明哪些扇区是坏扇区，比如：在  <code>FAT</code>  表上标明。（在这种方式中，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>坏块对操作系统不透明</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}坏块对操作系统不透明</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">坏块对操作系统不透明</span></span></span></span>)</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230220220658294.png\" alt=\"image-20230220220658294\" /></p>\n<p>对于 <code>复杂的磁盘</code> ，磁盘控制器（磁盘设备内部的一个硬件部件）会维护一个<strong>坏块链表</strong>。</p>\n<p>在磁盘出厂前进行<strong>低级格式化（物理格式化）时就将坏块链进行初始化</strong>。</p>\n<p>会保留一些 “<strong>备用扇区</strong>”，用于替换坏块。这种方案称为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>扇区备用</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}扇区备用</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">扇区备用</span></span></span></span>。且这种处理方式中，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>坏块对操作系统透明</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}坏块对操作系统透明</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">坏块对操作系统透明</span></span></span></span>。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230220221002254.png\" alt=\"image-20230220221002254\" /></p>\n<h2 id=\"整体框架-11\"><a class=\"anchor\" href=\"#整体框架-11\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230220221202154.png\" alt=\"image-20230220221202154\" /></p>\n",
            "tags": [
                "操作系统"
            ]
        },
        {
            "id": "https://www.htired.top/2023/06/02/os/3%E3%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",
            "url": "https://www.htired.top/2023/06/02/os/3%E3%80%81%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/",
            "title": "3、内存管理",
            "date_published": "2023-06-02T07:59:49.000Z",
            "content_html": "<h1 id=\"内存的基础知识\"><a class=\"anchor\" href=\"#内存的基础知识\">#</a> 内存的基础知识</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230206220920770.png\" alt=\"image-20230206220920770\" /></p>\n<h2 id=\"什么是内存\"><a class=\"anchor\" href=\"#什么是内存\">#</a> 什么是内存？</h2>\n<p>内存是用于存放数据的硬件。程序执行前 <span style = \"color : red\">需要先放到内存中才能被CPU处理</span>。</p>\n<hr />\n<p>思考：在多道程序环境下，系统中会有多个程序并发执行，也就是说会有多个程序的数据需要同时放到内存中。</p>\n<ul>\n<li>那么，如何区分各个程序的数据是放在什么地方的呢？</li>\n</ul>\n<p>方案：给内存的存储单元编地址</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230206222406228.png\" alt=\"image-20230206222406228\" /></p>\n<p>内存中也有一个一个的 “小房间”，每个小房间就是一个 “<span style = \"color : red\">存储单元</span>”</p>\n<p>内存地址从 0 开始，<span style = \"color : red\">每个地址对应一个存储单元</span></p>\n<p>如果计算机 “<span style = \"color : red\">按字节编址</span>”，则 <span style = \"color : red\">每个存储单元大小</span> 为 <span style = \"color : red\">1 字节</span>，即 1B ，即 8 个二进制位</p>\n<p>如果 <span style = \"color : red\">字长为 16 位</span> 的计算机 “<span style = \"color : red\">按字编址</span>” ，则 <span style = \"color : red\">每个存储单元大小</span> 为 <span style = \"color : red\">1个字</span>；每个字的大小为 16 个二进制位</p>\n<hr />\n<p>例如：一台手机 / 电脑有 4GB 内存，是什么意思？</p>\n<ul>\n<li>\n<p>是指该内存中可以存放 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><mo>∗</mo><msup><mn>2</mn><mn>30</mn></msup></mrow><annotation encoding=\"application/x-tex\">4 * 2^{30}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">30</span></span></span></span></span></span></span></span></span></span></span></span> 个字节。如果是按字节编址的话，也就是有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><mo>∗</mo><msup><mn>2</mn><mn>30</mn></msup><mo>=</mo><mn>232</mn></mrow><annotation encoding=\"application/x-tex\">4*2^{30} = 232</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">30</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">232</span></span></span></span> 个 “小房间”</p>\n</li>\n<li>\n<p>这么多 “小房间”，需要 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{32}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">32</span></span></span></span></span></span></span></span></span></span></span></span> 个地址才能一一标识，所以地址需要用 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>32</mn></mrow><annotation encoding=\"application/x-tex\">32</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">32</span></span></span></span> 个二进制位来表示（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mtext> </mtext><msup><mn>2</mn><mn>32</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0~2^{32} -1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">0</span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">32</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>)</p>\n</li>\n</ul>\n<p><code>注</code> ：有的题目会告诉我们内存的大小，让我们确定地址长度应该是多少 (即要多少个二进制位才能表示相应数目的存储单元)</p>\n<h2 id=\"进程的运行原理-指令\"><a class=\"anchor\" href=\"#进程的运行原理-指令\">#</a> 进程的运行原理 -- 指令</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230206223649297.png\" alt=\"image-20230206223649297\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230206223903047.png\" alt=\"image-20230206223903047\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230206224032967.png\" alt=\"image-20230206224032967\" /></p>\n<ul>\n<li>上述是为了直观的体会指令运行的大致流程</li>\n</ul>\n<p>可见，我们写的代码要翻译成  <code>CPU</code>  能识别的指令。这些指令会告诉  <code>CPU</code>  应该去内存的哪个地址存 / 取数据这个数据应该做什么样的处理。</p>\n<p>在这个例子中，指令中直接给出了变量  <code>x</code>  的实际存放地址（<span style = \"color : red\">物理地址</span>）。</p>\n<p>但实际在<strong>生成机器指令的时候并不知道该进程的数据会被放到什么位置。</strong></p>\n<ul>\n<li>所以编译生成的指令中一般是使用 <span style = \"color : red\">逻辑地址（相对地址)</span></li>\n</ul>\n<h2 id=\"逻辑地址-物理地址\"><a class=\"anchor\" href=\"#逻辑地址-物理地址\">#</a> 逻辑地址 &amp; 物理地址</h2>\n<p>宿舍四个人一起出去旅行，四个人的学号尾号分别是 0、1、2、3。<br />\n住酒店时酒店给你们安排了 4 个房号相连的房间。四个人按学号递增次序入住房间。比如 0、1、2、3 号同学分别入住了 5、6、7、8 号房间。</p>\n<p>四个人的编号 0、1、2、3 其实是一个 “相对位置”，而各自入住的房间号是一个 “绝对位置”。</p>\n<p>只要知道 0 号同学住的是房号为  <code>N</code>  的房间，那么  <code>M</code>  号同学的房号一定是  <code>N+M</code> 。</p>\n<p>也就是说，只要知道各个同学的 “相对位置” 和 “起始房号”，就一定可以算出所有同学的 “绝对位置”</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230206224502986.png\" alt=\"image-20230206224502986\" /></p>\n<p>指令中的地址也可以采用这种思想。编译时产生的指令只关心 “相对地址”，实际放入内存中时再想办法根据起始位置得到 “绝对地址”。</p>\n<p><code>Eg</code> ：编译时只需确定变量  <code>x</code>  存放的相对地址是 100（也就是说相对于进程在内存中的起始地址而言的地址）。 <code>CPU</code>  想要找到  <code>x</code>  在内存中的实际存放位置，只需要用进程的起始地址 +100 即可。</p>\n<p><span style = \"color : red\">相对地址</span> 又称 <span style = \"color : red\">逻辑地址</span>，<span style = \"color : red\">绝对地址</span> 又称 <span style = \"color : red\">物理地址</span>。</p>\n<h2 id=\"从写程序到程序运行\"><a class=\"anchor\" href=\"#从写程序到程序运行\">#</a> 从写程序到程序运行</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230206230620499.png\" alt=\"image-20230206230620499\" /></p>\n<p>编译：由编译程序将用户源代码编译成若干个目标模块（编译就是把高级语言 <span style = \"color : red\">翻译为机器语言</span>)</p>\n<p>链接：由链接程序将编译后形成的一组目标模块，以及所需库函数链接在一起，形成一个完整的装入模块</p>\n<p>装入（装载）：由装入程序将装入模块装入内存运行</p>\n<h2 id=\"装入模块到运行\"><a class=\"anchor\" href=\"#装入模块到运行\">#</a> 装入模块到运行</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230206230833405.png\" alt=\"image-20230206230833405\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230206231333786.png\" alt=\"image-20230206231333786\" /></p>\n<p>装入的三种方式；(用三种不同的方法完成 <span style = \"color : red\">逻辑地址到物理地址的转换</span>）:</p>\n<ol>\n<li>绝对装入</li>\n<li>静态重定位</li>\n<li>动态重定位</li>\n</ol>\n<h2 id=\"装入的三种方式-绝对装入\"><a class=\"anchor\" href=\"#装入的三种方式-绝对装入\">#</a> 装入的三种方式 -- 绝对装入</h2>\n<p><span style = \"color : red\">绝对装入</span>：在编译时，<strong>如果知道程序将放到内存中的哪个位置，编译程序将产生绝对地址的目标代码</strong>。</p>\n<ul>\n<li>装入程序按照装入模块中的地址，将程序和数据装入内存。</li>\n</ul>\n<p><code>Eg</code> ：如果知道装入模块要从地址为 100 的地方开始存放...</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230206231702964.png\" alt=\"image-20230206231702964\" /></p>\n<p>绝对装入 <span style = \"color : red\">只适用于单道程序环境</span>。</p>\n<ul>\n<li>因为<strong>单道程序环境</strong>只运行同一时刻只运行一个程序运行，所以每一个程序从什么时候开始存放可以刚开始就约定好</li>\n<li><strong>在单道程序阶段，此时没有产生操作系统</strong></li>\n</ul>\n<p>程序中使用的绝对地址，可在编译或汇编时给出，也可由程序员直接赋予。</p>\n<ul>\n<li>通常情况下都是<strong>编译或汇编时</strong>再转换为绝对地址。</li>\n</ul>\n<h2 id=\"装入的三种方式-静态重定位\"><a class=\"anchor\" href=\"#装入的三种方式-静态重定位\">#</a> 装入的三种方式 -- 静态重定位</h2>\n<p><span style = \"color : red\">静态重定位</span>：又称 <span style = \"color : red\">可重定位装入</span>。</p>\n<p>编译、链接后的装入模块的地址都是从 0 开始的，指令中使用的地址、数据存放的地址都是<strong>相对于起始地址而言的逻辑地址。</strong></p>\n<p>可根据内存的当前情况，将装入模块装入到内存的适当位置。装入时对地址进行 “<span style = \"color : red\">重定位</span>”，将逻辑地址变换为物理地址（地址变换是在装入时一次完成的)</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230206234059550.png\" alt=\"image-20230206234059550\" /></p>\n<p>静态重定位的特点是在一个作业装入内存时，<span style = \"color : red\">必须分配其要求的全部内存空间</span>，如果没有足够的内存，就不能装入该作业。</p>\n<p>作业一旦进入内存后，<span style = \"color : red\">在运行期间就不能再移动</span>，也不能再申请内存空间。</p>\n<ul>\n<li>若装入之后程序所在的内存地址发生改变，则一开始写入的地址就会变成一种错误的地址</li>\n</ul>\n<hr />\n<p><strong>用于早期的多道批处理操作系统</strong></p>\n<h2 id=\"装入的三种方式-动态重定位重定位寄存器\"><a class=\"anchor\" href=\"#装入的三种方式-动态重定位重定位寄存器\">#</a> 装入的三种方式 -- 动态重定位（重定位寄存器）</h2>\n<p><span style = \"color : red\">动态重定位</span>：又称 <span style = \"color : red\">动态运行时装入</span>。编译、链接后的装入模块的地址都是从 0 开始的。装入程序把装入模块装入内存后，并不会立即把逻辑地址转换为物理地址，而 <span style = \"color : red\">是把地址转换推迟到程序真正要执行时才进行</span>。</p>\n<p>因此装入内存后所有的地址依然是逻辑地址。这种方式需要一个 <span style = \"color : red\">重定位寄存器</span> 的支持。</p>\n<hr />\n<p>思想：模块在内存中的的 “<span style = \"color : red\">起始地址</span>”＋目标内存单元相对于起始位置的 “<span style = \"color : red\">偏移量</span>”</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230206234526157.png\" alt=\"image-20230206234526157\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230206234716942.png\" alt=\"image-20230206234716942\" /></p>\n<p>采用动态重定位时 <span style = \"color : red\">允许程序在内存中发生移动</span>。</p>\n<ul>\n<li>例如：若把程序的地址改为从 200 开始，就可以将重定位寄存器中的起始位置的值改为 200 即可</li>\n</ul>\n<p>并且可将程序分配到不连续的存储区中；在程序运行前只需装入它的部分代码即可投入运行，然后在程序运行期间，<strong>根据需要动态申请分配内存</strong>；便于程序段的共享，可以向用户提供一个比存储空间大得多的地址空间。</p>\n<hr />\n<p><strong>现代操作系统</strong></p>\n<hr />\n<h2 id=\"链接的三种方式\"><a class=\"anchor\" href=\"#链接的三种方式\">#</a> 链接的三种方式</h2>\n<h3 id=\"静态链接\"><a class=\"anchor\" href=\"#静态链接\">#</a> 静态链接</h3>\n<p>静态链接：在程序运行之前，先将各目标模块及它们所需的库函数连接成一个完整的可执行文件（装入模块)，之后不再拆开。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230206235159563.png\" alt=\"image-20230206235159563\" /></p>\n<h3 id=\"装入时动态链接\"><a class=\"anchor\" href=\"#装入时动态链接\">#</a> 装入时动态链接</h3>\n<p>装入时动态链接：将各目标模块装入内存时，<strong>边装入边链接</strong>的链接方式。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230206235236871.png\" alt=\"image-20230206235236871\" /></p>\n<h3 id=\"运行时动态链接\"><a class=\"anchor\" href=\"#运行时动态链接\">#</a> 运行时动态链接</h3>\n<p>运行时动态链接：在程序执行中<strong>需要该目标模块时，才对它进行链接</strong>。</p>\n<p>其优点是便于修改和更新，便于实现对目标模块的共享。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/link.gif\" alt=\"link\" /></p>\n<h2 id=\"整体框架\"><a class=\"anchor\" href=\"#整体框架\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230206235937944.png\" alt=\"image-20230206235937944\" /></p>\n<h1 id=\"内存管理的概念\"><a class=\"anchor\" href=\"#内存管理的概念\">#</a> 内存管理的概念</h1>\n<p>操作系统作为系统资源的管理者，当然也需要对内存进行管理，要管些什么呢？</p>\n<h2 id=\"内存空间的分配与回收\"><a class=\"anchor\" href=\"#内存空间的分配与回收\">#</a> 内存空间的分配与回收</h2>\n<p>操作系统负责内存空间的分配与回收</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207002018111.png\" alt=\"image-20230207002018111\" /></p>\n<h2 id=\"内存空间的扩充\"><a class=\"anchor\" href=\"#内存空间的扩充\">#</a> 内存空间的扩充</h2>\n<p>操作系统需要提供某种技术从逻辑上对内存空间进行扩充</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207002220575.png\" alt=\"image-20230207002220575\" /></p>\n<h2 id=\"地址转换\"><a class=\"anchor\" href=\"#地址转换\">#</a> 地址转换</h2>\n<p>操作系统需要提供地址转换功能，负责程序的 <span style = \"color : red\">逻辑地址</span> 与 <span style = \"color : red\">物理地址</span> 的转换</p>\n<p>为了使编程更方便，程序员写程序时应该只需要关注指令、数据的逻辑地址。</p>\n<p>而 <span style = \"color : red\">逻辑地址到物理地址的转换</span>（这个过程称为 <span style = \"color : red\">地址重定位</span>）应该由操作系统负责，</p>\n<ul>\n<li>这样就保证了程序员写程序时不需要关注物理内存的实际情况。</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207003040831.png\" alt=\"image-20230207003040831\" /></p>\n<h2 id=\"内存保护\"><a class=\"anchor\" href=\"#内存保护\">#</a> 内存保护</h2>\n<p>操作系统需要提供内存保护功能。保证各进程在各自存储空间内运行，<strong>互不干扰</strong></p>\n<p>让各个进程只能访问自己的内存空间，而不能访问别的进程空间</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207003315502.png\" alt=\"image-20230207003315502\" /></p>\n<p>内存保护可采取两种方法:</p>\n<h3 id=\"上-下限寄存器\"><a class=\"anchor\" href=\"#上-下限寄存器\">#</a> 上、下限寄存器</h3>\n<p>方法一：在  <code>CPU</code>  中设置一对 <span style = \"color : red\">上、下限寄存器</span>，存放进程的上、下限地址。</p>\n<p>进程的指令要访问某个地址时， <code>CPU</code>  检查是否越界。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207003501301.png\" alt=\"image-20230207003501301\" /></p>\n<p>可见上、下限寄存器只支持<strong>连续的分配内存</strong></p>\n<h3 id=\"重定位寄存器和界地址寄存器\"><a class=\"anchor\" href=\"#重定位寄存器和界地址寄存器\">#</a> 重定位寄存器和界地址寄存器</h3>\n<p>方法二：采用 <span style = \"color : red\">重定位寄存器</span>（又称 <span style = \"color : red\">基址寄存器</span>）和 <span style = \"color : red\">界地址寄存器</span>（又称 <span style = \"color : red\">限长寄存器</span>）进行越界检查。</p>\n<p>重定位寄存器中存放的是进程的 <span style = \"color : red\">起始物理地址</span>。界地址寄存器中存放的是进程的 <span style = \"color : red\">最大逻辑地址</span>。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207003840441.png\" alt=\"image-20230207003840441\" /></p>\n<p>3.2.5、整体框架</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207004135196.png\" alt=\"image-20230207004135196\" /></p>\n<h1 id=\"覆盖-交换技术\"><a class=\"anchor\" href=\"#覆盖-交换技术\">#</a> 覆盖 &amp; 交换技术</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207215243549.png\" alt=\"image-20230207215243549\" /></p>\n<h2 id=\"覆盖技术同一进程\"><a class=\"anchor\" href=\"#覆盖技术同一进程\">#</a> 覆盖技术（同一进程）</h2>\n<p>早期的计算机内存很小，比如  <code>IBM</code>  推出的第一台  <code>PC</code>  机最大只支持 1MB 大小的内存。因此经常会出现内存大小不够的情况。</p>\n<p>后来人们引入了 <span style = \"color : red\">覆盖技术</span>, 用来 <span style = \"color : red\">解决 “程序大小超过物理内存总和” 的问题</span></p>\n<hr />\n<p>覆盖技术的思想：将 <span style = \"color : red\">程序分为多个段</span>（多个模块）。常用的段常驻内存，不常用的段在需要时调入内存。</p>\n<h3 id=\"固定区-覆盖区\"><a class=\"anchor\" href=\"#固定区-覆盖区\">#</a> 固定区 &amp; 覆盖区</h3>\n<p>内存中分为 <span style = \"color : red\">一个 “固定区” </span> 和 <span style = \"color : red\">若干个 “覆盖区”</span>。</p>\n<ul>\n<li>需要<strong>常驻内存的段</strong>放在 “<span style = \"color : red\">固定区</span>” 中，<span style = \"color : red\">调入后就不再调出</span>（除非运行结束）\n<ul>\n<li>比如说  <code>main</code>  函数（程序的入口），将该模块放入到固定区中</li>\n</ul>\n</li>\n<li><strong>不常用的段</strong>放在 “<span style = \"color : red\">覆盖区</span>”，<span style = \"color : red\">需要用到时调入内存，用不到时调出内存</span></li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207210425684.png\" alt=\"image-20230207210425684\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207210722895.png\" alt=\"image-20230207210722895\" /></p>\n<p>按照自身逻辑结构，<strong>让那些不可能同时被访问的程序段共享同一个覆盖区</strong></p>\n<hr />\n<p><span style = \"color : red\">必须由程序员声明覆盖结构</span>，操作系统完成自动覆盖。</p>\n<p><span style = \"color : red\">缺点：对用户不透明</span>，增加了用户编程负担。</p>\n<ul>\n<li>操作系统不知道哪个模块与哪个模块有关系</li>\n</ul>\n<p>覆盖技术只用于早期的操作系统中，现在已成为历史</p>\n<h2 id=\"交换技术不同进程\"><a class=\"anchor\" href=\"#交换技术不同进程\">#</a> 交换技术（不同进程）</h2>\n<p>交换（对换）技术的设计思想（就是中级调度）：</p>\n<ul>\n<li><strong>内存空间紧张时</strong>，系统将内存中某些进程暂时 <span style = \"color : red\">换出</span> 外存，把外存中某些已具备运行条件的进程 <span style = \"color : red\">换入</span> 内存（进程在内存与磁盘间动态调度)</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207213218097.png\" alt=\"image-20230207213218097\" /></p>\n<p><span style = \"color : red\">中级调度（内存调度）</span>，就是要决定将哪个处于挂起状态的进程重新调入内存</p>\n<hr />\n<p>暂时换出外存等待的进程状态为 <span style = \"color : red\">挂起状态（挂起态，suspend）</span></p>\n<p>挂起态又可以进一步细分为 <span style = \"color : red\">就绪挂起</span>、<span style = \"color : red\">阻塞挂起</span> 两种状态</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230121203748888.png\" alt=\"image-20230121203748888\" /></p>\n<hr />\n<h3 id=\"对换区-文件区\"><a class=\"anchor\" href=\"#对换区-文件区\">#</a> 对换区 &amp; 文件区</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207214344373.png\" alt=\"image-20230207214344373\" /></p>\n<p>① 应该在外存（磁盘）的什么位置保存被换出的进程？</p>\n<p>具有对换功能的操作系统中，通常把磁盘空间分为 <span style = \"color : red\">文件区</span> 和 <span style = \"color : red\">对换区</span> 两部分。</p>\n<p><span style = \"color : red\">文件区</span> 主要用于存放文件，<span style = \"color : red\">主要追求存储空间的利用率</span>，因此对文件区空间的管理 <span style = \"color : red\">采用离散分配方式</span>;</p>\n<p><span style = \"color : red\">对换区</span> 空间只占磁盘空间的小部分，被换出的进程数据就存放在对换区。</p>\n<ul>\n<li>由于对换的速度<strong>直接影响到系统的整体速度</strong>，因此对换区空间的管理 <span style = \"color : red\">主要追求换入换出速度</span>，因此通常对换区 <span style = \"color : red\">采用连续分配方式</span>（学过文件管理章节后即可理解）。</li>\n</ul>\n<p>总之，<span style = \"color : red\">对换区的 I/O 速度比文件区的更快</span>。</p>\n<hr />\n<p>② 什么时候应该交换？</p>\n<p>交换通常在许多进程运行且<strong>内存吃紧</strong>时进行，而<strong>系统负荷降低就暂停</strong>。</p>\n<ul>\n<li>例如：在发现许多进程运行时<strong>经常发生缺页</strong>，就说明内存紧张，此时可以换出一些进程；</li>\n<li>如果缺页率明显下降，就可以暂停换出。</li>\n</ul>\n<hr />\n<p>③ 应该换出哪些进程？</p>\n<p>可优先换出阻塞进程；可换出优先级低的进程；</p>\n<ul>\n<li>为了防止优先级低的进程在被调入内存后<strong>很快又被换出</strong>，有的系统还会考虑进程在内存的驻留时间...</li>\n</ul>\n<p>（<span style = \"color : red\">注意：PCB会常驻内存</span>，不会被换出外存）</p>\n<h1 id=\"连续分配管理方式\"><a class=\"anchor\" href=\"#连续分配管理方式\">#</a> 连续分配管理方式</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207231045485.png\" alt=\"image-20230207231045485\" /></p>\n<h2 id=\"单一连续分配有内部碎片\"><a class=\"anchor\" href=\"#单一连续分配有内部碎片\">#</a> 单一连续分配（有内部碎片）</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207215654242.png\" alt=\"image-20230207215654242\" /></p>\n<p>在单一连续分配方式中，内存被分为 <span style = \"color : red\">系统区</span> 和 <span style = \"color : red\">用户区</span>。</p>\n<p>系统区通常位于内存的低地址部分，用于存放操作系统相关数据；用户区用于存放用户进程相关数据。</p>\n<p>内存中 <span style = \"color : red\">只能有一道用户程序</span>，用户程序独占整个用户区空间。</p>\n<ul>\n<li>即使用户区还有很大的内存空间，也不会分配给其他的进程，独占</li>\n</ul>\n<p><span style = \"color : red\">优点</span>：</p>\n<ul>\n<li>实现简单；<span style = \"color : red\">无外部碎片</span>；</li>\n<li>可以采用<strong>覆盖技术扩充内存</strong>；</li>\n<li>不一定需要采取内存保护（  <code>eg</code> ：早期的 PC 操作系统  <code>MS-DoS</code> ）。\n<ul>\n<li>即使该用户程序出现问题了，也只会影响自身。即使越界影响到了系统，重启过后也可以进行修复，因为内存中只有一个进程，很容易找出问题所在。</li>\n</ul>\n</li>\n</ul>\n<p><span style = \"color : red\">缺点</span>：</p>\n<ul>\n<li>只能用于单用户、单任务的操作系统；</li>\n<li><span style = \"color : red\">有内部碎片</span>；</li>\n<li><strong>存储器利用率极低</strong></li>\n</ul>\n<p><span style = \"color : red\">内部碎片</span>：分配给某进程的内存区域中，<strong>若有些部分没有用上</strong>，就是 &quot;内部碎片&quot;</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207220303633.png\" alt=\"image-20230207220303633\" /></p>\n<h2 id=\"固定分区分配\"><a class=\"anchor\" href=\"#固定分区分配\">#</a> 固定分区分配</h2>\n<p>20 世纪 60 年代出现了支持多道程序的系统，为了能在内存中装入多道程序，且这些程序之间又不会相互干扰，</p>\n<p>于是将整个 <span style = \"color : red\">用户空间</span> 划分为 <span style = \"color : red\">若干个固定大小的分区</span>，在 <span style = \"color : red\">每个分区中只装入一道作业</span>，这样就形成了最早的、最简单的一种可运行多道程序的内存管理方式。</p>\n<h3 id=\"分区大小不相等\"><a class=\"anchor\" href=\"#分区大小不相等\">#</a> 分区大小（不）相等</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207220529882.png\" alt=\"image-20230207220529882\" /></p>\n<p><strong>分区大小相等</strong>：</p>\n<ul>\n<li>缺乏灵活性，\n<ul>\n<li>因为每个分区只能装入一道作业，所以本来占用很小内存的进程就会占用一个大的多余的分区</li>\n<li>若一个进程所需内存很大的话，那么该进程就不能装入该分区。</li>\n<li>或者说采用覆盖技术在逻辑上扩充分区的大小，则会占用很大的系统开销</li>\n</ul>\n</li>\n<li>但是很 <span style = \"color : red\">适合用于用一台计算机控制多个相同对象的场合</span>\n<ul>\n<li>比如：钢铁厂有 n 个相同的炼钢炉，就可把内存分为 n 个大小相等的区域存放 n 个炼钢炉控制程序)</li>\n</ul>\n</li>\n</ul>\n<p><strong>分区大小不等</strong>：</p>\n<ul>\n<li>增加了灵活性，可以满足不同大小的进程需求。</li>\n<li>根据常在系统中运行的作业大小情况进行划分\n<ul>\n<li>比如：划分多个小分区、适量中等分区、少量大分区</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"分区说明表有内部碎片\"><a class=\"anchor\" href=\"#分区说明表有内部碎片\">#</a> 分区说明表（有内部碎片）</h3>\n<p>操作系统需要建立一个数据结构――<span style = \"color : red\">分区说明表</span>，来实现各个分区的分配与回收。每个表项对应一个分区，通常按分区大小排列。</p>\n<p>每个表项包括对应分区的 <span style = \"color : red\">大小、起始地址、状态</span>（是否已分配）。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207221414176.png\" alt=\"image-20230207221414176\" /></p>\n<p>当某用户程序要装入内存时，由操作系统内核程序<strong>根据用户程序大小检索该表</strong>。从中找到一个能满足大小的、未分配的分区，将之分配给该程序，然后修改状态为 “己分配” 。</p>\n<hr />\n<p>** 优点：** 实现简单，<span style = \"color : red\">无外部碎片</span>。</p>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>当用户程序太大时，可能所有的分区都不能满足需求，此时不得不采用<strong>覆盖技术来解决</strong>，但这又会降低性能；</li>\n<li>会产生 <span style = \"color : red\">内部碎片</span>，内存利用率低。</li>\n</ul>\n<h2 id=\"动态分区分配有外部碎片\"><a class=\"anchor\" href=\"#动态分区分配有外部碎片\">#</a> 动态分区分配（有外部碎片</h2>\n<p><span style = \"color : red\">动态分区分配</span> 又称为 <span style = \"color : red\">可变分区分配</span>。</p>\n<p>这种分配方式 <span style = \"color : red\">不会预先划分内存分区</span>，而是在进程装入内存时，<span style = \"color : red\">根据进程的大小动态地建立分区</span>，并使分区的大小正好适合进程的需要。</p>\n<p>因此系统分区的大小和数目是可变的。</p>\n<p>动态分区分配 <span style = \"color : red\">没有内部碎片</span>，但是 <span style = \"color : red\">有外部碎片</span>。</p>\n<p>动态分区分配使用的是动态重定位技术实现装入</p>\n<ul>\n<li>即：在程序运行时根据需求动态的装入</li>\n</ul>\n<hr />\n<p><code>eg</code> ：假设某计算机内存大小为 64MB，系统区 8MB ，用户区共 56 MB...）</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207222152204.png\" alt=\"image-20230207222152204\" /></p>\n<ol>\n<li>系统要用什么样的数据结构<strong>记录内存的使用情况</strong>？</li>\n<li>当很多个空闲分区都能满足需求时，应该<strong>选择哪个分区</strong>进行分配？</li>\n<li>如何进行分区的<strong>分配与回收</strong>操作？</li>\n</ol>\n<hr />\n<h3 id=\"空闲分区表链\"><a class=\"anchor\" href=\"#空闲分区表链\">#</a> 空闲分区表 / 链</h3>\n<p>① 系统要用什么样的数据结构<strong>记录内存的使用情况</strong>？</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207222633471.png\" alt=\"image-20230207222633471\" /></p>\n<p><strong>空闲分区表</strong>：每个空闲分区对应个表项。</p>\n<ul>\n<li>表项中包含分区号、分区大小、分区起始地址等信息</li>\n</ul>\n<p><strong>空闲分区链</strong>：每个分区的其实部分和末尾部分分别设置前向指针和后向指针。</p>\n<ul>\n<li>其实部分出还可记录分区大小等信息</li>\n</ul>\n<h3 id=\"多个空闲分区选择哪一个分配\"><a class=\"anchor\" href=\"#多个空闲分区选择哪一个分配\">#</a> 多个空闲分区选择哪一个分配？</h3>\n<p>② 当很多个空闲分区都能满足需求时，应该<strong>选择哪个分区</strong>进行分配？</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207222802442.png\" alt=\"image-20230207222802442\" /></p>\n<p>把一个新作业装入内存时，须按照一定的 <span style = \"color : red\">动态分区分配算法</span>，从空闲分区表（或空闲分区链）中选出一个分区分配给该作业。</p>\n<p><strong>由于分配算法算法对系统性能有很大的影响</strong>，因此人们对它进行了广泛的研究。</p>\n<h3 id=\"空闲分区的分配与回收\"><a class=\"anchor\" href=\"#空闲分区的分配与回收\">#</a> 空闲分区的分配与回收</h3>\n<p>③ 如何进行分区的<strong>分配与回收</strong>操作？</p>\n<h4 id=\"分配\"><a class=\"anchor\" href=\"#分配\">#</a> 分配</h4>\n<p>假设系统采用的数据结构是 “空闲分区表” 如何分配？</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207223051180.png\" alt=\"image-20230207223051180\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207223308960.png\" alt=\"image-20230207223308960\" /></p>\n<h4 id=\"回收\"><a class=\"anchor\" href=\"#回收\">#</a> 回收</h4>\n<p>假设系统采用的数据结构是 “空闲分区表” 如何回收？</p>\n<p><strong>情况一：回收区的后面有一个相邻的空闲分区</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207223416365.png\" alt=\"image-20230207223416365\" /></p>\n<hr />\n<p><strong>情况二：回收区的前面有一个相邻的空闲分区</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207223629620.png\" alt=\"image-20230207223629620\" /></p>\n<hr />\n<p><strong>情况三：回收区的前、后有一个相邻的空闲分区</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207223730854.png\" alt=\"image-20230207223730854\" /></p>\n<hr />\n<p><strong>情况四：回收区的前、后有都没有相邻的空闲分区</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207223918992.png\" alt=\"image-20230207223918992\" /></p>\n<hr />\n<p><code>注</code> ：各表项的顺序不一定按照地址递增顺序排列，<strong>具体的排列方式需要依据动态分区分配算法来确定</strong>。</p>\n<p>例如：对于空闲分区表采用动态的扩充表格，而对于空闲分区链的话采用头 / 尾插法或者定位至中间插入</p>\n<hr />\n<h2 id=\"内部碎片-外部碎片\"><a class=\"anchor\" href=\"#内部碎片-外部碎片\">#</a> 内部碎片 &amp; 外部碎片</h2>\n<p><span style = \"color : red\">内部碎片</span>，分配给某进程的内存区域中，如果有些部分没有用上</p>\n<p><span style = \"color : red\">外部碎片</span>，是指内存中<strong>的某些空闲分区由于太小而难以利用</strong>。</p>\n<ul>\n<li>因为各个进程需要的都是一整个连续的空闲内存，</li>\n<li>所以若这个空闲分区太小，那么任何一个空闲分区不能满足进程的需求</li>\n</ul>\n<hr />\n<p>内存碎片：分配出去没有用上。外部碎片：没有分配出去但没法用</p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207225242139.png\" alt=\"image-20230207225242139\" /></p>\n<p>上图所示，若进程  <code>2</code>  （14 MB）的进程又可以执行了</p>\n<ul>\n<li>此时可以发现，内存的任何一个区域都不能满足进程  <code>2</code>  的需求</li>\n</ul>\n<p>所以就产生了外部碎片。</p>\n<hr />\n<p>如果内存中空闲空间的总和本来可以满足某进程的要求，但由于进程需要的是<strong>一整块连续的内存空间</strong>，</p>\n<ul>\n<li>因此这些 “碎片” 不能满足进程的需求。</li>\n</ul>\n<p>例如：上述所示的进程  <code>2</code> （14 MB），内存中零散的 &quot;碎片&quot; 总和为 14 MB，本来可以满足进程 2，但是不是连续的，所以满足不了进程  <code>2</code>  的需求</p>\n<hr />\n<p>可以通过 <span style = \"color : red\">紧凑（拼凑，Compaction）</span> 技术来解决外部碎片。</p>\n<h3 id=\"紧凑技术解决外部碎片\"><a class=\"anchor\" href=\"#紧凑技术解决外部碎片\">#</a> 紧凑技术解决外部碎片</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207230151788.png\" alt=\"image-20230207230151788\" /></p>\n<p><strong>&quot;紧凑&quot; 之后的处理</strong></p>\n<ul>\n<li>将各个进程的起始地址修改掉，起始地址一般来说是存放在进程的  <code>PCB</code>  当中</li>\n<li>当进程上  <code>CPU</code>  运行之前，会把进程的起始地址放入到重定位寄存器（基址寄存器）中</li>\n</ul>\n<h1 id=\"动态分区分配算法\"><a class=\"anchor\" href=\"#动态分区分配算法\">#</a> 动态分区分配算法</h1>\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th><span style = \"color : red\">算法思想</span></th>\n<th>分区排列顺序</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>首次适应</td>\n<td><span style = \"color : red\">从头到尾寻找合适的分区</span></td>\n<td>空闲分区以地址递增顺序排列</td>\n<td>综合看性能最好。<strong>算法开销小</strong>，回收分区后一般不需要对空闲分区队列重新排序</td>\n<td>可能会导致低地址部分出现很多小的空闲分区，而每次分配查找时，都要经过这些分区，因此也增加了查找的开销。</td>\n</tr>\n<tr>\n<td>最佳适应</td>\n<td><span style = \"color : red\">优先使用更小的分区，以保留更大的分区</span></td>\n<td>空闲分区以容量递增次序排列</td>\n<td>会有更多的大分区被保留下来，更能满足大进程需求</td>\n<td>会产生很多太小的、难以利用的碎片；<strong>算法开销大</strong>，回收分区后可能需要对空闲分区队列重新排序</td>\n</tr>\n<tr>\n<td>最坏适应</td>\n<td><span style = \"color : red\">优先使用更大的分区，以防止产生太小的不可用的碎片（外部碎片）</span></td>\n<td>空闲分区以容量递减顺序排列</td>\n<td>可以减少难以利用的小碎片</td>\n<td>大分区容易被用完，不利于大进程；<strong>算法开销大</strong>（原因同上）</td>\n</tr>\n<tr>\n<td>邻近适应</td>\n<td><span style = \"color : red\">右首次适应演变而来，每次从上次查找结束位置开始查找</span></td>\n<td>空闲分区以地址递减顺序排列</td>\n<td>不用每次都从低地址的小分区开始检索。<strong>算法开销小</strong>（原因同首次适应算法)</td>\n<td>会使高地址的大分区也被用完</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"首次适应算法\"><a class=\"anchor\" href=\"#首次适应算法\">#</a> 首次适应算法</h2>\n<p><span style = \"color : red\">算法思想</span>：每次都从低地址开始查找，找到第一个能满足大小的空闲分区。</p>\n<p><span style = \"color : red\">如何实现：空闲分区以地址递增的次序排列</span>。</p>\n<ul>\n<li>每次分配内存时<strong>顺序查找</strong> <span style = \"color : red\">空闲分区链</span>（或 <span style = \"color : red\">空闲分区表</span>)，找到大小能满足要求的第一个空闲分区。</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230207233859035.png\" alt=\"image-20230207233859035\" /></p>\n<p><span style = \"color : red\">缺点：可能会导致低地址部分出现很多小的空闲分区，而每次分配查找时，都要经过这些分区，因此也增加了查找的开销。</span></p>\n<h2 id=\"最佳适应算法\"><a class=\"anchor\" href=\"#最佳适应算法\">#</a> 最佳适应算法</h2>\n<p><span style = \"color : red\">算法思想</span>：由于动态分区分配是一种连续分配方式，为各进程分配的空间必须是连续的一整片区域。</p>\n<p>因此为了保证当 “大进程” 到来时能有连续的大片空间，可<strong>以尽可能多地留下大片的空闲区</strong>，</p>\n<ul>\n<li>即，优先使用更小的空闲区。</li>\n</ul>\n<p><span style = \"color : red\">如何实现</span>：空闲分区 <span style = \"color : red\">按容量递增次序链接</span>。每次分配内存时顺序查找 <span style = \"color : red\">空闲分区链</span>（或 <span style = \"color : red\">空闲分区表</span>)，找到大小能满足要求的第一个空闲分区。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230208000543622.png\" alt=\"image-20230208000543622\" /></p>\n<p><span style = \"color : red\">缺点：每次都选最小的分区进行分配，会留下越来越多的、很小的、难以利用的内存块。因此这种方法会产生很多的外部碎片。</span></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230208002734365.png\" alt=\"image-20230208002734365\" /></p>\n<h2 id=\"最坏大适应算法\"><a class=\"anchor\" href=\"#最坏大适应算法\">#</a> 最坏（大）适应算法</h2>\n<p>又称 <span style = \"color : red\">最大适应算法</span>（Largest Fit）</p>\n<p><span style = \"color : red\">算法思想</span>：为了解决最佳适应算法的问题――即留下太多难以利用的小碎片，可以在每次分配时优先使用最大的连续空闲区，这样分配后剩余的空闲区就不会太小，更方便使用。</p>\n<p><span style = \"color : red\">如何实现</span>：空闲分区 <span style = \"color : red\">按容量递减次序链接</span>。每次分配内存时顺序查找 <span style = \"color : red\">空闲分区链</span>（或 <span style = \"color : red\">空闲分区表</span>)，找到大小能满足要求的第一个空闲分区</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230208003005903.png\" alt=\"image-20230208003005903\" /></p>\n<p><span style = \"color : red\">缺点：每次都选最大的分区进行分配，虽然可以让分配后留下的空闲区更大，更可用，但是这种方式会导致较大的连续空闲区被迅速用完。如果之后有“大进程”到达，就没有内存分区可用了。</span></p>\n<h2 id=\"邻近适应算法\"><a class=\"anchor\" href=\"#邻近适应算法\">#</a> 邻近适应算法</h2>\n<p><span style = \"color : red\">算法思想</span>：首次适应算法每次都从链头开始查找的。这可能会导致低地址部分出现很多小的空闲分区，而每次分配查找时，都要经过这些分区，因此也增加了查找的开销。</p>\n<p>如果每次<strong>都从上次查找结束的位置开始检索</strong>，就能解决上述问题。</p>\n<p><span style = \"color : red\">如何实现</span>：空闲分区 <span style = \"color : red\">按地址递增次序链接</span>。每次分配内存时 <span style = \"color : red\">从上次查找结束的位置开始</span> 查找 <span style = \"color : red\">空闲分区链</span>（或 <span style = \"color : red\">空闲分区表</span>)，找到大小能满足要求的第一个空闲分区。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230208003518237.png\" alt=\"image-20230208003518237\" /></p>\n<p>首次适应算法每次都要从头查找，每次都需要检索低地址的小分区。</p>\n<ul>\n<li>但是这种规则也决定了当低地址部分有更小的分区可以满足需求时，会更有可能<strong>用到低地址部分的小分区</strong>，也会更有可能把<strong>高地址部分的大分区保留下来</strong>（最佳适应算法的优点)</li>\n</ul>\n<p>邻近适应算法的规则可能会导致无论低地址、高地址部分的空闲分区都有<strong>相同的概率</strong>被使用，也就导致了高地址部分的大分区更可能被使用，划分为小分区，最后导致无大分区可用（最大适应算法的缺点)</p>\n<hr />\n<p>综合来看，<span style = \"color : red\">四种算法中，首次适应算法的效果反而更好</span></p>\n<h1 id=\"基本分页存储管理\"><a class=\"anchor\" href=\"#基本分页存储管理\">#</a> 基本分页存储管理</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230208204455224.png\" alt=\"image-20230208204455224\" /></p>\n<h2 id=\"连续分配方式的缺点\"><a class=\"anchor\" href=\"#连续分配方式的缺点\">#</a> 连续分配方式的缺点</h2>\n<p>考虑支持多道程序的两种连续分配方式:</p>\n<ol>\n<li>固定分区分配：\n<ul>\n<li>缺乏灵活性，会产生大量的内部碎片，内存的利用率很低。</li>\n</ul>\n</li>\n<li>动态分区分配：\n<ul>\n<li>会产生很多外部碎片，虽然可以用 “紧凑” 技术来处理，但是 “紧凑” 的时间代价很高</li>\n</ul>\n</li>\n</ol>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230208203958999.png\" alt=\"image-20230208203958999\" /></p>\n<hr />\n<p>如果允许将一个进程<strong>分散地装入到许多不相邻的分区</strong>中，便可充分地利用内存，而无需再进行 “紧凑”</p>\n<p>基于这一思想，产生了 “非连续分配方式” ，或者称为 “离散分配方式”。</p>\n<hr />\n<p><span style = \"color : red\">连续分配</span>：为用户进程分配的必须是 <span style = \"color : red\">一个连续的内存空间</span>。</p>\n<p><span style = \"color : red\">非连续分配</span>：为用户进程分配的可以是 <span style = \"color : red\">一些分散的内存空间</span>。</p>\n<hr />\n<h2 id=\"把-固定分区分配-改造为-非连续分配版本\"><a class=\"anchor\" href=\"#把-固定分区分配-改造为-非连续分配版本\">#</a> 把 &quot;固定分区分配&quot; 改造为 &quot;非连续分配版本&quot;</h2>\n<p>假设进程  <code>A</code>  大小为 23MB，但是每个分区大小只有 10MB ，如果进程只能占用一个分区，那显然放不下。</p>\n<p>解决思路：如果允许进程占用多个分区，那么可 <span style = \"color : red\">以把进程拆分成 10MB + 10MB + 3MB 三个部分</span>，再把这三个部分分别放到三个分区中（这些 <span style = \"color : red\">分区不要求连续</span>）....</p>\n<p>进程  <code>A</code>  的最后一个部分是 3MB，放入分区后会产生 7MB 的内部碎片。<br />\n如果每个分区大小为 2MB ，那么进程  <code>A</code>  可以拆分成  <code>11*2MB +1MB</code>  共 12 个部分，只有最后一部分 1MB 占不满分区，会产生 1MB 的内部碎片。</p>\n<p>显然，<span style = \"color : red\">如果把分区大小设置的更小一些，内部碎片会更小，内存利用率会更高</span>。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230208204818283.png\" alt=\"image-20230208204818283\" /></p>\n<h2 id=\"基本分页存储管理基本概念\"><a class=\"anchor\" href=\"#基本分页存储管理基本概念\">#</a> 基本分页存储管理基本概念</h2>\n<p>基本分页存储管理的思想一一把内存分为<strong>一个个相等的小分区</strong>，再<strong>按照分区大小把进程拆分成一个个小部分</strong></p>\n<hr />\n<h3 id=\"页框内存块-物理块-页面内部碎片\"><a class=\"anchor\" href=\"#页框内存块-物理块-页面内部碎片\">#</a> 页框 (内存块、物理块) &amp; 页面，内部碎片</h3>\n<p>将内存空间分为一个个 <span style = \"color : red\">大小相等的分区</span>（比如：每个分区 4KB ），每个<strong>分区</strong>就是一个 “<span style = \"color : red\">页框</span>”，或称 “<span style = \"color : red\">页帧</span>”、“<span style = \"color : red\">内存块</span>”、“<span style = \"color : red\">物理块</span>”。每个页框有一个编号，即 “<span style = \"color : red\">页框号</span>”（或者 “<span style = \"color : red\">内存块号</span>”、“<span style = \"color : red\">页帧号</span>”、“<span style = \"color : red\">物理块号</span>”）</p>\n<ul>\n<li>页框号 <span style = \"color : red\"><b>从 0 开始</b></span>。</li>\n</ul>\n<p>将<strong>用户进程的地址空间</strong>也分为 <span style = \"color : red\">与页框大小相等</span> 的一个个区域，称为 “<span style = \"color : red\">页</span>” 或 “<span style = \"color : red\">页面</span>” 。</p>\n<ul>\n<li>每个页面也有一个编号，即 “<span style = \"color : red\">页号</span>” ，页号也是 <span style = \"color : red\"><b>从 0 开始</b></span>。</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230208215308403.png\" alt=\"image-20230208215308403\" /></p>\n<p><strong>注</strong>：进程的最后一个页面可能没有一个页框那么大。因此，<span style = \"color : red\">页框不能太大，否则可能产生过大的内部碎片</span></p>\n<ul>\n<li>例如：进程  <code>A</code>  大小为 15 KB，则最后一个页面大小为 3 KB。3 KB 的页面放入到 4KB 的页框里</li>\n<li>显然会产生 1 KB 内部碎片</li>\n</ul>\n<hr />\n<p>操作系统 <span style = \"color : red\">以页框为单位为各个进程分配</span> 内存空间。</p>\n<p>进程的每个页面分别放入一个页框中。</p>\n<ul>\n<li>也就是说，进程的 <span style = \"color : red\">页面</span> 与内存的 <span style = \"color : red\">页框</span> 有 <span style = \"color : red\">一一对应</span> 的关系。</li>\n</ul>\n<p><strong>各个页面不必连续存放，也不必按先后顺序来，可以放到不相邻的各个页框中。</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230208215505953.png\" alt=\"image-20230208215505953\" /></p>\n<hr />\n<h3 id=\"如何实现地址的转换\"><a class=\"anchor\" href=\"#如何实现地址的转换\">#</a> 如何实现地址的转换</h3>\n<p>将进程地址空间 <span style = \"color : red\">分页</span> 之后，操作系统该如何实现逻辑地址到物理地址的转换？</p>\n<hr />\n<p>进程在内存中 <span style = \"color : red\">连续存放</span> 时，操作系统是如何实现逻辑地址到物理地址的转换的？</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230206234526157.png\" alt=\"image-20230206234526157\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230206234716942.png\" alt=\"image-20230206234716942\" /></p>\n<p>思想：模块在内存中的的 “<span style = \"color : red\">起始地址</span>”＋目标内存单元相对于起始位置的 “<span style = \"color : red\">偏移量</span>”</p>\n<hr />\n<p>如果采用 <span style = \"color : red\">分页技术</span>，应该如何实现地址转换？</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230208221800850.png\" alt=\"image-20230208221800850\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230208221918222.png\" alt=\"image-20230208221918222\" /></p>\n<p>逻辑地址为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>80</mn></mrow><annotation encoding=\"application/x-tex\">80</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">80</span></span></span></span> 的内存单元：</p>\n<p>应该在 <span style = \"color : red\">1 号页</span>，该页在内存中的 <span style = \"color : red\">起始位置为 450</span>，逻辑地址为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>80</mn></mrow><annotation encoding=\"application/x-tex\">80</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">80</span></span></span></span> 的内存单元相对于<strong>该页的起始地址（50）而言</strong>，<span style = \"color : red\">“偏移量”应该是 30 </span>。</p>\n<p><span style = \"color : red\">实际物理地址</span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo><mn>450</mn><mo>+</mo><mn>30</mn><mo>=</mo><mn>480</mn></mrow><annotation encoding=\"application/x-tex\">= 450 + 30 = 480</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.3669em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">450</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">30</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">480</span></span></span></span></p>\n<hr />\n<ol>\n<li>要算出逻辑地址对应的 <span style = \"color : red\">页号</span></li>\n<li>要知道该页号对应 <span style = \"color : red\">页面在内存中的起始地址</span></li>\n<li>要算出逻辑地址 <span style = \"color : red\">在页面内的“偏移量”</span></li>\n<li><span style = \"color : red\">物理地址 = 页面始址＋页内偏移量</span></li>\n</ol>\n<hr />\n<p>如何计算:</p>\n<ul>\n<li>\n<p><span style = \"color : red\">页号</span> = 逻辑地址 / 页面长度（取除法的整数部分)</p>\n</li>\n<li>\n<p><span style = \"color : red\">页内偏移量</span> = 逻辑地址 % 页面长度（取除法的余数部分）</p>\n</li>\n<li>\n<p>页面 <span style = \"color : red\">在内存中的起始位置</span>：操作系统需要用某种数据结构记录进程各个页面的起始位置。</p>\n</li>\n</ul>\n<p><span style = \"color : red\">页号</span> = 80 / 50 = 1</p>\n<p><span style = \"color : red\">页内偏移量</span>= 80 % 50 = 30</p>\n<p><span style = \"color : red\">1 号页</span> 在内存中存放的 <span style = \"color : red\">起始位置</span> 450</p>\n<p>物理地址 = 页面始址＋页内偏移量 = 450 + 30 = 480</p>\n<hr />\n<p>为了方便计算页号、页内偏移量，<span style = \"color : red\">页面大小</span> 一般设为 <span style = \"color : red\">2 的整数幂</span></p>\n<p>假设用 32 个二进制位表示逻辑地址，页面大小为 2<sup>12</sup> B= 4096 B = 4 KB</p>\n<p><span style = \"color : red\">0 号页</span> 的逻辑地址空间应该是 0~4095 ，用二进制表示应该是:</p>\n<ul>\n<li><span style = \"color : red\">00000000000000000000</span><u>000000000000</u> ~ <span style = \"color : red\">00000000000000000000</span>111111111111</li>\n</ul>\n<p><span style = \"color : red\">1号页</span> 的逻辑地址空间应该是 4096~8191，用二进制表示应该是:</p>\n<ul>\n<li><span style = \"color : red\">00000000000000000001</span><u>000000000000</u> ~ <span style = \"color : red\">00000000000000000001</span>111111111111</li>\n</ul>\n<p><span style = \"color : red\">2号页</span> 的逻辑地址空间应该是 8192~12287，用二进制表示应该是:</p>\n<ul>\n<li><span style = \"color : red\">00000000000000000010</span><u>000000000000</u> ~ <span style = \"color : red\">00000000000000000010</span>111111111111</li>\n</ul>\n<p><code>Eg</code> ：逻辑地址 2，用二进制表示应该是 <span style = \"color : red\">00000000000000000000</span><u>000000000010</u></p>\n<ul>\n<li>若 0 号页在内存中的起始地址为  <code>X</code> ，则逻辑地址 2 对应的物理地址应该是 X+ <u>000000000010</u></li>\n</ul>\n<p><code>Eg</code> ：逻辑地址 4097，用二进制表示应该是 <span style = \"color : red\">00000000000000000001</span><u>000000000001</u></p>\n<ul>\n<li>若 1 号页在内存中的起始地址为  <code>X</code> ，则逻辑地址 4097 对应的物理地址应该是 X + <u>000000000001</u></li>\n</ul>\n<p>结论：如果每个页面大小为 2<sup>K</sup> B，用二进制数表示逻辑地址</p>\n<ul>\n<li>则末尾  <code>K</code>  位即为 <span style = \"color : red\">页内偏移量</span>，<strong>其余部分就是页号</strong></li>\n</ul>\n<hr />\n<h3 id=\"逻辑地址结构\"><a class=\"anchor\" href=\"#逻辑地址结构\">#</a> 逻辑地址结构</h3>\n<p>分页存储管理的 <span style = \"color : red\">逻辑地址结构</span> 如下所示：</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230209221819610.png\" alt=\"image-20230209221819610\" /></p>\n<p>地址结构包含两个部分：前一部分为页号，后一部分为页内偏移量  <code>W</code> 。</p>\n<p>在上图所示的例子中，地址长度为 32 位，</p>\n<ul>\n<li>其中 0 ~ 11 位为 “<span style = \"color : red\">页内偏移量</span>”，或称 “<span style = \"color : red\">页内地址</span> ”;</li>\n<li>12~31 位为 “<span style = \"color : red\">页号</span>”。</li>\n</ul>\n<p><span style = \"color : red\">如果有 K 位表示 “页内偏移量” ，则说明该系统中一个页面的大小是 2{% raw %}<sup>K</sup>{% endraw %} 个内存单元 &lt;/span&gt;</p>\n<p><span style = \"color : red\">如果有 M 位表示 “页号”，则说明在该系统中，一个进程最多允许有 2{% raw %}<sup>M</sup>{% endraw %} 个页面 &lt;/span&gt;</p>\n<hr />\n<p>分页存储管理中，如何实现地址转换？</p>\n<ol>\n<li>要算出逻辑地址对应的 <span style = \"color : red\">页号</span></li>\n<li>要知道该页号对应 <span style = \"color : red\">页面在内存中的起始地址</span></li>\n<li>要算出逻辑地址 <span style = \"color : red\">在页面内的 “偏移量”</span></li>\n<li><span style = \"color : red\">物理地址 = 页面始址＋页内偏移量</span></li>\n</ol>\n<p>若用十进制数表示逻辑地址，可以用：</p>\n<ul>\n<li>\n<p><span style = \"color : red\">页号</span> = 逻辑地址 / 页面长度（取除法的整数部分)</p>\n</li>\n<li>\n<p><span style = \"color : red\">页内偏移量</span> = 逻辑地址 % 页面长度（取除法的余数部分）</p>\n</li>\n</ul>\n<hr />\n<h3 id=\"页表-页表项\"><a class=\"anchor\" href=\"#页表-页表项\">#</a> 页表、页表项</h3>\n<p>为了能知道进程的每个页面在内存中存放的位置，操作系统要 <span style = \"color : red\">为每个进程建立一张页表</span>。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230209223124406.png\" alt=\"image-20230209223124406\" /></p>\n<p><span style = \"color : red\">每个页表项的长度是相同的，页号是 “隐含” 的</span></p>\n<p><code>Eg</code> ：假设某系统物理内存大小为 4GB，页面大小为 4KB，则每个<strong>页表项</strong>至少应该为多少字节？</p>\n<p>4GB = 2<sup>32</sup> B，4KB = 2<sup>12</sup> B</p>\n<p>因此 4GB 的内存总共会被分为 2<sup>32</sup>/ 2<sup>12</sup> = 2<sup>20</sup> 个内存块（页框），因此内存块号的范围应该是 0 ~ 2<sup>20</sup> - 1</p>\n<p>因此至少要 20 个二进制位才能表示这么多的内存块号，因此至少要 3 个字节才够</p>\n<ul>\n<li>每个字节 8 个二进制位，3 个字节共 24 个二进制位</li>\n</ul>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230209231704773.png\" alt=\"image-20230209231704773\" /></p>\n<p>各页表项会 <span style = \"color : red\">按顺序连续地</span> 存放在内存中</p>\n<p>如果该页表在内存中存放的起始地址为  <code>X</code> ，</p>\n<p>则  <code>M</code>  号页对应的页表项一定是存放在内存地址为 X＋3 * M 。因此，页表中的 “页号” 可以是 “隐含” 的。</p>\n<p>只需要知道 <span style = \"color : red\">页表存放的起始地址</span> 和 <span style = \"color : red\">页表项长度</span>，即可找到各个页号对应的页表项存放的位置</p>\n<ul>\n<li>在本例中，一个页表项占 3B，如果进程由 n 个页面，则该进程的页表总共会占 3*n 个字节</li>\n</ul>\n<h3 id=\"整体框架-2\"><a class=\"anchor\" href=\"#整体框架-2\">#</a> 整体框架</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230209232412018.png\" alt=\"image-20230209232412018\" /></p>\n<h2 id=\"基本地址变换机构\"><a class=\"anchor\" href=\"#基本地址变换机构\">#</a> 基本地址变换机构</h2>\n<p>用于实现逻辑地址到物理地址转换的一组硬件机构</p>\n<hr />\n<p>基本地址变换机构可以借助进程的页表将逻辑地址转换为物理地址。</p>\n<h3 id=\"页表寄存器ptr\"><a class=\"anchor\" href=\"#页表寄存器ptr\">#</a> 页表寄存器（PTR）</h3>\n<p>通常会在系统中设置一个 <span style = \"color : red\">页表寄存器</span>（PTR），存放 <span style = \"color : red\">页表在内存中的起始地址 F </span> 和 <span style = \"color : red\">页表长度 M</span>。</p>\n<ul>\n<li><code>页表长度 M</code> ：<strong>这个进程当中有 M 个页表项（页面）</strong></li>\n</ul>\n<p>进程未执行时，页表的始址和页表长度 <span style = \"color : red\">放在进程控制块（PCB）中</span>，当进程被调度时，操作系统内核会把它们放到页表寄存器中。</p>\n<p>注意：<span style = \"color : red\">页面大小是2的整数幂</span></p>\n<h3 id=\"逻辑地址到物理地址的变换过程\"><a class=\"anchor\" href=\"#逻辑地址到物理地址的变换过程\">#</a> 逻辑地址到物理地址的变换过程！</h3>\n<p>设页面大小为  <code>L</code>  ，逻辑地址  <code>A</code>  到物理地址  <code>E</code>  的变换过程如下:</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230209233442364.png\" alt=\"image-20230209233442364\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230209234326417.png\" alt=\"image-20230209234326417\" /></p>\n<p>① 计算页号  <code>Р</code>  和页内偏移量  <code>w</code></p>\n<ul>\n<li>如果用十进制数手算，则  <code>P = A / L, W = A % L</code> ；但是在计算机实际运行时，逻辑地址结构是固定不变的，因此计算机硬件可以更快地得到二进制表示的页号、页内偏移量</li>\n</ul>\n<p>② 比较页号  <code>P</code>  和页表长度  <code>M</code> ，若 P &gt; M，则产生越界中断，否则继续执行。(注意：页号是从 0 开始的，而页表长度至少是 1 ，因此 P = M 时也会越界)</p>\n<p>③ 页表中页号  <code>P</code>  对应的 <span style = \"color : red\">页表项地址 = 页表起始地址 F + 页号 p * 页表项长度</span>，取出该页表项内容  <code>b</code> ，即为内存块号。</p>\n<ul>\n<li>页表项地址对应的映射为物理地址</li>\n</ul>\n<p>注意区分 <span style = \"color : red\">页表项长度、页表长度、页面大小的区别</span>。</p>\n<ul>\n<li><span style = \"color : red\">页表长度</span> 指的是这个页表中总共有几个页表项，即该<strong>进程总共有几个页面</strong>；</li>\n<li><span style = \"color : red\">页表项长度</span> 指的是每个页表项占多大的存储空间，相对于页表</li>\n<li><span style = \"color : red\">页面大小</span> 指的是一个页面占多大的存储空间，相对于进程</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230210223856789.png\" alt=\"image-20230210223856789\" /></p>\n<p>④ 计算 物理地址  <code>E = b * L + W</code> ，期得到的物理地址  <code>E</code>  去访存。</p>\n<ul>\n<li>\n<p><code>b</code>  : 物理块号； <code>L</code>  ：<strong>页面大小</strong>（如上图所示）</p>\n</li>\n<li>\n<p>如果内存块号、页面偏移量是用二进制表示的，那么把二者拼接起来就是最终的物理地址了</p>\n</li>\n</ul>\n<p>上述为什么</p>\n<p>动手验证：假设页面大小  <code>L= 1KB</code> ，最终要访问的内存块号  <code>b = 2</code> ，页内偏移量  <code>W = 10231</code></p>\n<p>① 尝试用  <code>E= b * L + W</code>  计算目标物理地址。</p>\n<p>② 尝试把内存块号、页内偏移量用二进制表示，并把它们拼接起来得到物理地址。</p>\n<ul>\n<li>对比 ①② 的结果是否一致</li>\n</ul>\n<hr />\n<h3 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h3>\n<p>例：若页面大小  <code>L</code>  为  <code>1K</code>  字节，页号  <code>2</code>  对应的内存块号  <code>b = 8</code> ，将逻辑地址  <code>A = 2500</code>  转换为物理地址  <code>E</code>  。</p>\n<p><strong>等价描述</strong>：某系统 <span style = \"color : red\">按字节寻址</span>，逻辑地址结构中，<span style = \"color : red\">页内偏移量占 10 位</span>，页号  <code>2</code>  对应的内存块号  <code>b = 8</code> ，将逻辑地址  <code>A = 2500</code>  转换为物理地址  <code>E</code> 。</p>\n<ul>\n<li><span style = \"color : red\">页内偏移量占 10 位</span> ：说明一个页面的大小 ： 2<sup>10</sup> B = 1KB</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230209221819610.png\" alt=\"image-20230209221819610\" /></p>\n<hr />\n<p>页面大小为 L ： <code>1K = 1024 B</code></p>\n<p>逻辑地址 A =  <code>2500</code> ：</p>\n<ul>\n<li>\n<p>所对应的<strong>页号</strong>：  <code>A / L = 2500 / 1024 = 2</code> （整除）</p>\n</li>\n<li>\n<p>所对应的<strong>页内偏移量</strong>： <code>A % L = 2500 % 1024 = 452</code></p>\n</li>\n</ul>\n<p>根据题中条件可知，页号 2 没有越界，其存放的内存块号  <code>b = 8</code></p>\n<p>页面（页框）始址 = 页面大小 * 内存块号 =  <code>L * b = 8 K = 8192 B</code></p>\n<p>物理地址  <code>E</code>  = 页面始址 + 偏移量 =  <code>8192 B + 452 = 8644</code></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230210223853475.png\" alt=\"image-20230210223853475\" /></p>\n<p><strong>注：</strong><span style = \"color : red\">最好记住该图, 可以更方便的理解</span></p>\n<hr />\n<p>在分页存储管理（页式管理）的系统中，只要确定了每个页面的大小，逻辑地址结构就确定了。</p>\n<p>因此，<span style = \"color : red\">页式管理中地址是一维的</span>。</p>\n<ul>\n<li>即，<strong>只要给出一个逻辑地址</strong>，系统就可以自动地算出页号、页内偏移量两个部分，并不需要显式地告诉系统这个逻辑地址中，页内偏移量占多少位。</li>\n</ul>\n<hr />\n<h3 id=\"页表项大小的进一步探讨\"><a class=\"anchor\" href=\"#页表项大小的进一步探讨\">#</a> 页表项大小的进一步探讨</h3>\n<p><span style = \"color : red\">每个页表项的长度是相同的，页号是 “隐含” 的</span></p>\n<p><code>Eg</code> ：假设某系统物理内存大小为 4GB，页面大小为 4KB，则每个<strong>页表项</strong>至少应该为多少字节？</p>\n<p>4GB = 2<sup>32</sup> B，4KB = 2<sup>12</sup> B</p>\n<p>因此 4GB 的内存总共会被分为 2<sup>32</sup>/ 2<sup>12</sup> = 2<sup>20</sup> 个内存块（页框），因此内存块号的范围应该是 0 ~ 2<sup>20</sup> - 1</p>\n<p>因此至少要 20 个二进制位才能表示这么多的内存块号，因此至少要 3 个字节才够</p>\n<ul>\n<li>每个字节 8 个二进制位，3 个字节共 24 个二进制位</li>\n</ul>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230209231704773.png\" alt=\"image-20230209231704773\" /></p>\n<p>各页表项会 <span style = \"color : red\">按顺序连续地</span> 存放在内存中</p>\n<p>如果该页表在内存中存放的起始地址为  <code>X</code> ，</p>\n<p>则  <code>M</code>  号页对应的页表项一定是存放在内存地址为 X＋3 * M</p>\n<hr />\n<p>一个页面为 4 KB ，则<strong>每个页框</strong>可以存放 4096 / 3 = 1365 个页表项，但是这个页框会剩余 4096 % 3=1B <strong>页内碎片</strong></p>\n<p>因此，1365 号页表项存放的  地址为 X＋3 * 1365 + 1</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230210011436662.png\" alt=\"image-20230210011436662\" /></p>\n<p>如果 <span style = \"color : red\">每个页表项占 4 字节</span>，则每个页框刚好可存放 1024 个页表项</p>\n<p>1024 号页表项虽然是存放在下一个页框中的，但是它的地址依然可以用 X + 4 * 1024 得出</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230210011938051.png\" alt=\"image-20230210011938051\" /></p>\n<p><span style = \"color : red\">结论</span>：理论上，页表项长度为 3B 即可表示内存块号的范围，但是，为了方便页表的查询，常常会让一个页表项占更多的字节，使得 <span style = \"color : red\">每个页面恰好可以装得下整数个页表项</span>。</p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230210224212290.png\" alt=\"image-20230210224212290\" /></p>\n<hr />\n<h3 id=\"图形记忆\"><a class=\"anchor\" href=\"#图形记忆\">#</a> 图形记忆！</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230209234326417.png\" alt=\"image-20230209234326417\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230210223847903.png\" alt=\"image-20230210223847903\" /></p>\n<p><strong>进程页表</strong>通常是 <span style = \"color : red\">装在连续的内存块中</span> 的</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230210224153243.png\" alt=\"image-20230210224153243\" /></p>\n<p><strong>注：</strong><span style = \"color : red\">最好记住这 2 图, 可以更方便的理解</span></p>\n<hr />\n<p><span style = \"color : red\">其实就是先从内存找到页表，再从页表中获取页号对应物理地址，再根据物理地址从内存中访问相应的数据</span></p>\n<h3 id=\"整体框架-3\"><a class=\"anchor\" href=\"#整体框架-3\">#</a> 整体框架</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230210013329935.png\" alt=\"image-20230210013329935\" /></p>\n<p>第一次访问内存：<strong>查页表</strong></p>\n<p>第二次访问内存：<strong>访问目标内存单元</strong></p>\n<h2 id=\"具有快表的地址变换机构\"><a class=\"anchor\" href=\"#具有快表的地址变换机构\">#</a> 具有快表的地址变换机构</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230210235926244.png\" alt=\"image-20230210235926244\" /></p>\n<h4 id=\"局部性原理时间空间\"><a class=\"anchor\" href=\"#局部性原理时间空间\">#</a> 局部性原理（时间 / 空间）</h4>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230210232343404.png\" alt=\"image-20230210232343404\" /></p>\n<p><span style = \"color : red\">时间局部性</span>：如果执行了程序中的某条指令，那么不久后这条指令很有可能再次执行；如果某个数据被访问过，不久之后该数据很可能再次被访问。(因为程序中存在大量的循环)</p>\n<p><span style = \"color : red\">空间局部性</span>：一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也很有可能被访问。（因为很多数据在内存中都是连续存放的)</p>\n<p>上小节介绍的 <span style = \"color : red\">基本地址变换机构</span> 中，每次要访问一个逻辑地址，都需要 <span style = \"color : red\">查询内存中的页表</span>。由于局部性原理，<span style = \"color : red\">可能连续很多次查到的都是同一个页表项</span>。既然如此，<strong>能否利用这个特性减少访问页表的次数呢？</strong></p>\n<ul>\n<li>例如：每次获取物理地址都需要页面始址，每次都需要从页表中获取相应的物理块号，再根据物理块号获取页面始址</li>\n</ul>\n<hr />\n<h3 id=\"什么是快表相联寄存器tlb\"><a class=\"anchor\" href=\"#什么是快表相联寄存器tlb\">#</a> 什么是快表（相联寄存器）（TLB）</h3>\n<p><span style = \"color : red\">快表</span>，又称 <span style = \"color : red\">相联寄存器（TLB）</span>，是一种 <span style = \"color : red\">访问速度比内存快很多</span> 的高速缓冲存储器，用来存放当前访问的若干页表项，以加速地址变换的过程。与此对应，<strong>内存中的页表</strong>常称为 <span style = \"color : red\">慢表</span>。</p>\n<hr />\n<p>程序计数器  <code>PC</code> ：存放下一条指令的逻辑地址</p>\n<p>系统查询到页表项后，会将该页表项自动地复制到快表中</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230210233939098.png\" alt=\"image-20230210233939098\" /></p>\n<p>即：<strong>若快表命中就不需要再访问内存了</strong></p>\n<p>快表中存放的是页表中的一部分副本</p>\n<hr />\n<h3 id=\"引入快表后地址的变换过程\"><a class=\"anchor\" href=\"#引入快表后地址的变换过程\">#</a> 引入快表后，地址的变换过程</h3>\n<p>①  <code>CPU</code>  给出逻辑地址，由某个硬件算得页号、页内偏移量，将页号与快表中的所有页号进行比较。</p>\n<p>② 如果找到匹配的页号，说明要访问的页表项在快表中有副本，则直接从中取出该页对应的内存块号，再将内存块号与页内偏移量拼接形成物理地址，最后，<span style = \"color : red\">访问</span> 该物理地址对应的 <span style = \"color : red\">内存单元</span>。因此，<span style = \"color : red\">若快表命中</span>，则访问某个逻辑地址仅需 <span style = \"color : red\">一次访存</span> 即可。</p>\n<p>③ 如果没有找到匹配的页号，则需要 <span style = \"color : red\">访问内存中的页表</span>，找到对应页表项，得到页面存放的内存块号，再将内存块号与页内偏移量拼接形成物理地址，最后，<span style = \"color : red\">访问</span> 该物理地址对应的 <span style = \"color : red\">内存单元</span>。因此，若 <span style = \"color : red\">快表未命中</span>，则访问某个逻辑地址需要 <span style = \"color : red\">两次访存</span>（<span style = \"color : red\">注意：在找到页表项后，应同时将其存入快表</span>，以便后面可能的再次访问。但若快表已满，则必须按照<strong>一定的算法</strong>对旧的页表项进行替换)</p>\n<hr />\n<p>由于查询快表的速度比查询页表的速度快很多，因此只要快表命中，就可以节省很多时间因为局部性原理，一般来说快表的命中率可以达到 90% 以上。</p>\n<hr />\n<p>例：某系统使用基本分页存储管理，并采用了具有快表的地址变换机构。访问一次快表耗时 1us，访问一次内存耗时 100us 。若快表的命中率为 90% ，那么访问一个逻辑地址的平均耗时是多少？</p>\n<p>(1 + 100)  * 0.9 + (<span style = \"color : red\">1</span> + 100 + 100) * 0.1 = <span style = \"color : red\">111 us</span>  （默认）</p>\n<ul>\n<li>因为根据页号获取到物理块号后，还需要访问一次内存单元</li>\n</ul>\n<p>有的系统支持<strong>快表和慢表同时查找</strong>，如果是这样，平均耗时应该是 (1+100) * 0.9 +(100+100) * 0.1 = <span style = \"color : red\">110.9 us</span></p>\n<ul>\n<li>如何快表查询成功了，就停止慢表的查询操作</li>\n</ul>\n<p>若未采用快表机制，则访问一个逻辑地址需要 <span style = \"color : red\">100 + 100 = 200 us</span></p>\n<hr />\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>地址变换过程</th>\n<th>访问一个逻辑地址的访问次数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>基本地址变换机构</td>\n<td>① 算页号、页内偏移量 <br/>② 检查页号合法性 <br/>③ 查页表，找到页面存放的内存块号 <br/>④ 根据内存块号与页内偏移量得到物理地址 <br/>⑤ 访问目标内存单元</td>\n<td><span style = \"color : red\">两次访存</span></td>\n</tr>\n<tr>\n<td>具有快表的地址变换机构</td>\n<td>① 算页号、页内偏移量②检查页号合法性 <br/>③ 查快表。<br/> 若命中，即可知道页面存放的内存块号，可直接进行 ⑤ <br/> 若未命中则进行 ④<br/>④ 查页表，找到页面存放的内存块号，并且将页表项复制到快表中 <br/>⑤ 根据内存块号与页内偏移量得到物理地址 <br/>⑥ 访问目标内存单元</td>\n<td>快表 <span style = \"color : red\">命中</span>，只需 <span style = \"color : red\">一次访存</span><br/> 快表 <span style = \"color : red\">未命中</span>，需要 <span style = \"color : red\">两次访存</span></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"两级页表\"><a class=\"anchor\" href=\"#两级页表\">#</a> 两级页表</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230211000029813.png\" alt=\"image-20230211000029813\" /></p>\n<hr />\n<h3 id=\"单级页表存在的问题\"><a class=\"anchor\" href=\"#单级页表存在的问题\">#</a> 单级页表存在的问题</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230210223847903.png\" alt=\"image-20230210223847903\" /></p>\n<p>某计算机系统按字节寻址，支持 32 位的逻辑地址，采用分页存储管理，页面大小为 4 KB ，页表项长度为 4 B 。</p>\n<p>4 KB= 2<sup>12</sup> B，因此<strong>页内地址</strong>（页内偏移量）要用 12 位表示，剩余 20 位表示页号。</p>\n<p>因此，该系统中用户进程最多有 2<sup>20</sup> 页。相应的，一个进程的页表中，最多会有 2<sup>20</sup> = 1 M= 1,048,576 个<strong>页表项</strong>，所以一个页表最大需要 2<sup>20</sup> * 4 B= 2<sup>22</sup> B，共需要 2<sup>22</sup> / 2<sup>12</sup>= 2<sup>10</sup> 个<strong>页框</strong>存储该页表。</p>\n<ul>\n<li>页框个数 = 页表大小 / 页面大小</li>\n<li>页表大小 = 页表项个数 * 页表项长度</li>\n</ul>\n<p>根据页号查询页表的方法：K 号页对应的页表项存放位置 = 页表始址＋K * 4</p>\n<p><span style = \"color : red\">要在所有的页表项都连续存放</span> 的基础上才能用这种方法找到页表项</p>\n<p><strong>问题 ①</strong> ：上述需要专门给进程分配 2<sup>10</sup> = <u>1024 个连续的页框</u> 来存放它的页表</p>\n<p><strong>问题 ②</strong> ：根据局部性原理可知，很多时候，<span style = \"color : red\">进程在一段时间内只需要访问某几个页面就可以正常运行了</span>。</p>\n<ul>\n<li>因此 <span style = \"color : red\">没有必要让整个页表都常驻内存</span>。</li>\n</ul>\n<hr />\n<h3 id=\"如何解决单级页表的问题问题一页目录表\"><a class=\"anchor\" href=\"#如何解决单级页表的问题问题一页目录表\">#</a> 如何解决单级页表的问题？问题一（页目录表）</h3>\n<p><span style = \"color : red\">问题一：页表必须连续存放，因此当页表很大时，需要占用很多个连续的页框。</span></p>\n<p>问题二：没有必要让整个页表常驻内存，因为进程在一段时间内可能只需要访问某几个特定的页面。</p>\n<hr />\n<p>思考：我们是如何解决进程在内存中必须连续存储的问题的？</p>\n<ul>\n<li>将进程地址空间分页，并为其建立一张页表，记录各页面的存放位置</li>\n</ul>\n<p>同样的思路也可用于解决 “页表必须连续存放” 的问题，把必须连续存放的页表再分页</p>\n<hr />\n<p><span style = \"color : red\">可将长长的页表进行分组，使每个内存块刚好可以放入一个分组</span></p>\n<ul>\n<li>比如上个例子中，页面大小 4KB，每个页表项 4B，每个页面（页框）可存放 1K 个页表项，</li>\n<li>因此每 1K 个连续的页表项为一组，每组刚好占一个内存块，再讲各组离散地放到各个内存块中</li>\n</ul>\n<p>另外，要为离散分配的页表再建立一张页表，称为 <span style = \"color : red\">页目录表</span>，或称 <span style = \"color : red\">外层页表</span>，或称 <span style = \"color : red\">顶层页表</span></p>\n<hr />\n<h3 id=\"两级页表的原理-地址结构\"><a class=\"anchor\" href=\"#两级页表的原理-地址结构\">#</a> 两级页表的原理、地址结构</h3>\n<p>32 位逻辑地址空间，页表项大小为 4 B，页面大小为 4 KB，则页内地址占 12 位</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230211004211465.png\" alt=\"image-20230211004211465\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230211004325843.png\" alt=\"image-20230211004325843\" /></p>\n<hr />\n<p>如下所示：内存块号  <code>3</code>  存储的是 0# 页表的所有页表项</p>\n<p><strong>就是将页表分组，根据页目录表找相应的几号页表，再根据页号找该页表中的页表项对应的物理块号</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230211005004910.png\" alt=\"image-20230211005004910\" /></p>\n<hr />\n<h3 id=\"如何实现地址变换\"><a class=\"anchor\" href=\"#如何实现地址变换\">#</a> 如何实现地址变换？</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230211005432833.png\" alt=\"image-20230211005432833\" /></p>\n<h3 id=\"如何解决单级页表的问题问题二-缺页中断\"><a class=\"anchor\" href=\"#如何解决单级页表的问题问题二-缺页中断\">#</a> 如何解决单级页表的问题？问题二 （缺页中断）</h3>\n<p>问题一：页表必须连续存放，因此当页表很大时，需要占用很多个连续的页框。</p>\n<p><span style = \"color : red\">问题二：没有必要让整个页表常驻内存，因为进程在一段时间内可能只需要访问某几个特定的页面。</span></p>\n<hr />\n<p>可以在需要访问页面时才把页面调入内存（<strong>虚拟存储技术</strong>）。</p>\n<ul>\n<li>可以在页表项中增加一个<strong>标志位</strong>，用于表示该页面是否已经调入内存</li>\n</ul>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230211005848270.png\" alt=\"image-20230211005848270\" /></p>\n<p>缺页中断肯定是在执行某一条指令，想访问某一个暂时还没有调入页面的时候产生的</p>\n<ul>\n<li>所以这个中断信号和当前执行的指令有关，因此这种中断是属于内中断</li>\n</ul>\n<h3 id=\"需要注意的几个细节\"><a class=\"anchor\" href=\"#需要注意的几个细节\">#</a> 需要注意的几个细节 ！</h3>\n<p>① 若采用多级页表机制，则 <span style = \"color : red\">各级页表的大小不能超过一个页面（页框）</span></p>\n<p><strong>例</strong>：某系统按字节编址，采用 40 位逻辑地址，页面大小为 4 KB，页表项大小为 4 B，假设采用纯页式存储，则要采用（）级页表，页内偏移量为（）位？</p>\n<p>页面大小 = 4 KB = 2<sup>12</sup> B，按字节编址，因此页内偏移量为 12 位</p>\n<p>页号 = 40 - 12= 28 位</p>\n<p>页面大小 = 2<sup>12</sup> B，页表项大小 = 4 B，则每个页面（页框，因为这是分页存储）可存放 2<sup>12</sup> / 4 = 2<sup>10</sup> 个页表项</p>\n<p>因此各级页表最多包含 2<sup>10</sup> 个页表项，需要 10 位二进制位才能映射到 2<sup>10</sup> 个页表项，因此每一级的页表对应页号应为 10 位。总共 28 位的页号至少要分为三级</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230211010808958.png\" alt=\"image-20230211010808958\" /></p>\n<p>如果只分为两级页表，则一级页号占 18 位，也就是说页目录表中最多可能有 2<sup>18</sup> 个页表项</p>\n<p>显然，一个页面是放不下这么多页表项的。</p>\n<hr />\n<p>② 两级页表的 <span style = \"color : red\">访存次数</span> 分析（假设没有快表机构）</p>\n<ul>\n<li>第一次访存：访问内存中的页目录表</li>\n<li>第二次访存：访问内存中的二级页表</li>\n<li>第三次访存：访问目标内存单元</li>\n</ul>\n<h3 id=\"整体框架-4\"><a class=\"anchor\" href=\"#整体框架-4\">#</a> 整体框架</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230211013008639.png\" alt=\"image-20230211013008639\" /></p>\n<h1 id=\"基本分段存储方式\"><a class=\"anchor\" href=\"#基本分段存储方式\">#</a> 基本分段存储方式</h1>\n<p>与 “分页” 最大的区别就是――离散分配时所分配地址空间的基本单位不同</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230211204221555.png\" alt=\"image-20230211204221555\" /></p>\n<hr />\n<h2 id=\"分段\"><a class=\"anchor\" href=\"#分段\">#</a> 分段</h2>\n<p>进程的地址空间：按照程序 <span style = \"color : red\">自身的逻辑</span> 关系 <span style = \"color : red\">划分为若干个段</span>，每个段都有一个<strong>段名</strong>（在低级语言中，程序员使用段名来编程)，<span style = \"color : red\">每段从 0 开始编址</span></p>\n<p>内存分配规则：以段为单位进行分配，<span style = \"color : red\">每个段在内存中占据连续空间</span>，但 <span style = \"color : red\">各段之间可以不相邻</span>。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230211205639514.png\" alt=\"image-20230211205639514\" /></p>\n<p>由于是按逻辑功能模块划分，用户 <span style = \"color : red\">编程更方便，程序的可读性更高</span></p>\n<pre><code>LOAD 1,[D] |&lt;A&gt;;\t//将分段 D 中 A 单元内的值读入寄存器 1\nSTORE1,[X] |&lt;B&gt;;\t//将寄存器 1 的内容存入 X 分段的 B 单元中\n</code></pre>\n<p><strong>编译程序会将段名转换为段号</strong></p>\n<hr />\n<p>分段系统的逻辑地址结构由段号（段名）和段内地址（<strong>段内偏移量</strong>）所组成。如:</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230211213103515.png\" alt=\"image-20230211213103515\" /></p>\n<p><span style = \"color : red\">段号的位数决定了每个进程最多可以分几个段</span></p>\n<p><span style = \"color : red\">段内地址位数决定了每个段的最大长度是多少</span></p>\n<hr />\n<p>在上述例子中，若系统是按字节寻址的，则</p>\n<p>段号占 16 位，因此在该系统中，每个进程最多有 2<sup>16 </sup>= 64 K 个段段内地址占 16 位，</p>\n<ul>\n<li>因此每个段的最大长度是 2<sup>16 </sup>= 64 KB。</li>\n</ul>\n<pre><code>LOAD 1,[D] |&lt;A&gt;;\t//将分段 D 中 A 单元内的值读入寄存器 1\nSTORE1,[X] |&lt;B&gt;;\t//将寄存器 1 的内容存入 X 分段的 B 单元中\n</code></pre>\n<p>写程序时使用的段名  <code>[D]</code> 、 <code>[X]</code>  会被编译程序翻译成对应短号</p>\n<p><code>&lt;A&gt; </code>  单元、 <code>&lt;B&gt;</code>  单元会被编译程序翻译成段内地址</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230211213959521.png\" alt=\"image-20230211213959521\" /></p>\n<hr />\n<h2 id=\"段表\"><a class=\"anchor\" href=\"#段表\">#</a> 段表</h2>\n<p>问题：程序分多个段，各段离散地装入内存，为了保证程序能正常运行，<strong>就必须能从物理内存中找到各个逻辑段的存放位置</strong>。为此，需为每个进程建立一张段映射表，简称 “<span style = \"color : red\">段表</span>”。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230211223237764.png\" alt=\"image-20230211223237764\" /></p>\n<p>① 每个段对应一个段表项，其中记录了该段在内存中的 <span style = \"color : red\">起始位置</span>（又称 “<span style = \"color : red\">基址</span>” ）和 <span style = \"color : red\">段的长度</span>。</p>\n<p>② <span style = \"color : red\">各个段表项的长度是相同的</span> 。</p>\n<p>例如：某系统按字节寻址，采用分段存储管理，逻辑地址结构为（段号 16 位，段内地址 16 位），因此用 16 位即可表示最大段长。物理内存大小为 4GB（可用 32 位表示整个物理内存地址空间）。</p>\n<ul>\n<li>因此，可以让每个段表项占 16 + 32= 48 位，即 6B。\n<ul>\n<li><strong>因为段表项要记录段长（最大 16 位） 和基址（最大 32 位），所以是 48 位</strong></li>\n<li>物理内存为 4 GB，也就是基址的范围为 0 ~ 2<sup>32</sup> 位</li>\n</ul>\n</li>\n<li>由于段表项长度相同，因此 <span style = \"color : red\">段号可以是隐含的，不占存储空间</span>。若段表存放的起始地址为 M，则 K 号段对应的段表项存放的地址为 M + K * 6</li>\n</ul>\n<h2 id=\"地址变换\"><a class=\"anchor\" href=\"#地址变换\">#</a> 地址变换</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230211223642005.png\" alt=\"image-20230211223642005\" /></p>\n<pre><code>LOAD 1,[D] |&lt;A&gt;;\t//将分段 D 中 A 单元内的值读入寄存器 1\n</code></pre>\n<p>经过编译程序编译后，形成等价的机器指令:</p>\n<p>“取出段号为 2，段内地址为 1024 的内存单元中的内容，放到寄存器 1 中”</p>\n<p>机器指令中的逻辑地址用二进制表示：<span style = \"color : red\">0000000000000010</span>0000001000000000</p>\n<ul>\n<li><code>CPU</code>  执行指令时需要将逻辑地址变换为物理地址</li>\n</ul>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230211223931986.png\" alt=\"image-20230211223931986\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230211224418385.png\" alt=\"image-20230211224418385\" /></p>\n<p><strong>和页面的最大区别是，每个段的长度是不同的</strong></p>\n<ul>\n<li>所以对于步骤 ④，在分页管理中并不需要对页内偏移量（页内地址）进行越界检查，但在分段管理中需要对段内偏移量（段内地址）与段长进行越界检查</li>\n</ul>\n<hr />\n<h2 id=\"分段-分页管理的对比\"><a class=\"anchor\" href=\"#分段-分页管理的对比\">#</a> 分段、分页管理的对比</h2>\n<p><span style = \"color : red\">页</span> 是 <span style = \"color : red\">信息的物理单位</span>。分页的主要目的是为了实现离散分配，提高内存利用率。分页仅仅是系统管理上的需要，完全是系统行为，<span style = \"color : red\">对用户是不可见的，即对用户是透明的</span>。</p>\n<p><span style = \"color : red\">段</span> 是 <span style = \"color : red\">信息的逻辑单位</span>。分段的主要目的是更好地满足用户需求。一个段通常包含着一组属于一个逻辑模块的信息。<span style = \"color : red\">分段对用户是可见的</span>，用户编程时需要显式地给出段名。</p>\n<p>页的大小固定且由系统决定。段的长度却不固定，决定于用户编写的程序。</p>\n<p><span style = \"color : red\">分页</span> 的用户进程 <span style = \"color : red\">地址空间是一维的</span>，程序员只需给出一个记忆符即可表示一个地址。</p>\n<p><span style = \"color : red\">分段</span> 的用户进程 <span style = \"color : red\">地址空间是二维的</span>，程序员在标识一个地址时，既要给出段名，也要给出段内地址。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230211225151319.png\" alt=\"image-20230211225151319\" /></p>\n<hr />\n<p><span style = \"color : red\">分段</span> 比分页 <span style = \"color : red\">更容易实现信息的共享和保护</span>。</p>\n<p>不能被修改的代码称为 <span style = \"color : red\">纯代码</span> 或 <span style = \"color : red\">可重入代码</span>（不属于临界资源)，这样的代码是可以<strong>共享</strong>的。可修改的代码是不能共享的（比如，有一个代码段中有很多变量，各进程并发地同时访问可能造成数据不一致）</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230211225518946.png\" alt=\"image-20230211225518946\" /></p>\n<p><strong>若用分页的话，很难实现</strong>。用户不知道内部是怎么划分的，共享的代码可能会更不共享的数据存放在同一个页面上，因此这个页面只有一部分是允许其他进程访问的，而另一部分不允许其他进程访问</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230211230234056.png\" alt=\"image-20230211230234056\" /></p>\n<hr />\n<p>访问一个逻辑地址需要几次访存？</p>\n<p><span style = \"color : red\">分页（单级页表)</span>：第一次访存――查内存中的页表，第二次访存――访问目标内存单元。总共 <span style = \"color : red\">两次访存</span></p>\n<p><span style = \"color : red\">分段</span>：第一次访存――查内存中的段表，第二次访存――访问目标内存单元。总共 <span style = \"color : red\">两次访存</span></p>\n<p>与分页系统类似，分段系统中也 <span style = \"color : red\">可以引入<b>快表</b>机构</span>，将近期访问过的段表项放到快表中，这样 <span style = \"color : red\">可以少一次访问</span>，加快地址变换速度。</p>\n<h2 id=\"整体框架-5\"><a class=\"anchor\" href=\"#整体框架-5\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230211232045181.png\" alt=\"image-20230211232045181\" /></p>\n<h1 id=\"段页式管理方式\"><a class=\"anchor\" href=\"#段页式管理方式\">#</a> 段页式管理方式</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230211232211200.png\" alt=\"image-20230211232211200\" /></p>\n<h2 id=\"分页-分段的优缺点分析\"><a class=\"anchor\" href=\"#分页-分段的优缺点分析\">#</a> 分页、分段的优缺点分析</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>分页管理</td>\n<td>内存利空间利用率高，<span style = \"color : red\">不会产生外部碎片</span>，只会有少量的页内碎片</td>\n<td>不方便按照逻辑模块实现信息的共享和保护</td>\n</tr>\n<tr>\n<td>分段管理</td>\n<td>很方便按照逻辑模块实现的共享保护</td>\n<td>若段过大，为其分配很大的连续空间会很不方便。另外，段式管理 <span style = \"color : red\">会产生外部碎片</span></td>\n</tr>\n</tbody>\n</table>\n<p>分段管理中产生的外部碎片也可以用 “紧凑” 来解决，只是需要付出较大的时间代价</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230211233134504.png\" alt=\"image-20230211233134504\" /></p>\n<hr />\n<h2 id=\"段页式管理\"><a class=\"anchor\" href=\"#段页式管理\">#</a> 段页式管理</h2>\n<p>将进程按逻辑模块分段，再将各段分页（如每个页面 4 KB）</p>\n<p>再将内存空间分为大小相同的内存块 / 页框 / 页帧 / 物理块</p>\n<p>进程前将各页面分别装入各内存块中</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230211233325189.png\" alt=\"image-20230211233325189\" /></p>\n<hr />\n<h2 id=\"段页式管理的逻辑地址结构\"><a class=\"anchor\" href=\"#段页式管理的逻辑地址结构\">#</a> 段页式管理的逻辑地址结构</h2>\n<p><strong>分段系统</strong>的逻辑地址结构由段号和段内地址（段内偏移量）组成。如:</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230211233446545.png\" alt=\"image-20230211233446545\" /></p>\n<p><strong>段页式系统</strong>的逻辑地址结构由段号、页号、页内地址（页内偏移量）组成。如:</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230211233508321.png\" alt=\"image-20230211233508321\" /></p>\n<ul>\n<li>类似于<strong>二级页表</strong></li>\n</ul>\n<p><span style = \"color : red\">段号的位数决定了每个进程最多可以分几个段</span></p>\n<p><span style = \"color : red\">页号位数决定了每个段最大有多少页</span></p>\n<p><span style = \"color : red\">页内偏移量决定了页面大小、内存块大小是多少</span></p>\n<hr />\n<p>在上述例子中，若系统是按字节寻址的，则</p>\n<p>段号占 16 位，因此在该系统中，每个进程最多有 2<sup>16</sup> = 64 K 个段</p>\n<p>页号占 4 位，因此每个段最多有 2<sup>4</sup> = 16 页</p>\n<p>页内偏移量占 12 位，因此每个页面 \\ 每个内存块大小为 2<sup>12</sup> = 4096 = 4 KB</p>\n<hr />\n<p><strong>&quot; 分段” 对用户是可见的，程序员编程时需要显式地给出段号、段内地址。</strong></p>\n<p><strong>而将各段 “分页” 对用户是不可见的。</strong></p>\n<p><strong>系统会根据段内地址自动划分页号和页内偏移量。</strong></p>\n<p>因此 <span style = \"color : red\">段页式</span> 管理的 <span style = \"color : red\">地址结构是二维的</span>。</p>\n<hr />\n<h2 id=\"段表-页表\"><a class=\"anchor\" href=\"#段表-页表\">#</a> 段表、页表</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230211234721831.png\" alt=\"image-20230211234721831\" /></p>\n<p><strong>就是把二级页表中的页目录表换成了段表</strong></p>\n<p>如下所示的二级页表</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230211005004910.png\" alt=\"image-20230211005004910\" /></p>\n<hr />\n<p><strong>一个进程对应一个段表，一个段表可能对应多个页表，即：一个进程可能会对应多个页表</strong></p>\n<h2 id=\"地址变换-2\"><a class=\"anchor\" href=\"#地址变换-2\">#</a> 地址变换</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230212001113985.png\" alt=\"image-20230212001113985\" /></p>\n<p><span style = \"color : red\">也可以引入快表机构，用段号和页号作为查询快表的关键字。若快表命中则仅需一次访存</span></p>\n<ul>\n<li>知道了段号可以查询相应页号，知道了页号可以查询相应物理块号，知道了物理块号可以查询相应内存单元</li>\n</ul>\n<p>在步骤 ④ 中，需要检查页号是否越界，更段式存储类似，因为<strong>每个段的长度可能是不相等的</strong>，存放的页表长度也可能不相等。</p>\n<ul>\n<li>因此需要这样的合法性检查</li>\n</ul>\n<h2 id=\"整体框架-6\"><a class=\"anchor\" href=\"#整体框架-6\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230212011051568.png\" alt=\"image-20230212011051568\" /></p>\n<h1 id=\"虚拟内存的基本概念\"><a class=\"anchor\" href=\"#虚拟内存的基本概念\">#</a> 虚拟内存的基本概念</h1>\n<p>在<strong>传统存储管理方式</strong>的基础上引入了交换技术、覆盖技术，使得内存利用率有所提升，并且能从逻辑上扩充内存容量。</p>\n<p>虚拟存储技术比之前的交换技术和覆盖技术更先进一些</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230212011512982.png\" alt=\"image-20230212011512982\" /></p>\n<h2 id=\"传统存储管理方式的特征-缺点\"><a class=\"anchor\" href=\"#传统存储管理方式的特征-缺点\">#</a> 传统存储管理方式的特征、缺点</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230212011748664.png\" alt=\"image-20230212011748664\" /></p>\n<p><span style = \"color : red\">一次性</span>：<span style = \"color : red\">作业必须一次性全部装入内存后才能开始运行</span>。这会造成两个问题：</p>\n<p>① 作业很大时，不能全部装入内存，导致 <span style = \"color : red\">大作业无法运行</span>；</p>\n<ul>\n<li>例如：4 GB 大小的内存是不可能运行 64 GB 大小的游戏的</li>\n</ul>\n<p>② 当大量作业要求运行时，由于内存无法容纳所有作业，因此只有<strong>少量作业能运行</strong>，导致 <span style = \"color : red\">多道程序并发度下降</span>。</p>\n<p><span style = \"color : red\">驻留性</span>：一旦作业被装入内存，就会 <span style = \"color : red\">一直驻留在内存</span> 中，直至作业运行结束。</p>\n<ul>\n<li>\n<p>事实上，在一个时间段内，只需要访问作业的一小部分数据即可正常运行，<strong>这就导致了内存中会驻留大量的、暂时用不到的数据，浪费了宝贵的内存资源。</strong></p>\n</li>\n<li>\n<p>例如：正在游戏中的  <code>A</code>  场景， <code>B</code>  场景的资源并不需要加载到内存当中，只需要加载  <code>A</code>  场景需要的资源，就可以保证游戏的正常运行了。</p>\n<p>若采用传统的话，不管是  <code>A</code>  场景还是  <code>B</code>  场景中的数据都要求一直驻留在内存当中，无论此时是否需要这些数据</p>\n</li>\n</ul>\n<hr />\n<p>可以用虚拟存储技术解决</p>\n<h2 id=\"局部性原理高速缓冲技术思想\"><a class=\"anchor\" href=\"#局部性原理高速缓冲技术思想\">#</a> 局部性原理（高速缓冲技术思想）</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230210232343404.png\" alt=\"image-20230210232343404\" /></p>\n<p><span style = \"color : red\">时间局部性</span>：如果执行了程序中的某条指令，那么不久后这条指令很有可能再次执行；如果某个数据被访问过，不久之后该数据很可能再次被访问。(因为程序中存在大量的循环)</p>\n<p><span style = \"color : red\">空间局部性</span>：一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也很有可能被访问。（因为很多数据在内存中都是连续存放的)</p>\n<p>例如：之前介绍的 <span style = \"color : red\">基本地址变换机构</span> 中，每次要访问一个逻辑地址，都需要 <span style = \"color : red\">查询内存中的页表</span>。由于局部性原理，<span style = \"color : red\">可能连续很多次查到的都是同一个页表项</span>。</p>\n<hr />\n<p><span style = \"color : red\">高速缓冲技术</span> 的思想：将近期会频繁访问到的数据放到更高速的存储器中，暂时用不到的数据放在更低速存储器中。</p>\n<ul>\n<li>例如：<strong>之前所说的快表机构，就是将近期常访问的页表项副本放到更高速的联想寄存器中</strong></li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230212231114696.png\" alt=\"image-20230212231114696\" /></p>\n<p>例如：书包与书架，为了避免频繁的从书架上取相同的书籍，可以把需要经常访问的书籍放到书包里，只需通过访问书包获取即可</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230212231555063.png\" alt=\"image-20230212231555063\" /></p>\n<h2 id=\"虚拟内存的定义和特征\"><a class=\"anchor\" href=\"#虚拟内存的定义和特征\">#</a> 虚拟内存的定义和特征</h2>\n<h3 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h3>\n<p>基于局部性原理，在程序装入时，可以将程序中 <span style = \"color : red\">很快会用到的部分装入内存，暂时用不到的部分留在外存</span>，就可以让程序开始执行。</p>\n<p>在程序执行过程中，当所访问的 <span style = \"color : red\">信息不在内存</span> 时，由 <span style = \"color : red\">操作系统负责将所需信息从外存调入内存</span>，然后继续执行程序。</p>\n<p>若内存空间不够，由 <span style = \"color : red\">操作系统负责</span> 将内存中 <span style = \"color : red\">暂时用不到的信息换出到外存</span>。</p>\n<ul>\n<li><strong>交换技术是将整个进程换出内存至对换区，虚拟存储是将部分信息（页，段）换出内存</strong></li>\n</ul>\n<p>在操作系统的管理下，在用户看来似乎有一个比实际内存大得多的内存，这就是 <span style = \"color : red\">虚拟内存</span></p>\n<ul>\n<li>操作系统虚拟性的一个体现，实际的物理内存大小没有变，只是在逻辑上进行了扩充。</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230212231114696.png\" alt=\"image-20230212231114696\" /></p>\n<p><span style = \"color : red\">易混知识点</span>:</p>\n<p>虚拟内存的 <span style = \"color : red\">最大容量</span> 是由计算机的地址结构（ <code>CPU</code>  寻址范围）确定的</p>\n<p>虚拟内存的 <span style = \"color : red\">实际容量</span> = min（内存和外存容量之和， <code>CPU</code>  寻址范围）</p>\n<ul>\n<li>\n<p>如 ：某计算机地址结构为 32 位，按字节编址，内存大小为 512 MB，外存大小为 2 GB</p>\n</li>\n<li>\n<p>则虚拟内存的 <span style = \"color : red\">最大容量</span> 为 2<sup>32</sup> B =  4 GB</p>\n</li>\n<li>\n<p>虚拟内存的 <span style = \"color : red\">实际容量</span> = min（2<sup>32</sup> B，512 MB + 2 GB）= 512 MB + 2 GB</p>\n</li>\n</ul>\n<hr />\n<h3 id=\"特征\"><a class=\"anchor\" href=\"#特征\">#</a> 特征</h3>\n<p>虚拟内存有一下三个主要特征:</p>\n<p><span style = \"color : red\">多次性</span>：无需在作业运行时一次性全部装入内存，而是允许被分成多次调入内存。</p>\n<p><span style = \"color : red\">对换性</span>：在作业运行时无需一直常驻内存，而是允许在作业运行过程中，将作业换入、换出。</p>\n<p><span style = \"color : red\">虚拟性</span>：从逻辑上扩充了内存的容量，使用户看到的内存容量，远大于实际的容量。</p>\n<hr />\n<h2 id=\"如何实现虚拟内存技术\"><a class=\"anchor\" href=\"#如何实现虚拟内存技术\">#</a> 如何实现虚拟内存技术</h2>\n<p>虚拟内存技术，允许一个作业分多次调入内存。如果采用连续分配方式，会不方便实现。</p>\n<ul>\n<li>一个作业若先调入一部分到内存中，若另一部分也要调入到内存，<strong>需要给它分配之前作业分配的内存空间相连续的一部分内存空间</strong>。</li>\n<li>即：每一次给作业分配内存空间都需要保证与之前的作业相连续的，这样会很不方便实现</li>\n</ul>\n<p>因此，虚拟内存的实现需要建立在 <span style = \"color : red\">离散分配</span> 的内存管理方式基础上。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230212233618843.png\" alt=\"image-20230212233618843\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230212233719605.png\" alt=\"image-20230212233719605\" /></p>\n<p>主要区别：</p>\n<p>在程序执行过程中，当所 <span style = \"color : red\">访问的信息不在内存时，由操作系统负责将所需信息从外存调入内存</span>，然后继续执行程序。</p>\n<p>若内存空间不够，由操作系统负责 <span style = \"color : red\">将内存中暂时用不到的信息换出到外存</span>。</p>\n<hr />\n<p>即：操作系统需要在之前的非连续分配管理中增加两个功能</p>\n<ul>\n<li>操作系统要提供 ** 请求调页（或请求调段）** 功能</li>\n<li>操作系统要提供 ** 页面置换（或段置换）** 的功能</li>\n</ul>\n<h2 id=\"整体框架-7\"><a class=\"anchor\" href=\"#整体框架-7\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230212234538989.png\" alt=\"image-20230212234538989\" /></p>\n<h1 id=\"请求分页管理方式\"><a class=\"anchor\" href=\"#请求分页管理方式\">#</a> 请求分页管理方式</h1>\n<p>请求分页存储管理与基本分页存储管理的主要区别：在程序执行过程中，当所 <span style = \"color : red\">访问的信息不在内存时，由操作系统负责将所需信息从外存调入内存</span>，然后继续执行程序。</p>\n<p>若内存空间不够，由操作系统负责 <span style = \"color : red\">将内存中暂时用不到的信息换出到外存</span>。</p>\n<hr />\n<p>即：操作系统需要在之前的非连续分配管理中增加两个功能</p>\n<ul>\n<li>操作系统要提供 ** 请求调页（或请求调段）** 功能</li>\n<li>操作系统要提供 ** 页面置换（或段置换）** 的功能</li>\n</ul>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230213223938615.png\" alt=\"image-20230213223938615\" /></p>\n<p>注意与基本分页存储管理的页表机制、地址变换流程对比学习</p>\n<h2 id=\"页表机制\"><a class=\"anchor\" href=\"#页表机制\">#</a> 页表机制</h2>\n<p>与基本分页管理相比，请求分页管理中，为了实现 “ <code>请求调页</code> ”，操作系统需要知道<strong>每个页面是否已经调入内存</strong>；</p>\n<ul>\n<li>如果还没调入，那么也需要知道该页面在外存中存放的位置。</li>\n</ul>\n<p>当内存空间不够时，要实现 “ <code>页面置换</code> ”，操作系统需要通过某些指标来决定到底换出哪个页面；</p>\n<ul>\n<li>有的页面没有被修改过，就不用再浪费时间写回外存。</li>\n<li>有的页面修改过，就需要将外存中的旧数据覆盖，因此，操作系统也需要记录各个页面是否被修改的信息。</li>\n</ul>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230213212112143.png\" alt=\"image-20230213212112143\" /></p>\n<hr />\n<h2 id=\"缺页中断机构内中断\"><a class=\"anchor\" href=\"#缺页中断机构内中断\">#</a> 缺页中断机构（内中断）</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230213212248649.png\" alt=\"image-20230213212248649\" /></p>\n<p>假设此时要访问逻辑地址 =（页号，页内偏移量）= （0,1024）</p>\n<p>在请求分页系统中，每当要访问的 <span style = \"color : red\">页面不在内存</span> 时（即：状态位为 0），便产生一个 <span style = \"color : red\">缺页中断</span>，然后由操作系统的缺页 <span style = \"color : red\">中断处理程序处理中断</span>。</p>\n<p>此时 <span style = \"color : red\">缺页的进程阻塞</span>，放入阻塞队列，调页 <span style = \"color : red\">完成后再将其唤醒</span>，放回就绪队列。</p>\n<hr />\n<p>如果内存中 <span style = \"color : red\">有空闲块</span>，则为进程 <span style = \"color : red\">分配一个空闲块</span>，将所缺页面装入该块，并修改页表中相应的页表项。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230213212739169.png\" alt=\"image-20230213212739169\" /></p>\n<p>如果内存中 <span style = \"color : red\">没有空闲块</span>，则 <span style = \"color : red\">由页面置换算法选择一个页面淘汰</span>，</p>\n<ul>\n<li>若该页面在内存期间 <span style = \"color : red\">被修改过</span>，则要将其 <span style = \"color : red\">写回外存</span>。</li>\n<li>未修改过的页面不用写回外存。</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230213213300034.png\" alt=\"image-20230213213300034\" /></p>\n<hr />\n<p><span style = \"color : red\">缺页中断</span> 是因为当前执行的指令想要访问的目标页面未调入内存而产生的，因此 <span style = \"color : red\">属于内中断</span></p>\n<p><span style = \"color : red\">一条指令</span> 在执行期间，<span style = \"color : red\">可能产生多次缺页中断</span>。</p>\n<ul>\n<li>如:  <code>copy A to B</code> ，即将逻辑地址 A 中的数据复制到逻辑地址 B，而 A、B 属于不同的页面，则有可能产生两次中断\n<ul>\n<li>因为  <code>A</code>  和  <code>B</code>  页面可能都不在内存中</li>\n</ul>\n</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230213213831853.png\" alt=\"image-20230213213831853\" /></p>\n<hr />\n<h2 id=\"地址变换机构\"><a class=\"anchor\" href=\"#地址变换机构\">#</a> 地址变换机构</h2>\n<p>请求分页存储管理与基本分页存储管理的主要区别：在程序执行过程中，当所 <span style = \"color : red\">访问的信息不在内存时，由操作系统负责将所需信息从外存调入内存</span>，然后继续执行程序。</p>\n<p>若内存空间不够，由操作系统负责 <span style = \"color : red\">将内存中暂时用不到的信息换出到外存</span>。</p>\n<hr />\n<p>即：操作系统需要在之前的非连续分配管理中增加两个功能</p>\n<ul>\n<li>操作系统要提供 ** 请求调页（或请求调段）** 功能</li>\n<li>操作系统要提供 ** 页面置换（或段置换）** 的功能</li>\n</ul>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230213212248649.png\" alt=\"image-20230213212248649\" /></p>\n<p><strong>新增步骤 1</strong>：请求调页（查到页表项时进行判断）</p>\n<p><strong>新增步骤 2</strong>：页面置换（需要调入页面，但没有空闲内存块时进行）</p>\n<p><strong>新增步骤 3</strong>：需要修改请求页表中新增的表项</p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230213214543207.png\" alt=\"image-20230213214543207\" /></p>\n<hr />\n<p><strong>整体流程</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230213223356338.png\" alt=\"image-20230213223356338\" /></p>\n<p><strong>补充细节</strong>:</p>\n<p>① 修改访问位和标志位</p>\n<ul>\n<li>只有 “写指令” 才需要修改 “修改位” 。并且，一般来说只需修改快表中的数据，<strong>只有要将快表项删除时才需要写回内存中的慢表。</strong></li>\n<li>这样可以减少访存次数。</li>\n</ul>\n<p>② 保留  <code>CPU</code>  现场</p>\n<ul>\n<li>和普通的中断处理一样，缺页中断处理依然需要保留 CPU 现场。</li>\n</ul>\n<p>③ 选择一页换出</p>\n<ul>\n<li>需要用某种 “页面置换算法” 来决定一个换出页面 (下节内容)</li>\n</ul>\n<p>④ （将该页写回内存）/ ⑤ （启动  <code>I/O</code>  硬件）</p>\n<ul>\n<li>换入 / 换出页面都需要启动慢速的  <code>I/O</code>  操作，可见，如果换入 / 换出太频繁，会有很大的开销。</li>\n</ul>\n<p>⑥ 修改页表</p>\n<ul>\n<li>页面调入内存后，需要修改慢表，同时也需要将表项复制到快表中。</li>\n</ul>\n<p>在具有快表机构的请求分页系统中，访问一个逻辑地址时，若发生缺页，则地址变换步骤是:</p>\n<p>查快表（未命中）―― 查慢表（发现未调入内存）―― 调页（调入的页面对应的表项<strong>会直接加入快表</strong>）―― <span style = \"color : red\">查快表</span>（命中）—― 访问目标内存单元</p>\n<h2 id=\"整体框架-8\"><a class=\"anchor\" href=\"#整体框架-8\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230213224154756.png\" alt=\"image-20230213224154756\" /></p>\n<hr />\n<h1 id=\"页面置换算法\"><a class=\"anchor\" href=\"#页面置换算法\">#</a> 页面置换算法</h1>\n<p>请求分页存储管理与基本分页存储管理的主要区别：在程序执行过程中，当所 <span style = \"color : red\">访问的信息不在内存时，由操作系统负责将所需信息从外存调入内存</span>，然后继续执行程序。</p>\n<p>若内存空间不够，由操作系统负责 <span style = \"color : red\">将内存中暂时用不到的信息换出到外存</span>。</p>\n<ul>\n<li>页面置换算法决定应该换出哪个页面</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230213224444607.png\" alt=\"image-20230213224444607\" /></p>\n<p>页面的换入、换出需要磁盘  <code>I/O</code> ，会有较大的开销，因此好的页面置换算法应该 <span style = \"color : red\">追求更少的缺页率</span></p>\n<ul>\n<li>也就是换入、换出的次数尽可能地少</li>\n</ul>\n<hr />\n<h2 id=\"最佳置换算法\"><a class=\"anchor\" href=\"#最佳置换算法\">#</a> 最佳置换算法</h2>\n<p>最佳置换算法（ <code>OPT, Optimal</code> ）：每次选择 <span style = \"color : red\">淘汰的页面</span> 将是 <span style = \"color : red\">以后永不使用</span>，或者 <span style = \"color : red\">在最长时间内不再被访问的页面</span></p>\n<ul>\n<li>这样可以保证最低的缺页率。</li>\n</ul>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230213225508443.png\" alt=\"image-20230213225508443\" /></p>\n<p>整个过程 <span style = \"color : red\">缺页中断</span> 发生了 <span style = \"color : red\">9 次</span>，<span style = \"color : red\">页面置换</span> 发生了 <span style = \"color : red\">6 次</span>。</p>\n<p><strong>注意</strong>：缺页时未必发生页面置换。若还有可用的空闲内存块，就不用进行页面置换。</p>\n<p><span style = \"color : red\">缺页率</span> = 9 / 20 = 45 %</p>\n<hr />\n<p>最佳置换算法可以保证最低的缺页率，但实际上，只有在进程执行的过程中才能知道接下来会访问到的是哪个页面。<strong>操作系统无法提前预判页面访问序列。</strong></p>\n<ul>\n<li>因此，<span style = \"color : red\">最佳置换算法是无法实现的</span>。</li>\n</ul>\n<h2 id=\"先进先出置换算法fifobelady-异常\"><a class=\"anchor\" href=\"#先进先出置换算法fifobelady-异常\">#</a> 先进先出置换算法（FIFO）（Belady 异常）</h2>\n<p>先进先出置换算法（ <code>FIFO</code> ）: 每次选择 <span style = \"color : red\">淘汰的页面</span> 是 <span style = \"color : red\">最早进入内存的页面</span></p>\n<p>实现方法：把调入内存的页面根据调入的先后顺序排成一个队列，需要换出页面时选择队头页面即可。</p>\n<ul>\n<li>队列的最大长度取决于系统为进程分配了多少个内存块。</li>\n</ul>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230213230138099.png\" alt=\"image-20230213230138099\" /></p>\n<p>分配 <span style = \"color : red\">三个</span> 内存块时，缺页次数：<span style = \"color : red\">9 次</span></p>\n<hr />\n<p>分配 <span style = \"color : red\">四个</span> 内存块时，缺页次数：<span style = \"color : red\">10 次</span></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230213230311273.png\" alt=\"image-20230213230311273\" /></p>\n<hr />\n<p><span style = \"color : red\">Belady 异常</span> ：<strong>当为进程分配的物理块数增大时，缺页次数不减反增的异常现象。</strong></p>\n<hr />\n<p><span style = \"color : red\">只有 FIFO 算法会产生 Belady 异常</span>。另外， <code>FIFO</code>  算法虽然 <span style = \"color : red\">实现简单</span>，但是该算法与进程实际运行时的规律不适应，因为先进入的页面也有可能最经常被访问。</p>\n<ul>\n<li>因此，<span style = \"color : red\">算法性能差</span></li>\n</ul>\n<hr />\n<h2 id=\"最近最久未使用置换算法lru\"><a class=\"anchor\" href=\"#最近最久未使用置换算法lru\">#</a> 最近最久未使用置换算法（LRU）</h2>\n<p>最近最久未使用置换算法（LRU，least recently used）：每次 <span style = \"color : red\">淘汰的页面</span> 是 <span style = \"color : red\">最近最久未使用的页面</span></p>\n<p>实现方法：赋予每个页面对应的页表项中，用 <span style = \"color : red\">访问字段记录该页面自上次被访问以来所经历的时间 t </span>。</p>\n<p>当需要淘汰一个页面时，选择现有页面中  <code>t</code>  值最大的，即最近最久未使用的页面。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230213231353513.png\" alt=\"image-20230213231353513\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230213231331505.png\" alt=\"image-20230213231331505\" /></p>\n<p>在手动做题时，若需要淘汰页面，可以逆向检查此时在内存中的几个页面号。在 <span style = \"color : red\">逆向扫描过程中最后一个出现的页号就是要淘汰的页面</span>。</p>\n<hr />\n<p>该算法的实现需要专门的硬件支持，虽然算法 <span style = \"color : red\">性能好</span>，但是 <span style = \"color : red\">实现困难，开销大</span></p>\n<h3 id=\"哈希表-双向链表java\"><a class=\"anchor\" href=\"#哈希表-双向链表java\">#</a> 哈希表 + 双向链表（Java）</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LRUCache</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">></span></span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">DoublyLinkedList</span> listedList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LRUCache</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        listedList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DoublyLinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        size <span class=\"token operator\">=</span> capacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 说明包含当前元素</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 将链表中的元素移至尾部</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">ListNode</span> node <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            listedList<span class=\"token punctuation\">.</span><span class=\"token function\">removeNode</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            listedList<span class=\"token punctuation\">.</span><span class=\"token function\">addNodeToTail</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>listedList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 新的元素</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token class-name\">ListNode</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token comment\">// 插入到链表尾部</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                listedList<span class=\"token punctuation\">.</span><span class=\"token function\">addNodeToTail</span><span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token comment\">// 移除链表头部元素</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> listedList<span class=\"token punctuation\">.</span><span class=\"token function\">removeHeadNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                cache<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token class-name\">ListNode</span> kNode <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token comment\">// 将该元素移动到链表尾部</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                listedList<span class=\"token punctuation\">.</span><span class=\"token function\">removeNode</span><span class=\"token punctuation\">(</span>kNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                kNode<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                listedList<span class=\"token punctuation\">.</span><span class=\"token function\">addNodeToTail</span><span class=\"token punctuation\">(</span>kNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token comment\">// 新的元素</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cache<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token class-name\">ListNode</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token comment\">// 插入到链表尾部</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                listedList<span class=\"token punctuation\">.</span><span class=\"token function\">addNodeToTail</span><span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                cache<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token class-name\">ListNode</span> kNode <span class=\"token operator\">=</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token comment\">// 将该元素移动到链表尾部</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                listedList<span class=\"token punctuation\">.</span><span class=\"token function\">removeNode</span><span class=\"token punctuation\">(</span>kNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                kNode<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                listedList<span class=\"token punctuation\">.</span><span class=\"token function\">addNodeToTail</span><span class=\"token punctuation\">(</span>kNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token class-name\">ListNode</span> prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token class-name\">ListNode</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DoublyLinkedList</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token class-name\">ListNode</span> tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token comment\">// 初始化双向链表</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token class-name\">DoublyLinkedList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        tail <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        tail<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">return</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token comment\">// 删除头部节点</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">removeHeadNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token keyword\">return</span> next<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token comment\">// 删除节点</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">removeNode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        node<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token comment\">// 添加节点到队尾，尾插法</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">addNodeToTail</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> newNode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> prev <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        prev<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        newNode<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        tail<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        newNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h2 id=\"时钟置换算法clock\"><a class=\"anchor\" href=\"#时钟置换算法clock\">#</a> 时钟置换算法（CLOCK）</h2>\n<p>最佳置换算法性能最好，但无法实现；先进先出置换算法实现简单，但算法性能差；</p>\n<p>最近最久未使用置换算法性能好，是最接近  <code>OPT</code>  算法性能的，但是实现起来需要专门的硬件支持，算法开销大。</p>\n<hr />\n<p><span style = \"color : red\">时钟置换算法</span> 是一种性能和开销较均衡的算法，又称 <span style = \"color : red\">CLOCK 算法</span>，或 <span style = \"color : red\">最近未用算法</span>（<span style = \"color : red\">NRU</span>，NotRecently Used)</p>\n<hr />\n<p><span style = \"color : red\">简单的 CLOCK 算法</span> 实现方法：为每个页面设置一个 <span style = \"color : red\">访问位</span>，再将内存中的页面都通过链接指针 <span style = \"color : red\">链接成一个循环队列</span>。</p>\n<ul>\n<li>当某页被访问时，其访问位置为 1。</li>\n<li>当需要淘汰一个页面时，只需检查页的访问位。如果是 0，就选择该页换出；如果是 1，则将它置为 0，暂不换出，继续检查下一个页面，若第一轮扫描中所有页面都是 1，则将这些页面的访问位依次置为 0 后，再进行第二轮扫描</li>\n<li>第二轮扫描中一定会有访问位为 0 的页面，因此 <span style = \"color : red\">简单的 CLOCK 算法</span> 选择一个淘汰页面 <span style = \"color : red\">最多会经过两轮扫描</span></li>\n</ul>\n<p><strong>淘汰出访问位为 0 的页面</strong></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230213232113664.png\" alt=\"image-20230213232113664\" /></p>\n<hr />\n<p>例：假设系统为某进程分配了五个内存块，并考虑到有以下页面号引用串：</p>\n<p>1，3，4，2，5，6，3，4，7</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230213233252559.png\" alt=\"image-20230213233252559\" /></p>\n<h2 id=\"改进型的时钟置换算法\"><a class=\"anchor\" href=\"#改进型的时钟置换算法\">#</a> 改进型的时钟置换算法</h2>\n<p><span style = \"color : red\">简单的时钟置换算法</span> 仅考虑到一个页面最近是否被访问过。</p>\n<p>事实上，如果被淘汰的页面没有被修改过，就不需要执行  <code>I/O</code>  操作写回外存。</p>\n<p><span style = \"color : red\">只有被淘汰的页面被修改过时，才需要写回外存</span>。</p>\n<p>因此，除了考虑一个页面最近有没有被访问过之外，操作系统还应考虑页面有没有被修改过。</p>\n<p><span style = \"color : red\">在其他条件都相同时，应优先淘汰没有修改过的页面</span>，避免  <code>I/O</code>  操作。这就是改进型的时钟置换算法的思想。</p>\n<p><span style = \"color : red\">修改位 = 0</span>，表示页面没有被修改过；<span style = \"color : red\">修改位 = 1</span>，表示页面被修改过。</p>\n<p>为方便讨论，用 <span style = \"color : red\">（访问位，修改位）</span> 的形式表示各页面状态。</p>\n<ul>\n<li>如（1，1）表示一个页面近期被访问过，且被修改过。</li>\n</ul>\n<hr />\n<p><span style = \"color : red\">算法规则</span>：将所有可能被置换的页面排成一个循环队列</p>\n<p>第一轮：从当前位置开始扫描到第一个（0,0）的帧用于替换。</p>\n<ul>\n<li>本轮扫描不修改任何标志位</li>\n</ul>\n<p>第二轮：若第一轮扫描失败，则重新扫描，查找第一个（0,1）的帧用于替换。</p>\n<ul>\n<li>本轮将所有扫描过的帧访问位设为 0</li>\n</ul>\n<p>第三轮：若第二轮扫描失败，则重新扫描，查找第一个（0,0）的帧用于替换。</p>\n<ul>\n<li>本轮扫描不修改任何标志位</li>\n</ul>\n<p>第四轮：若第三轮扫描失败，则重新扫描，查找第一个（0,1）的帧用于替换</p>\n<p>由于第二轮已将所有帧的访问位设为 0 ，因此经过第三轮、第四轮扫描一定会有一个帧被选中，</p>\n<ul>\n<li>因此 <span style = \"color : red\">改进型 CLOCK 置换算法</span> 选择一个淘汰页面 <span style = \"color : red\">最多会进行四轮扫描</span></li>\n</ul>\n<hr />\n<p><strong>总结</strong>：</p>\n<p>第一轮：找没访问过的、没修改的页面</p>\n<p>第二轮：找没访问过的、修改的页面</p>\n<ul>\n<li><strong>将所有扫描过的帧访问位设为 0</strong></li>\n</ul>\n<p>第三轮：找没访问过的、没修改的页面</p>\n<p>第四轮：找没访问过的、修改的页面</p>\n<hr />\n<p><strong>只需一轮扫描</strong>（0，0）</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214000207607.png\" alt=\"image-20230214000207607\" /></p>\n<p><strong>二轮扫描</strong>（0，1）—&gt;（0，1）</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214000612755.png\" alt=\"image-20230214000612755\" /></p>\n<p><strong>三轮扫描</strong>（0，1）—&gt;（0，1）—&gt;（0，0）</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214001051302.png\" alt=\"image-20230214001051302\" /></p>\n<p><strong>四轮扫描</strong>（0，1）—&gt;（0，1）—&gt;（0，0）—&gt;（0，1）</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214001251060.png\" alt=\"image-20230214001251060\" /></p>\n<h2 id=\"总结-2\"><a class=\"anchor\" href=\"#总结-2\">#</a> 总结</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th>算法规则</th>\n<th>优缺点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">OPT</td>\n<td>优先淘汰最长时间内不会被访问的页面</td>\n<td>缺页率最小，性能最好；但无法实现</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">FIFO</td>\n<td>优先淘汰最先进入内存的页面</td>\n<td>实现简单；但性能很差，可能出现 Belady 异常</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">LRU</td>\n<td>优先淘汰最近最久没访问的页面</td>\n<td>性能很好；但需要硬件支持，算法开销大</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CLOCK（NRU）</td>\n<td>循环扫描各页面 <br/> 第一轮淘汰访问位 = 0 的，并将扫描过的页面访问位改为 1。若第一轮没选中，则进行第二轮扫描。</td>\n<td>实现简单，算法开销小；但未考虑页面是否被修改过。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">改进型 CLOCK（改进型 NRU）</td>\n<td>若用（访问位，修改位）的形式表述，则 <br/> 第一轮：淘汰（0, 0）<br/> 第二轮：淘汰（0, 1），并将扫描过的页面访问位都置为 0<br/> 第三轮：淘汰（0, 0）&lt;br /&gt; 第四轮：淘汰（0, 1)</td>\n<td>算法开销较小，性能也不错</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"页面分配策略\"><a class=\"anchor\" href=\"#页面分配策略\">#</a> 页面分配策略</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214201308178.png\" alt=\"image-20230214201308178\" /></p>\n<h2 id=\"驻留集\"><a class=\"anchor\" href=\"#驻留集\">#</a> 驻留集</h2>\n<p><span style = \"color : red\">驻留集</span> ：指请求分页存储管理中给进程分配的物理块的集合</p>\n<p>在采用了虚拟存储技术的系统中，驻留集的大小一般小于进程的总大小</p>\n<p>考虑一个极端情况</p>\n<ul>\n<li>\n<p>若某进程共有 100 个页面，则该进程的驻留集大小为 100 时进程可以全部放入内存，运行期间不可能再发生缺页。</p>\n</li>\n<li>\n<p>若驻留集大小为 1，则进程运行期间必定会极频繁地缺页</p>\n</li>\n</ul>\n<p>若驻留集太小，会导致缺页频繁，系统要花大量的时间来处理缺页，实际用于进程推进的时间很少；</p>\n<p>驻留集太大，又会导致多道程序并发度下降，资源利用率降低。所以应该选择一个合适的驻留集大小。</p>\n<ul>\n<li>驻留集太大，内存空间优先，会导致<strong>少数进程能驻留在内存中</strong>，导致  <code>CPU</code>  并发度不高。\n<ul>\n<li>即：驻留集太大，内存中的进程数量就会减少，并发度也就下降</li>\n</ul>\n</li>\n<li>也会导致其他进程分配的驻留集就会很少</li>\n</ul>\n<h2 id=\"页面分配-置换策略\"><a class=\"anchor\" href=\"#页面分配-置换策略\">#</a> 页面分配、置换策略</h2>\n<p><span style = \"color : red\">固定分配</span>：操作系统为每个进程分配一组固定数目的物理块，在进程运行期间不再改变。</p>\n<ul>\n<li>即，<span style = \"color : red\">驻留集大小不变</span></li>\n</ul>\n<p><span style = \"color : red\">可变分配</span>：先为每个进程分配一定数目的物理块，在进程运行期间，可根据情况做适当的增加或减少。</p>\n<ul>\n<li>即，<span style = \"color : red\">驻留集大小可变</span></li>\n</ul>\n<hr />\n<p><span style = \"color : red\">局部置换</span>：发生缺页时只能选进程自己的物理块进行置换。</p>\n<p><span style = \"color : red\">全局置换</span>：可以将操作系统保留的空闲物理块分配给缺页进程，也可以将别的进程持有的物理块置换到外存，再分配给缺页进程。</p>\n<hr />\n<p>策略组合：</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214202423886.png\" alt=\"image-20230214202423886\" /></p>\n<p>固定分配不能更全局置换组合</p>\n<ul>\n<li>\n<p>因为采用全局置换，若操作系统将空闲的物理块分配给该缺页进程，会导致该进程的驻留集大小<strong>增大</strong>，不满足固定分配。若操作系统将其他进程持有的物理块分配给该缺页进程，会导致原先持有该物理块的进程的驻留集<strong>减少</strong>，当前缺页进程的驻留集<strong>增大</strong></p>\n</li>\n<li>\n<p>全局置换意味着<strong>一个进程拥有的物理块数量必然会改变</strong>，因此不可能是固定分配</p>\n</li>\n</ul>\n<hr />\n<h3 id=\"固定分配局部置换\"><a class=\"anchor\" href=\"#固定分配局部置换\">#</a> 固定分配局部置换</h3>\n<p><span style = \"color : red\">固定分配局部置换</span>：系统为每个进程分配一定数量的物理块，在整个运行期间都不改变。若进程在运行中发生缺页，则只能从该进程在内存中的页面中选出一页换出，然后再调入需要的页面。</p>\n<p>这种策略的缺点是：很难在刚开始就确定应为<strong>每个进程分配多少个物理块才算合理</strong>。</p>\n<p>采用这种策略的系统可以根据进程大小、优先级、或是根据程序员给出的参数来确定为一个进程分配的内存块数)</p>\n<hr />\n<h3 id=\"可变分配全局置换\"><a class=\"anchor\" href=\"#可变分配全局置换\">#</a> 可变分配全局置换</h3>\n<p><span style = \"color : red\">可变分配全局置换</span>：刚开始会为每个进程分配一定数量的物理块。</p>\n<p>操作系统会保持一个空闲物理块队列。</p>\n<p>当某进程发生缺页时，从空闲物理块中取出一块分配给该进程；</p>\n<ul>\n<li>若已无空闲物理块，则可选择一个 <span style = \"color : red\">未锁定</span> 的页面换出外存，再将该物理块分配给缺页的进程。</li>\n</ul>\n<p>采用这种策略时，<span style = \"color : red\">只要某进程发生缺页，都将获得新的物理块，</span><strong> 仅当空闲物理块用完时，系统才选择一个未锁定的页面调出</strong>。被选择调出的页可能是系统中任何一个进程中的页，因此这个 <span style = \"color : red\">被选中的进程拥有的物理块会减少，缺页率会增加</span>。</p>\n<hr />\n<p>为什么要选择 <span style = \"color : red\">未锁定</span> 的页面调出</p>\n<ul>\n<li>因为系统会锁定一些页面，这些页面中的内容不能置换出外存（如：重要的 <code>内核数据</code> 可以设为 “锁定” )</li>\n</ul>\n<hr />\n<h3 id=\"可变分配局部置换\"><a class=\"anchor\" href=\"#可变分配局部置换\">#</a> 可变分配局部置换</h3>\n<p><span style = \"color : red\">可变分配局部置换</span>：刚开始会为每个进程分配一定数量的物理块。</p>\n<p>当某进程发生缺页时，只允许从该进程<strong>自己的物理块中选出一个</strong>进行换出外存。</p>\n<p>如果进程在运行中频繁地缺页，系统会为该进程<strong>多分配几个物理块</strong>，直至该进程缺页率趋势适当程度；</p>\n<ul>\n<li>反之，如果进程在运行中缺页率特别低，则可适当减少分配给该进程的物理块。</li>\n</ul>\n<hr />\n<p>可变分配 <span style = \"color : red\">全局</span> 置换：只要缺页就给分配新物理块</p>\n<p>可变分配 <span style = \"color : red\">局部</span> 置换：要根据发生 <span style = \"color : red\">缺页的频率</span> 来动态地增加或减少进程的物理块</p>\n<h2 id=\"何时调入页面\"><a class=\"anchor\" href=\"#何时调入页面\">#</a> 何时调入页面</h2>\n<h3 id=\"预调页策略\"><a class=\"anchor\" href=\"#预调页策略\">#</a> 预调页策略</h3>\n<p>预调页策略：根据<strong>局部性原理</strong>，一次调入若干个相邻的页面可能比一次调入一个页面更高效。</p>\n<ul>\n<li>主要是指空间局部性：如果当前访问了某个内存单元，在之后很有可能会接着访问与其相邻的内存单元</li>\n</ul>\n<p>但如果提前调入的页面中大多数都没被访问过，则又是低效的。</p>\n<ul>\n<li>因此可以预测不久之后可能访问到的页面，将它们预先调入内存，但目前预测成功率只有 50% 左右。</li>\n</ul>\n<p>故这种策略 <span style = \"color : red\">主要用于进程的首次调入</span>，由程序员指出应该先调入哪些部分。</p>\n<ul>\n<li>运行前调入</li>\n</ul>\n<hr />\n<h3 id=\"请求调页策略\"><a class=\"anchor\" href=\"#请求调页策略\">#</a> 请求调页策略</h3>\n<p>请求调页策略：进程 <span style = \"color : red\">在运行期间发现缺页时才将所缺页面调入内存</span>。由这种策略调入的页面一定会被访问到，但由于每次只能调入一页，而每次调页都要磁盘  <code>I/O</code>  操作，因此  <code>I/O</code>  开销较大。</p>\n<ul>\n<li>运行时调入</li>\n</ul>\n<hr />\n<p>一般情况下，都会二者结合起来调用</p>\n<h2 id=\"从何处调入页面\"><a class=\"anchor\" href=\"#从何处调入页面\">#</a> 从何处调入页面</h2>\n<p>① 系统拥有<strong>足够</strong>的对换区空间：页面的调入、调出都是在内存与对换区之间进行，这样可以保证页面的调入、调出速度很快。</p>\n<p>在进程运行前，需将进程相关的数据从文件区复制到对换区。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214204556984.png\" alt=\"image-20230214204556984\" /></p>\n<hr />\n<p>② 系统<strong>缺少</strong>足够的对换区空间：凡是不会被修改的数据都直接从文件区调入，由于这些页面不会被修改，因此换出时不必写回磁盘，下次需要时再从文件区调入即可。</p>\n<p>对于 <span style = \"color : red\">可能被修改的</span> 部分，换出时需写回磁盘对换区，下次需要时再从对换区调入。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214204826138.png\" alt=\"image-20230214204826138\" /></p>\n<p>③  <code>UNIX</code>  方式：运行之前进程有关的数据全部放在文件区，故未使用过的页面，都可从文件区调入。</p>\n<p>若 <span style = \"color : red\">被使用过的</span> 页面需要换出，则写回对换区，下次需要时从对换区调入。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214205053069.png\" alt=\"image-20230214205053069\" /></p>\n<hr />\n<p>可以看出 ② 是<strong>被修改过后</strong>的页面才会调出到对换区，③ 是 ** 被访问过后（被使用过的）** 才会调出到对换区</p>\n<hr />\n<h2 id=\"抖动颠簸现象\"><a class=\"anchor\" href=\"#抖动颠簸现象\">#</a> 抖动（颠簸）现象</h2>\n<p>刚刚换出的页面马上又要换入内存，刚刚换入的页面马上又要换出外存，这种频繁的页面调度行为称为 <span style = \"color : red\">抖动</span>，或 <span style = \"color : red\">颠簸</span>。</p>\n<ul>\n<li>频繁地调入、调出页面</li>\n</ul>\n<p>产生抖动的 <span style = \"color : red\">主要原因</span> 是<strong>进程频繁访问的页面数目高于可用的物理块数</strong>（<span style = \"color : red\">分配给进程的物理块不够</span>)</p>\n<hr />\n<p>为进程分配的物理块太少，会使进程发生抖动现象。</p>\n<p>为进程分配的物理块太多，又会降低系统整体的并发度，降低某些资源的利用率</p>\n<hr />\n<p>为了研究为应该为每个进程分配多少个物理块， <code>Denning</code>  提出了进程 “工作集” 的概念</p>\n<hr />\n<h2 id=\"工作集\"><a class=\"anchor\" href=\"#工作集\">#</a> 工作集</h2>\n<p><span style = \"color : red\">驻留集</span>：指请求分页存储管理中给进程分配的内存块的集合。</p>\n<p><span style = \"color : red\">工作集</span>：指在某段时间间隔里，进程实际访问页面的集合。</p>\n<hr />\n<p>操作系统会根据 “窗口尺寸” 来算出工作集。例:<br />\n 某进程的页面访问序列如下，<span style = \"color : red\">窗口尺寸为 4 </span>，各时刻的工作集为？</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214210752580.png\" alt=\"image-20230214210752580\" /></p>\n<p><span style = \"color : red\">工作集大小</span> 可能小于窗口尺寸，实际应用中，操作系统可以统计进程的工作集大小，根据工作集大小给进程分配若干内存块。</p>\n<p>如：窗口尺寸为 5，经过一段时间的监测发现某进程的工作集最大为 3 ，那么说明该进程有很好的局部性，可以给这个进程分配 3 个以上的内存块即可满足进程的运行需要。</p>\n<ul>\n<li>时间局部性：如果执行了程序中的某条指令，那么不久后这条指令很有可能再次执行；<strong>如果某个数据被访问过，不久之后该数据很可能再次被访问</strong>。</li>\n</ul>\n<hr />\n<p>根据工作集的大小确定驻留集的大小</p>\n<p>一般来说，<span style = \"color : red\">驻留集大小不能小于工作集大小，否则进程运行过程中将频繁的缺页</span></p>\n<ul>\n<li>即：<strong>抖动现象</strong></li>\n<li>例如：当前一段时间工作集大小为 3，驻留集大小为 2，当前进程要访问多出来的一个页面，需要发生缺页中断，根据相应的策略以及算法处理</li>\n</ul>\n<hr />\n<p>拓展：基于局部性原理（空间局部性）可知，进程在一段时间内访问的页面与不久之后会访问的页面是有相关性的。</p>\n<p>因此，可以根据进程近期访问的页面集合（工作集）来设计一种页面置换算法――<strong>选择一个不在工作集中的页面进行淘汰</strong>。</p>\n<hr />\n<h2 id=\"整体框架-9\"><a class=\"anchor\" href=\"#整体框架-9\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230214211648737.png\" alt=\"image-20230214211648737\" /></p>\n",
            "tags": [
                "操作系统"
            ]
        },
        {
            "id": "https://www.htired.top/2023/06/02/os/2%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/",
            "url": "https://www.htired.top/2023/06/02/os/2%E3%80%81%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/",
            "title": "2、进程管理",
            "date_published": "2023-06-02T07:59:38.000Z",
            "content_html": "<h1 id=\"进程的定义-组成-组织方式-特征\"><a class=\"anchor\" href=\"#进程的定义-组成-组织方式-特征\">#</a> 进程的定义、组成、组织方式、特征</h1>\n<p><strong>整体框架</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230117215111334.png\" alt=\"image-20230117215111334\" /></p>\n<h2 id=\"进程的定义\"><a class=\"anchor\" href=\"#进程的定义\">#</a> 进程的定义</h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>程序</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}程序</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">程序</span></span></span></span>：就是一个指令序列</p>\n<p>早期的计算机（只支持<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>单道</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}单道</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">单道</span></span></span></span>程序）</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230117002208545.png\" alt=\"image-20230117002208545\" /></p>\n<hr />\n<p>引入<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>多道</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}多道</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">多道</span></span></span></span>程序之后：</p>\n<p>为了方便操作操作系统管理，完成各个程序并发执行、</p>\n<ul>\n<li>引入了<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>进程、进程实体</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}进程、进程实体</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">进程、进程实体</span></span></span></span>的概念</li>\n</ul>\n<p><strong>PCB</strong>、程序段、数据段三部分构成了</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>进程实体</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}进程实体</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">进程实体</span></span></span></span>（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>进程映像</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}进程映像</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">进程映像</span></span></span></span>）</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230117002527274.png\" alt=\"image-20230117002527274\" /></p>\n<hr />\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>程序段、数据段、</mtext><mtext mathvariant=\"monospace\">PCB</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}程序段、数据段、\\texttt{PCB}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">程序段、数据段、</span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord texttt\" style=\"color:red;\">PCB</span></span></span></span></span> 三部分组成了<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>进程实体</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}进程实体</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">进程实体</span></span></span></span>（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>进程映像</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}进程映像</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">进程映像</span></span></span></span>）。</p>\n<ul>\n<li>\n<p>一般情况下，我们把进程实体就简称为进程，</p>\n<p>例如，所谓<strong>创建</strong>进程，实质上是创建进程实体中的 <strong>PCB</strong> ;</p>\n<p>而<strong>撤销</strong>进程，实质上是撤销进程实体中的 <strong>PCB</strong>。</p>\n</li>\n</ul>\n<p>注意：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext mathvariant=\"monospace\">PCB</mtext><mtext>是进程存在的唯一标志</mtext><mo stretchy=\"false\">!</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}\\texttt{PCB}是进程存在的唯一标志!</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord texttt\" style=\"color:red;\">PCB</span></span><span class=\"mord cjk_fallback\" style=\"color:red;\">是进程存在的唯一标志</span><span class=\"mclose\" style=\"color:red;\">!</span></span></span></span></p>\n<p>从不同的角度，进程可以有不同的定义，比较传统典型的定义有:</p>\n<ol>\n<li>\n<p>进程是程序的一次<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"blue\"><mtext>执行过程</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{blue}执行过程</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:blue;\">执行过程</span></span></span></span>。</p>\n</li>\n<li>\n<p>进程是一个程序及其数据在处理机上顺序执行时所<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"blue\"><mtext>发生的活动</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{blue}发生的活动</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:blue;\">发生的活动</span></span></span></span>。</p>\n</li>\n<li>\n<p>进程是具有独立功能的程序在数据集合上运行的过程，</p>\n<p>它是系统进行资源分配和调度的一个独立单位</p>\n</li>\n</ol>\n<p>上述都是强调进程的 “<strong>动态性</strong>”</p>\n<p>引入进程实体的概念后，可把进程定义为:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>进程</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}进程</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">进程</span></span></span></span>是进程实体的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"blue\"><mtext>运行过程</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{blue}运行过程</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:blue;\">运行过程</span></span></span></span>，</p>\n<ul>\n<li>是系统进行<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>资源分配</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}资源分配</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">资源分配</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>调度</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}调度</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">调度</span></span></span></span>的一个独立单位。</li>\n</ul>\n<p><strong>注</strong>：严格来说，进程实体和进程并不一样，</p>\n<ul>\n<li>\n<p>进程实体是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>静态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}静态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">静态</span></span></span></span>的，</p>\n<p>进程则是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>动态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}动态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">动态</span></span></span></span>的。</p>\n</li>\n<li>\n<p>不过，除非题目专门考察二者区别，否则可以认为进程实体就是进程。</p>\n<p>因此我们也可以说 “进程由程序段、数据段、<strong>PCB</strong> 三部分组成”</p>\n</li>\n</ul>\n<hr />\n<h2 id=\"进程的组成\"><a class=\"anchor\" href=\"#进程的组成\">#</a> 进程的组成</h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>进程实体</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}进程实体</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">进程实体</span></span></span></span>（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>进程映像</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}进程映像</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">进程映像</span></span></span></span>）由<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>程序段、数据段、</mtext><mtext mathvariant=\"monospace\">PCB</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}程序段、数据段、\\texttt{PCB}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">程序段、数据段、</span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord texttt\" style=\"color:red;\">PCB</span></span></span></span></span> 三部分组成。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230117211512854.png\" alt=\"image-20230117211512854\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230117212141173.png\" alt=\"image-20230117212141173\" /></p>\n<p>不同的书籍，分类方式可能不同</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230117212443678.png\" alt=\"image-20230117212443678\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230117212829049.png\" alt=\"image-20230117212829049\" /></p>\n<h2 id=\"进程的组织\"><a class=\"anchor\" href=\"#进程的组织\">#</a> 进程的组织</h2>\n<p>在一个系统中，通常有数十、数百乃至数千个 <strong>PCB</strong> 。为了能对他们加以有效的管理，应该用适当的方式把这些 PCB 组织起来。</p>\n<p><strong>注</strong>：进程的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>组成</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}组成</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">组成</span></span></span></span>讨论的是一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>进程内部</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}进程内部</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">进程内部</span></span></span></span>由哪些部分构成的问题，</p>\n<ul>\n<li>而进程的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>组织</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}组织</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">组织</span></span></span></span>讨论的是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>多个进程之间</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}多个进程之间</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">多个进程之间</span></span></span></span>的组织方式问题</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230117213233841.png\" alt=\"image-20230117213233841\" /></p>\n<hr />\n<h3 id=\"链接方式\"><a class=\"anchor\" href=\"#链接方式\">#</a> 链接方式</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230117213419831.png\" alt=\"image-20230117213419831\" /></p>\n<h3 id=\"索引方式\"><a class=\"anchor\" href=\"#索引方式\">#</a> 索引方式</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230117213449777.png\" alt=\"image-20230117213449777\" /></p>\n<h2 id=\"进程的特征\"><a class=\"anchor\" href=\"#进程的特征\">#</a> 进程的特征</h2>\n<p>进程和程序是两个截然不同的概念，相比于程序，进程拥有以下特征:</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230117214312658.png\" alt=\"image-20230117214312658\" /></p>\n<p><strong>动态性</strong>是进程最基本的特征</p>\n<p><strong>进程</strong>是资源分配、接受调度的基本单位</p>\n<p><strong>异步性</strong>会导致并发程序执行结果的不确定性。</p>\n<ul>\n<li>具体在 &quot;进程同步&quot;</li>\n</ul>\n<hr />\n<h2 id=\"整体框架\"><a class=\"anchor\" href=\"#整体框架\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230117215057478.png\" alt=\"image-20230117215057478\" /></p>\n<h1 id=\"进程的状态与转换\"><a class=\"anchor\" href=\"#进程的状态与转换\">#</a> 进程的状态与转换</h1>\n<p><strong>整体框架</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230117230245740.png\" alt=\"image-20230117230245740\" /></p>\n<h2 id=\"三种基本状态\"><a class=\"anchor\" href=\"#三种基本状态\">#</a> 三种基本状态</h2>\n<p>进程是程序的一次执行。在这个执行过程中，有时进程正在被 <strong>CPU</strong> 处理，有时又需要等待 <strong>CPU</strong> 服务，</p>\n<ul>\n<li>可见进程的状态是会有各种变化。</li>\n</ul>\n<p>为了方便对各个进程的管理，操作系统需要将进程合理地划分为几种状态</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230117220117707.png\" alt=\"image-20230117220117707\" /></p>\n<p>① 运行态：</p>\n<p><strong>注意</strong>：单核处理机的环境下，每一个时刻最多只有一个进程处于运行态</p>\n<p>（双核环境下可以同时有两个进程处于运行态）</p>\n<p>② 就绪态：</p>\n<p>进程已经拥有除处理机之外所有需要的组员，一旦获得处理机。即可立即进入运行态开始运行<br />\n即：万事具备，只欠 <strong>CPU</strong></p>\n<p>③ 阻塞态：</p>\n<p>如：等待操作系统分配打印机、等待读磁盘操作的结果。</p>\n<p><strong>CPU</strong> 是计算机中最昂贵的部件，为了提高 <strong>CPU</strong> 的利用率，需要先将其他进程需要的资源分配到位，才能得到 <strong>CPU</strong> 的服务</p>\n<ul>\n<li>例如：运行态中的某个进程向请求 <strong>I/O</strong> 设备，就需要进入阻塞态，等待这些资源的分配完成再进入就绪态，等待 <strong>CPU</strong> 的服务</li>\n</ul>\n<hr />\n<h2 id=\"另外两种状态\"><a class=\"anchor\" href=\"#另外两种状态\">#</a> 另外两种状态</h2>\n<p>操作系统需要完成创建进程。</p>\n<ul>\n<li>\n<p>操作系统为该进程分配所需的内存空间等系统资源，</p>\n<p>并为其创建、初始化 <strong>PCB</strong>（如：为进程分配 <strong>PID</strong>）</p>\n</li>\n</ul>\n<p>进程运行结束（或者由于 <strong>bug</strong> 导致进程无法继续执行下去，比如数组越界错误），</p>\n<ul>\n<li>需要撤销进程。</li>\n</ul>\n<p>操作系统需要完成<strong>撤销进程</strong>相关的工作。</p>\n<ul>\n<li>完成将分配给进程的<strong>资源回收</strong>，撤销进程 <strong>PCB</strong> 等工作</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230117224723360.png\" alt=\"image-20230117224723360\" /></p>\n<h2 id=\"进程状态的转换\"><a class=\"anchor\" href=\"#进程状态的转换\">#</a> 进程状态的转换</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230117225258230.png\" alt=\"image-20230117225258230\" /></p>\n<h2 id=\"整体框架-2\"><a class=\"anchor\" href=\"#整体框架-2\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230117230239298.png\" alt=\"image-20230117230239298\" /></p>\n<h1 id=\"进程控制\"><a class=\"anchor\" href=\"#进程控制\">#</a> 进程控制</h1>\n<p><strong>整体框架</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230118000302814.png\" alt=\"image-20230118000302814\" /></p>\n<h2 id=\"什么是进程控制\"><a class=\"anchor\" href=\"#什么是进程控制\">#</a> 什么是进程控制？</h2>\n<p>进程控制的<strong>主要功能</strong>是对系统中的所有进程实施<strong>有效的管理</strong>，</p>\n<ul>\n<li>它具有创建新进程、撤销已有进程、实现进程状态转换等功能。</li>\n</ul>\n<p>简单来说：进程控制就是要实现进程状态转换</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230117230603946.png\" alt=\"image-20230117230603946\" /></p>\n<h2 id=\"如何实现进程控制\"><a class=\"anchor\" href=\"#如何实现进程控制\">#</a> 如何实现进程控制？</h2>\n<h3 id=\"进程控制-2\"><a class=\"anchor\" href=\"#进程控制-2\">#</a> 进程控制</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230117230722966.png\" alt=\"image-20230117230722966\" /></p>\n<hr />\n<p>① 创建进程：需要初始化 <strong>PCB</strong>、分配系统资源</p>\n<ul>\n<li>创建态 -&gt; 就绪态，需要修改 <strong>PCB</strong> 内容和相应队列</li>\n</ul>\n<p>② 就绪态 -&gt; 运行态 需要<strong>恢复</strong>进程运行环境、修改 <strong>PCB</strong> 内容和相应队列</p>\n<ul>\n<li>恢复进程运行环境因为进程可能在运行中就因为某个原因让出了 <strong>CPU</strong>，这一次又抢到了 <strong>CPU</strong> 时间片，需要从之前中断的地方开始执行</li>\n</ul>\n<p>③ 运行态 -&gt; 阻塞态 需要<strong>保存</strong>进程运行环境、修改 <strong>PCB</strong> 内容和相应队列</p>\n<ul>\n<li>保存进程运行环境因为进程因为某个原因让出了 <strong>CPU</strong>，在某段时间后可能还会再次抢到 <strong>CPU</strong>，需要从之前中断的地方开始执行</li>\n</ul>\n<p>④ 阻塞态 -&gt; 就绪态 需要修改 <strong>PCB</strong> 内容和相应队列。</p>\n<ul>\n<li>如果等待的是资源，则还需为进程分配系统资源</li>\n</ul>\n<p>⑤ 运行态 -&gt; 就绪态（进程切换）需要<strong>保存</strong>进程运行环境、修改 <strong>PCB</strong> 内容和相应队列</p>\n<p>⑥ 运行态 -&gt; 终止态 需回收进程拥有的资源，撤销 <strong>CPU</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230117231942791.png\" alt=\"image-20230117231942791\" /></p>\n<h3 id=\"原语\"><a class=\"anchor\" href=\"#原语\">#</a> 原语</h3>\n<p>原语是一种<strong>特殊的程序</strong>，处于操作系统最顶层，是最接近硬件的部分</p>\n<p>用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>原语</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}原语</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">原语</span></span></span></span>实现进程控制。</p>\n<p>原语的<strong>特点</strong>是执行期间<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>不允许中断</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}不允许中断</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">不允许中断</span></span></span></span>，</p>\n<ul>\n<li>只能一气呵成。</li>\n</ul>\n<p>这种不可被中断的操作即<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>原子操作</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}原子操作</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">原子操作</span></span></span></span>。</p>\n<p>原语采用 “<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>关中断</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}关中断</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">关中断</span></span></span></span>指令” 和 “<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>开中断</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}开中断</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">开中断</span></span></span></span>指令” 实现</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230117232406577.png\" alt=\"image-20230117232406577\" /></p>\n<p>显然，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>关</mtext><mi mathvariant=\"normal\">/</mi><mtext>开中断指令</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}关/开中断指令</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">关</span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord cjk_fallback\" style=\"color:red;\">开中断指令</span></span></span></span>的权限非常大，</p>\n<ul>\n<li>必然是只允许在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>核心态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}核心态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">核心态</span></span></span></span>下执行的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>特权指令</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}特权指令</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">特权指令</span></span></span></span></li>\n</ul>\n<p>原语属于操作系统内核的一部分</p>\n<hr />\n<h3 id=\"进程控制相关的原语\"><a class=\"anchor\" href=\"#进程控制相关的原语\">#</a> 进程控制相关的原语</h3>\n<p>学习技巧：进程控制会导致进程状态的转换。无论哪个原语，要做的无非三类事情:</p>\n<ol>\n<li>\n<p>更新 <strong>PCB</strong> 中的信息（如修改进程状态标志、将运行环境保存到 <strong>PCB</strong> 、从 <strong>PCB</strong> 恢复运行环境)</p>\n<p>a. 所有的进程控制原语一定都会<strong>修改进程状态标志</strong></p>\n<p>b. 剥夺当前运行进程的 <strong>CPU</strong> 使用权必然需要保存其运行环境</p>\n<p>c. 某进程开始运行前必然要恢复期运行环境</p>\n</li>\n<li>\n<p>将 <strong>PCB</strong> 插入合适的队列</p>\n</li>\n<li>\n<p>分配 / 回收资源</p>\n</li>\n</ol>\n<h4 id=\"进程的创建原语\"><a class=\"anchor\" href=\"#进程的创建原语\">#</a> 进程的创建原语</h4>\n<p>无 -&gt; 创建态 -&gt; 就绪态</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230117235534164.png\" alt=\"image-20230117235534164\" /></p>\n<hr />\n<h4 id=\"进程的终止原语\"><a class=\"anchor\" href=\"#进程的终止原语\">#</a> 进程的终止原语</h4>\n<p>就绪态 / 阻塞态 / 运行态 -&gt; 终止态 -&gt; 无</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230117235508349.png\" alt=\"image-20230117235508349\" /></p>\n<h4 id=\"进程的阻塞和唤醒原语\"><a class=\"anchor\" href=\"#进程的阻塞和唤醒原语\">#</a> 进程的阻塞和唤醒原语</h4>\n<p>阻塞原语与唤醒原语必须<strong>成对使用</strong></p>\n<p>阻塞原语：运行态 -&gt; 阻塞态</p>\n<p>唤醒原语：阻塞态 -&gt; 运行态</p>\n<p>因何事阻塞，就应何事唤醒</p>\n<p>即：解铃还须系铃人</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230117235347280.png\" alt=\"image-20230117235347280\" /></p>\n<h4 id=\"进程的切换原语\"><a class=\"anchor\" href=\"#进程的切换原语\">#</a> 进程的切换原语</h4>\n<p>运行态 -&gt; 阻塞态 / 就绪态</p>\n<p>就绪态 -&gt; 运行态</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230117235832204.png\" alt=\"image-20230117235832204\" /></p>\n<h2 id=\"整体框架-3\"><a class=\"anchor\" href=\"#整体框架-3\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230118000302814.png\" alt=\"image-20230118000302814\" /></p>\n<p>各原语可以实现怎样的状态转换</p>\n<p>各原语大概做了哪些事情</p>\n<h1 id=\"进程通信\"><a class=\"anchor\" href=\"#进程通信\">#</a> 进程通信</h1>\n<p><strong>整体框架</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230118222146010.png\" alt=\"image-20230118222146010\" /></p>\n<h2 id=\"什么是进程通信\"><a class=\"anchor\" href=\"#什么是进程通信\">#</a> 什么是进程通信？</h2>\n<p>顾名思义，进程通信就是指进程之间的信息交换。</p>\n<p>进程是分配系统资源的单位（包括内存地址空间)，</p>\n<ul>\n<li>因此<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>各进程</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}各进程</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">各进程</span></span></span></span>拥有的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>内存地址空间相互独立</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}内存地址空间相互独立</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">内存地址空间相互独立</span></span></span></span>。</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230118214914239.png\" alt=\"image-20230118214914239\" /></p>\n<p>为了保证安全，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>一个进程不能直接访问另一个进程的地址空间</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}一个进程不能直接访问另一个进程的地址空间</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">一个进程不能直接访问另一个进程的地址空间</span></span></span></span></p>\n<p>但是进程之间的信息交换又是必须实现的。</p>\n<p>为了保证进程间的安全通信，操作系统提供了一些方法。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230118215015724.png\" alt=\"image-20230118215015724\" /></p>\n<h2 id=\"共享存储\"><a class=\"anchor\" href=\"#共享存储\">#</a> 共享存储</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230118215242272.png\" alt=\"image-20230118215242272\" /></p>\n<p>两个进程对共享空间的<strong>访问</strong>必须是<strong>互斥</strong>的（互斥访问通过操作系统提供的工具实现）。</p>\n<p>操作系统只负责提供共享空间和同步互斥工具（如 <strong>P</strong>、<strong>V</strong> 操作）</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230118215558218.png\" alt=\"image-20230118215558218\" /></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>基于数据结构</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}基于数据结构</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">基于数据结构</span></span></span></span>的共享：</p>\n<ul>\n<li>\n<p>比如共享空间里只能放一个长度为 10 的数组。</p>\n</li>\n<li>\n<p>这种共享方式速度慢、限制多，</p>\n</li>\n<li>\n<p>是一种<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>低级通信</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}低级通信</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">低级通信</span></span></span></span>方式</p>\n</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>基于存储区</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}基于存储区</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">基于存储区</span></span></span></span>的共享：</p>\n<ul>\n<li>\n<p>在内存中画出一块共享存储区，数据的形式、存放位置都由<strong>进程控制</strong>，而不是操作系统。</p>\n</li>\n<li>\n<p>相比之下，这种共享方式速度更快，</p>\n</li>\n<li>\n<p>是一种<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>高级通信</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}高级通信</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">高级通信</span></span></span></span>方式。</p>\n</li>\n</ul>\n<h2 id=\"管道通信\"><a class=\"anchor\" href=\"#管道通信\">#</a> 管道通信</h2>\n<p>“管道” 是指用于连接读写进程的一个<strong>共享文件</strong>，</p>\n<ul>\n<li>又名  <code>pipe</code>  文件。</li>\n<li>其实就是在内存中开辟一个大小固定的<strong>缓冲区</strong></li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230118215739247.png\" alt=\"image-20230118215739247\" /></p>\n<p>管道只能采用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>半双工通信</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}半双工通信</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">半双工通信</span></span></span></span>，某一时间段内只能实现单向的传输。</p>\n<ul>\n<li>如果要实现双向同时通信，则需要设置<strong>两个管道</strong>。</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230118215947722.png\" alt=\"image-20230118215947722\" /></p>\n<p>首先进程 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 会往管道中写数据， 当管道中的数据写满了之后进程 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> 才可以开始往外读数据</p>\n<p>只有这个数据全部被读出后，进程 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 才可以继续往里面写数据</p>\n<hr />\n<p>数据以字符流的形式写入管道，当<strong>管道写满</strong>时，<strong>写进程</strong>的  <code> write()</code>  系统调用将被<strong>阻塞</strong>，等待读进程将数据取走。</p>\n<p>当读进程将数据全部取走后 **，管道变空 **，此时<strong>读进程</strong>的  <code>read()</code>  系统调用将被<strong>阻塞</strong>。</p>\n<hr />\n<p>如果<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>没写满</mtext><mo separator=\"true\">,</mo><mtext>就不允许读</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}没写满,就不允许读</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">没写满</span><span class=\"mpunct\" style=\"color:red;\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">就不允许读</span></span></span></span>。</p>\n<p>如果<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>没读空</mtext><mo separator=\"true\">,</mo><mtext>就不允许写</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}没读空,就不允许写</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">没读空</span><span class=\"mpunct\" style=\"color:red;\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">就不允许写</span></span></span></span>。</p>\n<p>数据一旦被读出，就从管道中被抛弃，</p>\n<ul>\n<li>\n<p>这就意味着<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>读进程最多只能有一个</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}读进程最多只能有一个</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">读进程最多只能有一个</span></span></span></span>，</p>\n<p>否则可能会有读错数据的情况。</p>\n</li>\n</ul>\n<h2 id=\"消息传递\"><a class=\"anchor\" href=\"#消息传递\">#</a> 消息传递</h2>\n<p>进程间的数据交换以<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>格式化的消息</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}格式化的消息</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">格式化的消息</span></span></span></span>（ <code>Message</code> ）为单位。</p>\n<p>进程通过操作系统提供的 “发送消息 / 接收消息” 两个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>原语</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}原语</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">原语</span></span></span></span>进行数据交换。</p>\n<p>例如： <code>TCP</code>  报文段的首部就是消息头，数据载荷就是消息体</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230118220813617.png\" alt=\"image-20230118220813617\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230118221019141.png\" alt=\"image-20230118221019141\" /></p>\n<h3 id=\"直接通信方式\"><a class=\"anchor\" href=\"#直接通信方式\">#</a> 直接通信方式</h3>\n<p>消息直接挂到<strong>接收进程</strong>的消息缓存队列上</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230118221051455.png\" alt=\"image-20230118221051455\" /></p>\n<h3 id=\"间接通信方式\"><a class=\"anchor\" href=\"#间接通信方式\">#</a> 间接通信方式</h3>\n<p>消息要先发送到<strong>中间实体</strong>（信箱）中，因此也称 “信箱通信方式” 。</p>\n<ul>\n<li>Eg：计网中的电子邮件系统</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230118221353103.png\" alt=\"image-20230118221353103\" /></p>\n<h2 id=\"整体框架-4\"><a class=\"anchor\" href=\"#整体框架-4\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230118222138424.png\" alt=\"image-20230118222138424\" /></p>\n<h1 id=\"线程概念和多线程模型\"><a class=\"anchor\" href=\"#线程概念和多线程模型\">#</a> 线程概念和多线程模型</h1>\n<p><strong>整体框架</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230119002426983.png\" alt=\"image-20230119002426983\" /></p>\n<h2 id=\"什么是线程为什么要引入线程\"><a class=\"anchor\" href=\"#什么是线程为什么要引入线程\">#</a> 什么是线程，为什么要引入线程？</h2>\n<p>还没有引入进程之前，各个程序只能串行执行</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230118222749992.png\" alt=\"image-20230118222749992\" /></p>\n<p>进程是程序的一次执行过程，但这些功能显然<strong>不可能</strong>是由一个程序顺序处理就能实现的</p>\n<hr />\n<p>有的进程可能需要 “同时” 做很多事，而传统的进程只能串行地执行一系列程序。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230118223919994.png\" alt=\"image-20230118223919994\" /></p>\n<p>为此，引入了 “线程”，来增加并发度。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230118224436180.png\" alt=\"image-20230118224436180\" /></p>\n<p>引入线程后，<strong>线程成为了程序执行流的最小单位</strong></p>\n<hr />\n<p>可以把线程理解为 “轻量级进程” 。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>线程</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}线程</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">线程</span></span></span></span>是一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>基本的</mtext><mtext mathvariant=\"monospace\">CPU</mtext><mtext>执行单元</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}基本的\\texttt{CPU}执行单元</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">基本的</span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord texttt\" style=\"color:red;\">CPU</span></span><span class=\"mord cjk_fallback\" style=\"color:red;\">执行单元</span></span></span></span>，</p>\n<ul>\n<li>也是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>程序执行流的最小单位</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}程序执行流的最小单位</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">程序执行流的最小单位</span></span></span></span>。</li>\n</ul>\n<p>引入线程之后，不仅是进程之间可以并发，</p>\n<ul>\n<li>\n<p>进程内的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>各线程之间</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}各线程之间</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">各线程之间</span></span></span></span>也可以<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>并发</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}并发</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">并发</span></span></span></span>，</p>\n<p>从而进一步<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>提升了系统的并发度</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}提升了系统的并发度</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">提升了系统的并发度</span></span></span></span>，</p>\n<p>使得一个进程内也可以并发处理各种任务（如 QQ 视频、文字聊天、传文件)</p>\n</li>\n</ul>\n<hr />\n<p>引入线程后，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>进程</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}进程</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">进程</span></span></span></span>只作为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>除</mtext><mtext mathvariant=\"monospace\">CPU</mtext><mtext>之外的系统资源的分配单元</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}除\\texttt{CPU}之外的系统资源的分配单元</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">除</span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord texttt\" style=\"color:red;\">CPU</span></span><span class=\"mord cjk_fallback\" style=\"color:red;\">之外的系统资源的分配单元</span></span></span></span></p>\n<ul>\n<li>（如打印机、内存地址空间等都是分配给进程的）。</li>\n</ul>\n<p>即：进程只作为分配资源的基本单位，而将线程作为调度的基本单位</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230118225004543.png\" alt=\"image-20230118225004543\" /></p>\n<hr />\n<h2 id=\"引入线程带来的变化\"><a class=\"anchor\" href=\"#引入线程带来的变化\">#</a> 引入线程带来的变化</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230118231907308.png\" alt=\"image-20230118231907308\" /></p>\n<h2 id=\"线程的属性\"><a class=\"anchor\" href=\"#线程的属性\">#</a> 线程的属性</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230118232159853.png\" alt=\"image-20230118232159853\" /></p>\n<p>例如：从 QQ 聊天窗口跳到 b 站视频就是不同进程之间线程的切换</p>\n<h2 id=\"线程的实现方式\"><a class=\"anchor\" href=\"#线程的实现方式\">#</a> 线程的实现方式</h2>\n<h3 id=\"用户级线程user-level-threadult\"><a class=\"anchor\" href=\"#用户级线程user-level-threadult\">#</a> 用户级线程 (User-Level Thread,ULT)</h3>\n<p>用户级线程由应用程序通过线程库实现。</p>\n<p>所有的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>线程管理工作</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}线程管理工作</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">线程管理工作</span></span></span></span>都由<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>应用程序负责</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}应用程序负责</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">应用程序负责</span></span></span></span>（包括线程切换)</p>\n<p>用户级线程中，</p>\n<ul>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>线程切换</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}线程切换</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">线程切换</span></span></span></span>可以在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>用户态下即可完成</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}用户态下即可完成</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">用户态下即可完成</span></span></span></span>，</p>\n<p><strong>无需操作系统干预</strong>。</p>\n</li>\n</ul>\n<p>在用户看来，是有多个线程。但是在操作系统内核看来，并意识不到线程的存在。</p>\n<ul>\n<li>（用户级线程对用户不透明，对<strong>操作系统透明</strong>)</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230118233615063.png\" alt=\"image-20230118233615063\" /></p>\n<p>可以这样理解，“<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>用户级线程</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}用户级线程</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">用户级线程</span></span></span></span>” 就是 “<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>从用户视角看能看到的线程</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}从用户视角看能看到的线程</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">从用户视角看能看到的线程</span></span></span></span>”</p>\n<h3 id=\"内核级线程kernel-level-thread-klt\"><a class=\"anchor\" href=\"#内核级线程kernel-level-thread-klt\">#</a> 内核级线程 (Kernel-Level Thread, KLT)</h3>\n<p>又称 &quot;内核支持的线程&quot;</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230118233911343.png\" alt=\"image-20230118233911343\" /></p>\n<p>内核级<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>线程的管理工作</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}线程的管理工作</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">线程的管理工作</span></span></span></span>由<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>操作系统内核</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}操作系统内核</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">操作系统内核</span></span></span></span>完成。</p>\n<p>线程调度、切换等工作都由<strong>内核负责</strong>，</p>\n<ul>\n<li>因此<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>内核级线程的切换</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}内核级线程的切换</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">内核级线程的切换</span></span></span></span>必然需要在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>核心态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}核心态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">核心态</span></span></span></span>下才能完成。</li>\n</ul>\n<p>可以这样理解，“<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>内核级线程</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}内核级线程</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">内核级线程</span></span></span></span>” 就是 “<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>从操作系统内核视角看能看到的线程</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}从操作系统内核视角看能看到的线程</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">从操作系统内核视角看能看到的线程</span></span></span></span>”</p>\n<h3 id=\"二者组合\"><a class=\"anchor\" href=\"#二者组合\">#</a> 二者组合</h3>\n<p>在同时支持用户级线程和内核级线程的系统中，可采用二者组合的方式:</p>\n<p>将  <code>n</code>  个用户级线程映射到  <code>m</code>  个内核级线程上（  <code>n &gt;= m</code> ）</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>重点重点重点</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}重点重点重点</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">重点重点重点</span></span></span></span>：</p>\n<p>操作系统只 “看得见” 内核级线程，</p>\n<ul>\n<li>因此只有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>内核级线程才是处理机分配的单位</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}内核级线程才是处理机分配的单位</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">内核级线程才是处理机分配的单位</span></span></span></span>。</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230118234210320.png\" alt=\"image-20230118234210320\" /></p>\n<p>例如：</p>\n<p>上述这个模型中，该进程由两个内核级线程，三个用户级线程，在用户看来，这个进程中有三个线程。</p>\n<ul>\n<li>但即使该进程在一个 4 核处理机的计算机上运行，也最多只能被分配到<strong>两个核</strong>，最多只能有两个用户线程<strong>并行</strong>执行。</li>\n</ul>\n<h2 id=\"多线程模型\"><a class=\"anchor\" href=\"#多线程模型\">#</a> 多线程模型</h2>\n<p>在同时支持用户级线程和内核级线程的系统中，由几个用户级线程映射到几个内核级线程的问题引出了 “多线程模型” 问题。</p>\n<h3 id=\"多对一模型\"><a class=\"anchor\" href=\"#多对一模型\">#</a> 多对一模型</h3>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>多对一</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}多对一</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">多对一</span></span></span></span>模型：</p>\n<ul>\n<li>多个用户及线程映射到一个内核级线程。每个用户进程只对应一个内核级线程。</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>用户级线程的切换在用户空间即可完成，不需要切换到核心态，</li>\n<li>线程管理的系统开销小，效率高</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>当一个用户级线程被阻塞后，整个进程都会被阻塞，并发度不高。</li>\n<li>多个线程不可在多核处理机上并行运行</li>\n</ul>\n<p><strong>因为</strong>线程是处理机调度的基本单位，而不是资源分配的基本单位。多个用户级映射在一个内核级线程，内核认为仅有一个线程，当一个用户级线程被阻塞，内核认为所映射的内核级线程也被阻塞，故所有映射到该内核级的用户级线程都被阻塞</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230118235614879.png\" alt=\"image-20230118235614879\" /></p>\n<h3 id=\"一对一模型\"><a class=\"anchor\" href=\"#一对一模型\">#</a> 一对一模型</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230119000642332.png\" alt=\"image-20230119000642332\" /></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>一对一</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}一对一</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">一对一</span></span></span></span>模型：</p>\n<ul>\n<li>一个用户及线程映射到一个内核级线程。</li>\n<li>每个用户进程有与用户级线程同数量的内核级线程。</li>\n</ul>\n<p>优点：</p>\n<ul>\n<li>当一个线程被阻塞后，别的线程还可以继续执行，并发能力强</li>\n<li>多线程可在多核处理机上并行执行。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li><strong>一个用户进程会占用多个内核级线程</strong>，线程切换由操作系统内核完成，需要切换到核心态，</li>\n<li>因此线程管理的成本高，开销大。</li>\n</ul>\n<h3 id=\"多对多模型\"><a class=\"anchor\" href=\"#多对多模型\">#</a> 多对多模型</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230118234210320.png\" alt=\"image-20230118234210320\" /></p>\n<p>多对多模型： <code>n</code>  用户及线程映射到  <code>m</code>  个内核级线程（ <code>n &gt;= m</code> ）。</p>\n<ul>\n<li>每个用户进程对应  <code>m</code>  个内核级线程。</li>\n</ul>\n<p>克服了多对一模型并发度不高的缺点，</p>\n<ul>\n<li>又克服了一对一模型中一个用户进程占用太多内核级线程，开销太大的缺点。</li>\n</ul>\n<h2 id=\"整体框架-5\"><a class=\"anchor\" href=\"#整体框架-5\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230119002416974.png\" alt=\"image-20230119002416974\" /></p>\n<h1 id=\"处理机调度的概念-层次\"><a class=\"anchor\" href=\"#处理机调度的概念-层次\">#</a> 处理机调度的概念、层次</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230121195943127.png\" alt=\"image-20230121195943127\" /></p>\n<h2 id=\"调度的基本概念\"><a class=\"anchor\" href=\"#调度的基本概念\">#</a> 调度的基本概念</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230121200121995.png\" alt=\"image-20230121200121995\" /></p>\n<p>当有一堆任务要处理，但由于资源有限，这些事情没法同时处理。、</p>\n<p>这就需要确定<strong>某种规则</strong>来决定<strong>处理</strong>这些任务的<strong>顺序</strong>，这就是 “调度” 研究的问题。</p>\n<p>在多道程序系统中，进程的数量往往是多于处理机的个数的，这样不可能同时并行地处理各个进程。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>处理机调度</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}处理机调度</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">处理机调度</span></span></span></span>，</p>\n<ul>\n<li>\n<p>就是从就绪队列中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>按照一定的算法选择一个进程</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}按照一定的算法选择一个进程</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">按照一定的算法选择一个进程</span></span></span></span>并将<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>处理机分配给它</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}处理机分配给它</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">处理机分配给它</span></span></span></span>运行，</p>\n<p>以实现进程的并发执行。</p>\n</li>\n</ul>\n<h2 id=\"调度的三个层次\"><a class=\"anchor\" href=\"#调度的三个层次\">#</a> 调度的三个层次</h2>\n<h3 id=\"高级调度\"><a class=\"anchor\" href=\"#高级调度\">#</a> 高级调度</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230121201216432.png\" alt=\"image-20230121201216432\" /></p>\n<p>由于内存空间有限，有时无法将用户提交的作业全部放入内存，因此就需要确定某种规则来决定将作业调入内存的顺序。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>高级调度（作业调度</mtext><mo stretchy=\"false\">)</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}高级调度（作业调度)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">高级调度（作业调度</span><span class=\"mclose\" style=\"color:red;\">)</span></span></span></span>。按一定的原则从外存上处于后备队列的作业中挑选一个 (或多个）作业，给他们分配内存等必要资源，</p>\n<ul>\n<li>并<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>建立相应的进程</mtext><mo stretchy=\"false\">(</mo><mtext>建立</mtext><mtext mathvariant=\"monospace\">PCB</mtext><mo stretchy=\"false\">)</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}建立相应的进程(建立\\texttt{PCB})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">建立相应的进程</span><span class=\"mopen\" style=\"color:red;\">(</span><span class=\"mord cjk_fallback\" style=\"color:red;\">建立</span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord texttt\" style=\"color:red;\">PCB</span></span><span class=\"mclose\" style=\"color:red;\">)</span></span></span></span>，</li>\n<li>以使它（们）<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>获得竞争处理机的权利</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}获得竞争处理机的权利</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">获得竞争处理机的权利</span></span></span></span>。</li>\n</ul>\n<p>高级调度是<strong>辅存（外存）与内存之间的调度</strong>。每个作业只调入一次，调出一次。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>作业调入时会建立相应的</mtext><mtext mathvariant=\"monospace\">PCB</mtext><mtext>，作业调出时才撤销</mtext><mtext mathvariant=\"monospace\">PCB</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}作业调入时会建立相应的\\texttt{PCB}，作业调出时才撤销\\texttt{PCB}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">作业调入时会建立相应的</span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord texttt\" style=\"color:red;\">PCB</span></span><span class=\"mord cjk_fallback\" style=\"color:red;\">，作业调出时才撤销</span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord texttt\" style=\"color:red;\">PCB</span></span></span></span></span>。</p>\n<p>高级调度主要是指 <code>调入</code> 的问题，因为只有调入的时机需要操作系统来确定，</p>\n<ul>\n<li>但调出的时机必然是作业运行结束才调出。</li>\n</ul>\n<h3 id=\"中级调度\"><a class=\"anchor\" href=\"#中级调度\">#</a> 中级调度</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230121202025591.png\" alt=\"image-20230121202025591\" /></p>\n<p>引入了虚拟存储技术之后，可将<strong>暂时不能运行的进程</strong>调至外存等待。</p>\n<ul>\n<li>等它重新具备了运行条件且内存又稍有空闲时，再重新调入内存。</li>\n</ul>\n<p>这么做的目的：</p>\n<ul>\n<li>是为了<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>提高内存利用率</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}提高内存利用率</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">提高内存利用率</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>系统吞吐量</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}系统吞吐量</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">系统吞吐量</span></span></span></span>。</li>\n</ul>\n<p>暂时调到外存等待的进程状态为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>挂起状态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}挂起状态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">挂起状态</span></span></span></span>。</p>\n<p>值得<strong>注意</strong>的是， <code>PCB</code>  并不会一起调到外存，而是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>会常驻内存</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}会常驻内存</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">会常驻内存</span></span></span></span>。</p>\n<ul>\n<li><code>PCB</code>  中会记录进程数据在外存中的存放位置，进程状态等信息，操作系统通过内存中的  <code>PCB</code>  来保持对各个进程的监控、管理。</li>\n<li>被挂起的进程  <code>PCB</code>  会被放到的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>挂起队列</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}挂起队列</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">挂起队列</span></span></span></span>中。</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>中级调度（内存调度）</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}中级调度（内存调度）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">中级调度（内存调度）</span></span></span></span>，</p>\n<ul>\n<li>就是要决定将哪个处于<strong>挂起状态</strong>的进程<strong>重新调入内存</strong>。</li>\n</ul>\n<p>一个进程可能会被多次调出、调入内存，</p>\n<ul>\n<li>因此<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>中级调度</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}中级调度</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">中级调度</span></span></span></span>发生的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>频率</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}频率</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">频率</span></span></span></span>要比高级调度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>更高</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}更高</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">更高</span></span></span></span>。</li>\n</ul>\n<h3 id=\"进程的挂起态与七状态模型\"><a class=\"anchor\" href=\"#进程的挂起态与七状态模型\">#</a> 进程的挂起态与七状态模型</h3>\n<p>暂时调到外存等待的进程状态为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>挂起状态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}挂起状态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">挂起状态</span></span></span></span>（挂起态，suspend）</p>\n<p>挂起态又可以进一步细分为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>就绪挂起</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}就绪挂起</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">就绪挂起</span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>阻塞挂起</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}阻塞挂起</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">阻塞挂起</span></span></span></span>两种状态</p>\n<p>五状态模型→七状态模型</p>\n<hr />\n<p>就是内存不够用了，将进程挂到<strong>就绪挂起</strong>或者<strong>挂到阻塞</strong>挂起</p>\n<p>等到内存空间空闲，这个进程需要继续执行，这个进程就会被<strong>激活</strong>，相应的数据就会被移到内存中</p>\n<p>一个处于创建态的进程，当它创建  <code>PCB</code>  之后，有可能出现内存空间不够的情况，就会先进入到就绪挂起状态</p>\n<p>当阻塞挂起中的进程等待某一事件发生时候，这个进程就会进入到就绪挂起状态</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230121203748888.png\" alt=\"image-20230121203748888\" /></p>\n<hr />\n<p><strong>注意</strong> “挂起” 和 “阻塞” 的区别，两种状态都是暂时不能获得  <code>CPU</code>  的服务，</p>\n<ul>\n<li>但挂起态是将进程映像（程序段、数据段）调到外存去了，</li>\n<li>而阻塞态下进程映像还在内存中。</li>\n</ul>\n<p>有的操作系统会把就绪挂起、阻塞挂起分为两个挂起队列，甚至会根据阻塞原因不同再把阻塞挂起进程进一步细分为多个队列。</p>\n<h3 id=\"低级调度\"><a class=\"anchor\" href=\"#低级调度\">#</a> 低级调度</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230121204201005.png\" alt=\"image-20230121204201005\" /></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>低级调度（进程调度）</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}低级调度（进程调度）</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">低级调度（进程调度）</span></span></span></span>，</p>\n<ul>\n<li>其主要任务是<strong>按照某种方法和策略从就绪队列中选取一个进程</strong>，将处理机分配给它。</li>\n</ul>\n<p>进程调度是操作系统中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>最基本的一种调度</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}最基本的一种调度</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">最基本的一种调度</span></span></span></span>，</p>\n<ul>\n<li>在一般的操作系统中都必须配置进程调度。</li>\n</ul>\n<p>进程调度的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>频率很高</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}频率很高</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">频率很高</span></span></span></span>，一般几十毫秒一次。</p>\n<h2 id=\"三层调度的联系-对比\"><a class=\"anchor\" href=\"#三层调度的联系-对比\">#</a> 三层调度的联系、对比</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>要做什么</th>\n<th>调度发生在...</th>\n<th>发生频率</th>\n<th>队进程状态的影响</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>高级调度（作业调度）</td>\n<td>按照某种规则，从后备队列中选择合适的作业（类似于程序段和数据段）将其调入内存，并为其创建进程</td>\n<td>外存 -&gt; 内存（面向作业）</td>\n<td>最低</td>\n<td>无 -&gt; 创建态 -&gt; 就绪态</td>\n</tr>\n<tr>\n<td>中级调度（内存调度）</td>\n<td>按照某种规则，从挂起队列中选择合适的进程将其数据调回内存</td>\n<td>外存 -&gt; 内存（面向进程）</td>\n<td>中等</td>\n<td>就绪挂起 -&gt; 就绪态（阻塞挂起 -&gt; 阻塞态）</td>\n</tr>\n<tr>\n<td>低级调度（进程调度）</td>\n<td>按照某种规则，从就绪队列中选择一个进程为其分配处理机</td>\n<td>内存 -&gt; CPU</td>\n<td>最高</td>\n<td>就绪态 -&gt; 运行态</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"整体框架-6\"><a class=\"anchor\" href=\"#整体框架-6\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230121205705858.png\" alt=\"image-20230121205705858\" /></p>\n<h1 id=\"进程调度的时机-切换与过程-方式\"><a class=\"anchor\" href=\"#进程调度的时机-切换与过程-方式\">#</a> 进程调度的时机、切换与过程、方式</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230121215554355.png\" alt=\"image-20230121215554355\" /></p>\n<h2 id=\"进程调度的时机\"><a class=\"anchor\" href=\"#进程调度的时机\">#</a> 进程调度的时机</h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>进程调度</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}进程调度</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">进程调度</span></span></span></span>（低级调度），就是按照某种算法从就绪队列中选择一个进程为其分配处理机</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230121220734318.png\" alt=\"image-20230121220734318\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230121221322773.png\" alt=\"image-20230121221322773\" /></p>\n<p>进程在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>操作系统内核程序临界区</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}操作系统内核程序临界区</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">操作系统内核程序临界区</span></span></span></span>中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>不能</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}不能</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">不能</span></span></span></span>进行调度与切换 √</p>\n<p>（2012 年联考真题）进程处于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>临界区</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}临界区</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">临界区</span></span></span></span>时<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>不能</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}不能</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">不能</span></span></span></span>进行处理机调度 ❌</p>\n<p><code>临界资源</code> ：一个时间段内只允许一个进程使用的资源。</p>\n<ul>\n<li>各进程需要<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>互斥地</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}互斥地</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">互斥地</span></span></span></span>访问临界资源。</li>\n</ul>\n<p><code>临界区</code> ：访问临界资源的那段代码。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>内核程序临界区</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}内核程序临界区</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">内核程序临界区</span></span></span></span>一般是用来访问<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>某种内核数据结构</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}某种内核数据结构</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">某种内核数据结构</span></span></span></span>的，</p>\n<ul>\n<li>比如进程的就绪队列（由各就绪进程的  <code>PCB</code>  组成)</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230121222330829.png\" alt=\"image-20230121222330829\" /></p>\n<p>若还没有退出内核程序临界区（还没解锁）就进行进程调度（访问就绪队列），</p>\n<ul>\n<li>\n<p>但是进程调度的相关程序也需要访问就绪队列，</p>\n<p>但此时就绪队列被锁住了，因此又无法顺利进行进程调度</p>\n</li>\n</ul>\n<hr />\n<p>若此时进程访问的是普通的临界资源，例如：打印机</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230128173651595.png\" alt=\"image-20230128173651595\" /></p>\n<p>在打印机打印完成之前，进程一直处于临界区内，临界资源不会解锁。</p>\n<ul>\n<li>但打印机又是慢速设备，此时如果一直不允许进程调度的话就会导致  <code>CPU</code>  一直空闲</li>\n</ul>\n<p>普通 I 临界区访问的临界资源不会直接影响操作系统内核的管理工作。</p>\n<ul>\n<li>因此在访问普通临界区时可以进行调度与切换。</li>\n</ul>\n<hr />\n<h2 id=\"进程调度的方式\"><a class=\"anchor\" href=\"#进程调度的方式\">#</a> 进程调度的方式</h2>\n<p>有的系统中，只允许进程<strong>主动放弃</strong>处理机</p>\n<p>有的系统中，进程可以<strong>主动放弃</strong>处理机，</p>\n<ul>\n<li>当有更紧急的任务需要处理时，也会强行剥夺处理机（<strong>被动放弃</strong>)</li>\n</ul>\n<hr />\n<h3 id=\"非剥夺方式非抢占方式\"><a class=\"anchor\" href=\"#非剥夺方式非抢占方式\">#</a> 非剥夺方式（非抢占方式）</h3>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>非剥夺调度方式</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}非剥夺调度方式</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">非剥夺调度方式</span></span></span></span>，又称<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>非抢占方式</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}非抢占方式</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">非抢占方式</span></span></span></span>。</p>\n<ul>\n<li>即，只允许进程主动放弃处理机。</li>\n</ul>\n<p>在运行过程中即便有更紧迫的任务到达，当前进程依然会继续使用处理机，</p>\n<ul>\n<li>直到该进程终止或主动要求进入阻塞态。</li>\n</ul>\n<p>实现简单，系统开销小但是无法及时处理紧急任务，适合于早期的批处理系统</p>\n<hr />\n<h3 id=\"剥夺调度方式抢占方式\"><a class=\"anchor\" href=\"#剥夺调度方式抢占方式\">#</a> 剥夺调度方式（抢占方式）</h3>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>剥夺调度方式</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}剥夺调度方式</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">剥夺调度方式</span></span></span></span>，又称<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>抢占方式</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}抢占方式</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">抢占方式</span></span></span></span>。</p>\n<ul>\n<li>当一个进程正在处理机上执行时，如果有一个更重要或更紧迫的进程需要使用处理机，则立即暂停正在执行的进程，将处理机分配给更重要紧迫的那个进程。</li>\n</ul>\n<p>可以优先处理更紧急的进程，也可实现让各进程按时间片轮流执行的功能（通过时钟中断）。</p>\n<ul>\n<li>适合于分时操作系统、实时操作系统</li>\n</ul>\n<h2 id=\"进程的切换与过程\"><a class=\"anchor\" href=\"#进程的切换与过程\">#</a> 进程的切换与过程</h2>\n<h3 id=\"狭义的进程调度-与-进程切换-的区别\"><a class=\"anchor\" href=\"#狭义的进程调度-与-进程切换-的区别\">#</a> &quot;狭义的进程调度&quot; 与 &quot;进程切换&quot; 的区别</h3>\n<p>“狭义的进程调度” 与 “进程切换” 的区别:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>狭义的进程调度</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}狭义的进程调度</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">狭义的进程调度</span></span></span></span>指的是从就绪队列中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>选中一个要运行的进程</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}选中一个要运行的进程</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">选中一个要运行的进程</span></span></span></span>。</p>\n<ul>\n<li>这个进程可以是<strong>刚刚被暂停执行的进程</strong>，也可能是<strong>另一个进程</strong>，后一种情况就需要进程切换</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>进程切换</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}进程切换</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">进程切换</span></span></span></span>是指一个进程让出处理机，由另一个进程占用处理机的过程。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>广义的进程调度</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}广义的进程调度</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">广义的进程调度</span></span></span></span>包含了选择一个进程和进程切换<strong>两个步骤</strong>。</p>\n<hr />\n<p>进程切换的过程主要完成了:</p>\n<ol>\n<li>\n<p>对原来运行进程各种数据的保存（信息一般保存在  <code>PCB</code>  中）</p>\n</li>\n<li>\n<p>对新的进程各种数据的恢复</p>\n<p>（如：程序计数器、程序状态字、各种数据寄存器等处理机现场信息，这些信息一般保存在进程控制块）</p>\n</li>\n</ol>\n<p><strong>注意</strong>：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>进程切换是有代价的</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}进程切换是有代价的</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">进程切换是有代价的</span></span></span></span></p>\n<ul>\n<li>因此如果<strong>过于频繁</strong>的进行进程<strong>调度</strong>、<strong>切换</strong>，必然会使整个<strong>系统的效率降低</strong>，使系统大部分时间都花在了进程切换上，而真正用于执行进程的时间减少。</li>\n</ul>\n<h2 id=\"整体框架-7\"><a class=\"anchor\" href=\"#整体框架-7\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230128180821686.png\" alt=\"image-20230128180821686\" /></p>\n<h1 id=\"调度算法的评价指标\"><a class=\"anchor\" href=\"#调度算法的评价指标\">#</a> 调度算法的评价指标</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230128220142618.png\" alt=\"image-20230128220142618\" /></p>\n<h2 id=\"cpu-利用率\"><a class=\"anchor\" href=\"#cpu-利用率\">#</a> CPU 利用率</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230128220233811.png\" alt=\"image-20230128220233811\" /></p>\n<p>由于早期的  <code>CPU</code>  造价极其昂贵，</p>\n<ul>\n<li>因此人们会<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>希望让</mtext><mtext mathvariant=\"monospace\">CPU</mtext><mtext>尽可能多地工作</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}希望让 \\texttt{CPU} 尽可能多地工作</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">希望让</span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord texttt\" style=\"color:red;\">CPU</span></span><span class=\"mord cjk_fallback\" style=\"color:red;\">尽可能多地工作</span></span></span></span></li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext mathvariant=\"monospace\">CPU</mtext><mtext>利用率</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}\\texttt{CPU}利用率</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord texttt\" style=\"color:red;\">CPU</span></span><span class=\"mord cjk_fallback\" style=\"color:red;\">利用率</span></span></span></span>：指  <code>CPU</code>  “忙碌” 的时间占总时间的比例。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>利用率</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}{利用率}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\" style=\"color:red;\"><span class=\"mord cjk_fallback\" style=\"color:red;\">利用率</span></span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo><mstyle mathsize=\"1.2em\"><mfrac><mtext>忙碌的时间</mtext><mtext>总时间</mtext></mfrac><mtext> </mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">=\\large\\frac{忙碌的时间}{总时间} \\,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.3669em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4335em;vertical-align:-0.414em;\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mopen nulldelimiter sizing reset-size7 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8496em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord cjk_fallback mtight\">总时间</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord cjk_fallback mtight\">忙碌的时间</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size7 size6\"></span></span><span class=\"mspace sizing reset-size6 size7\" style=\"margin-right:0.1667em;\"></span></span></span></span></p>\n<ul>\n<li>有的题目还会要求计算某种设备的利用率</li>\n</ul>\n<p><code>Eg</code> ：某计算机只支持单道程序，某个作业刚开始需要在  <code>CPU</code>  上运行 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span></span></span></span> 秒，再用打印机打印输出 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span></span></span></span> 秒，之后再执行 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span></span></span></span> 秒，才能结束。在此过程中， <code>CPU</code>  利用率、打印机利用率分别是多少？</p>\n<ul>\n<li>\n<p><code>CPU</code>  利用率 = <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mn>5</mn><mo>+</mo><mn>5</mn></mrow><mrow><mn>5</mn><mo>+</mo><mn>5</mn><mo>+</mo><mn>5</mn></mrow></mfrac><mo>=</mo><mn>66.66</mn><mi mathvariant=\"normal\">%</mi></mrow><annotation encoding=\"application/x-tex\">\\frac{5+5}{5+5+5}=66.66\\%</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2484em;vertical-align:-0.4033em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">5</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">5</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">5</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">66.66%</span></span></span></span></p>\n</li>\n<li>\n<p>打印机利用率 = <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mn>5</mn><mrow><mn>5</mn><mo>+</mo><mn>5</mn><mo>+</mo><mn>5</mn></mrow></mfrac><mo>=</mo><mn>33.33</mn><mi mathvariant=\"normal\">%</mi></mrow><annotation encoding=\"application/x-tex\">\\frac{5}{5+5+5}=33.33\\%</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2484em;vertical-align:-0.4033em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">5</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">5</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4033em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">33.33%</span></span></span></span></p>\n</li>\n</ul>\n<p>通常会考察多道程序并发执行的情况，可以用 “<a href=\"https://baike.baidu.com/item/%E7%94%98%E7%89%B9%E5%9B%BE/113232\">甘特图</a>” 来辅助计算</p>\n<hr />\n<h2 id=\"系统吞吐量\"><a class=\"anchor\" href=\"#系统吞吐量\">#</a> 系统吞吐量</h2>\n<p>对于计算机来说，希望能用尽可能少的时间处理完尽可能多的作业</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>系统吞吐量</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}系统吞吐量</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">系统吞吐量</span></span></span></span>：</p>\n<ul>\n<li>单位时间内完成作业的数量</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>系统吞吐量</mtext></mstyle><mo>=</mo><mstyle mathsize=\"1.2em\"><mfrac><mtext>总共完成了多少道作业</mtext><mtext>总共花了多少时间</mtext></mfrac><mtext> </mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\textcolor{red}{系统吞吐量}=\\large\\frac{总共完成了多少道作业}{总共花了多少时间}\\,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">系统吞吐量</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4335em;vertical-align:-0.414em;\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mopen nulldelimiter sizing reset-size7 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8496em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord cjk_fallback mtight\">总共花了多少时间</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord cjk_fallback mtight\">总共完成了多少道作业</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size7 size6\"></span></span><span class=\"mspace sizing reset-size6 size7\" style=\"margin-right:0.1667em;\"></span></span></span></span></p>\n<p><code>Eg</code> ：某计算机系统处理完 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">10</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">10</span></span></span></span> 道作业，共花费 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">100</span></span></span></span> 秒，则系统吞吐量为？</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mn>10</mn><mn>100</mn></mfrac><mo>=</mo><mn>0.1</mn><mtext>道</mtext><mi mathvariant=\"normal\">/</mi><mtext>秒</mtext></mrow><annotation encoding=\"application/x-tex\">\\frac{10}{100}= 0.1道/秒</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">100</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">10</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0.1</span><span class=\"mord cjk_fallback\">道</span><span class=\"mord\">/</span><span class=\"mord cjk_fallback\">秒</span></span></span></span></li>\n</ul>\n<h2 id=\"周转时间4个指标\"><a class=\"anchor\" href=\"#周转时间4个指标\">#</a> 周转时间 (4 个指标)</h2>\n<p>对于计算机的用户来说，他很关心自己的作业从提交到完成花了多少时间。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>周转时间</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}周转时间</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">周转时间</span></span></span></span>，</p>\n<ul>\n<li>是指从<strong>作业被提交给系统开始</strong>，到<strong>作业完成为止</strong>的这段时间间隔。</li>\n</ul>\n<p>它包括四个部分:</p>\n<ul>\n<li>作业在外存后备队列上等待作业调度（高级调度）的时间、</li>\n<li>进程在就绪队列上等待进程调度（低级调度）的时间（就绪态）、</li>\n<li>进程在  <code>CPU</code>  上执行的时间（运行态）、</li>\n<li>进程等待  <code>I/0</code>  操作完成的时间（阻塞态）。</li>\n</ul>\n<p>后三项在一个作业的整个处理过程中，可能发生多次。</p>\n<hr />\n<p>（作业）<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>周转时间</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}周转时间</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">周转时间</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo><mtext>作业完成时间</mtext><mo>−</mo><mtext>作业提交时间</mtext></mrow><annotation encoding=\"application/x-tex\">=作业完成时间-作业提交时间</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.3669em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord cjk_fallback\">作业完成时间</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\">作业提交时间</span></span></span></span></p>\n<ul>\n<li>上述对于用户来说，更关心自己的单个作业的周转时间</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>平均周转时间</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}平均周转时间</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">平均周转时间</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo><mstyle mathsize=\"1.2em\"><mfrac><mtext>各作业周转时间之和</mtext><mtext>作业数</mtext></mfrac><mtext> </mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">=\\large\\frac {各作业周转时间之和}{作业数}\\,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.3669em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4335em;vertical-align:-0.414em;\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mopen nulldelimiter sizing reset-size7 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8496em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord cjk_fallback mtight\">作业数</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord cjk_fallback mtight\">各作业周转时间之和</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size7 size6\"></span></span><span class=\"mspace sizing reset-size6 size7\" style=\"margin-right:0.1667em;\"></span></span></span></span></p>\n<ul>\n<li>对于操作系统来说，更关心系统的整体表现，因此更关心所有作业周转时间的平均值</li>\n</ul>\n<hr />\n<p><strong>思考</strong>：有的作业运行时间短，有的作业运行时间长，因此在周转时间相同的情况下，运行时间不同的作业，给用户的感觉肯定是不一样的</p>\n<ul>\n<li>例如：排队上厕所，另外个人只需等待一分钟，上十分钟，而你却等待十分钟，上一分钟</li>\n</ul>\n<hr />\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>带权周转时间</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}带权周转时间</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">带权周转时间</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo><mstyle mathsize=\"1.2em\"><mfrac><mtext>作业周转时间</mtext><mtext>作业实际运行的时间</mtext></mfrac><mtext> </mtext><mo>=</mo><mfrac><mrow><mtext>作业完成时间</mtext><mo>−</mo><mtext>作业提交时间</mtext></mrow><mtext>作业实际运行的时间</mtext></mfrac><mtext> </mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">=\\large\\frac {作业周转时间}{作业实际运行的时间}\\, = \\frac {作业完成时间-作业提交时间}{作业实际运行的时间}\\,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.3669em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4335em;vertical-align:-0.414em;\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mopen nulldelimiter sizing reset-size7 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8496em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord cjk_fallback mtight\">作业实际运行的时间</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord cjk_fallback mtight\">作业周转时间</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size7 size6\"></span></span><span class=\"mspace sizing reset-size6 size7\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel sizing reset-size6 size7\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4335em;vertical-align:-0.414em;\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mopen nulldelimiter sizing reset-size7 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8496em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord cjk_fallback mtight\">作业实际运行的时间</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord cjk_fallback mtight\">作业完成时间</span><span class=\"mbin mtight\">−</span><span class=\"mord cjk_fallback mtight\">作业提交时间</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size7 size6\"></span></span><span class=\"mspace sizing reset-size6 size7\" style=\"margin-right:0.1667em;\"></span></span></span></span></p>\n<ul>\n<li>\n<p>对于周转时间相同的两个作业，实际运行时间长的作业在相同时间内被服务的时间更多，带权周转时间更小，用户满意度更高。</p>\n</li>\n<li>\n<p>对于实际运行时间相同的两个作业，周转时间短的带权周转时间更小，用户满意度更高。</p>\n</li>\n</ul>\n<p>带权周转时间必然 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≥</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">≥1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></p>\n<p>带权周转时间与周转时间都是越小越好</p>\n<hr />\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>平均带权周转时间</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}平均带权周转时间</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">平均带权周转时间</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo><mstyle mathsize=\"1.2em\"><mfrac><mtext>各作业带权周转时间之和</mtext><mtext>作业数</mtext></mfrac><mtext> </mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">=\\large\\frac {各作业带权周转时间之和}{作业数}\\,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.3669em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4335em;vertical-align:-0.414em;\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mopen nulldelimiter sizing reset-size7 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8496em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord cjk_fallback mtight\">作业数</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord cjk_fallback mtight\">各作业带权周转时间之和</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size7 size6\"></span></span><span class=\"mspace sizing reset-size6 size7\" style=\"margin-right:0.1667em;\"></span></span></span></span></p>\n<h2 id=\"等待时间\"><a class=\"anchor\" href=\"#等待时间\">#</a> 等待时间</h2>\n<p>计算机的用户希望自己的作业尽可能少的等待处理机</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>等待时间</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}等待时间</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">等待时间</span></span></span></span>，</p>\n<ul>\n<li>指进程 / 作业<strong>处于等待处理机状态时间之和</strong>，等待时间越长，用户满意度越低。</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230128223121470.png\" alt=\"image-20230128223121470\" /></p>\n<p>对于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>进程</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}进程</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">进程</span></span></span></span>来说，</p>\n<ul>\n<li>等待时间就是指进程建立后<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>等待被服务的时间之和</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}等待被服务的时间之和</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">等待被服务的时间之和</span></span></span></span></li>\n<li>在等待  <code>I/O</code>  完成的期间其实进程也是在被服务的，所以不计入等待时间。</li>\n</ul>\n<p>对于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>作业</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}作业</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">作业</span></span></span></span>来说，</p>\n<ul>\n<li>不仅要考虑<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>建立进程后的等待时间</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}建立进程后的等待时间</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">建立进程后的等待时间</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>还要加上作业在外存后备队列中等待的时间</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}还要加上作业在外存后备队列中等待的时间</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">还要加上作业在外存后备队列中等待的时间</span></span></span></span>。</li>\n</ul>\n<p>一个作业总共需要被  <code>CPU</code>  服务多久，被  <code>l/O</code>  设备服务多久一般是确定不变的，</p>\n<ul>\n<li>因此调度算法其实只会影响作业 / 进程的等待时间。</li>\n</ul>\n<p>当然，与前面指标类似，也有 “<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>平均等待时间</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}平均等待时间</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">平均等待时间</span></span></span></span>” 来评价整体性能。</p>\n<h2 id=\"响应时间\"><a class=\"anchor\" href=\"#响应时间\">#</a> 响应时间</h2>\n<p>对于计算机用户来说，会希望自己的提交的请求（比如通过键盘输入了一个调试命令）尽早地开始被系统服务、回应。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>响应时间</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}响应时间</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">响应时间</span></span></span></span>：</p>\n<ul>\n<li>指从用户<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>提交请求</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}提交请求</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">提交请求</span></span></span></span>到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>首次产生响应</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}首次产生响应</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">首次产生响应</span></span></span></span>所用的时间。</li>\n</ul>\n<h2 id=\"整体框架-8\"><a class=\"anchor\" href=\"#整体框架-8\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230128224807642.png\" alt=\"image-20230128224807642\" /></p>\n<h1 id=\"fcfs-sjf-hrrn-调度算法\"><a class=\"anchor\" href=\"#fcfs-sjf-hrrn-调度算法\">#</a> FCFS、SJF、HRRN 调度算法</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230128225021061.png\" alt=\"image-20230128225021061\" /></p>\n<p><code>Tips</code> ：各种调度算法的学习思路</p>\n<ol>\n<li>\n<p>算法思想</p>\n</li>\n<li>\n<p>算法规则</p>\n</li>\n<li>\n<p>这种调度算法是用于作业调度还是进程调度？</p>\n</li>\n<li>\n<p>抢占式？非抢占式？</p>\n</li>\n<li>\n<p>优点和缺点</p>\n</li>\n<li>\n<p>是否会导致<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>饥饿</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}饥饿</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">饥饿</span></span></span></span></p>\n<p>某 进程 / 作业 长期得不到服务</p>\n</li>\n</ol>\n<hr />\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>可抢占？</th>\n<th>优点</th>\n<th>缺点</th>\n<th>考虑到等待时间 &amp; 运行时间</th>\n<th>会导致饥饿？</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FCFS</td>\n<td>非抢占式</td>\n<td>公平；实现简单；利于长作业</td>\n<td>不利于短作业</td>\n<td>等待时间 ✔；&lt;br /&gt; 运行时间 ❌</td>\n<td>不会</td>\n</tr>\n<tr>\n<td>SJF/SPF</td>\n<td>默认为非抢占式；也有 SJF 抢占式版本最短剩余时间优先算法（SRTN）</td>\n<td>&quot;最短的&quot; 平均等待 / 周转时间；利于短作业</td>\n<td>不利于长作业，可能会导致饥饿；难以做到正真的短作业优先</td>\n<td>等待时间 ❌；&lt;br /&gt; 运行时间 ✔</td>\n<td>会（导致长作业饥饿）</td>\n</tr>\n<tr>\n<td>HRRN</td>\n<td>非抢占式</td>\n<td>上述两种算法的均衡考虑，综合考虑的等待时间和运行时间</td>\n<td></td>\n<td>等待时间 ✔；&lt;br /&gt; 运行时间 ✔</td>\n<td>不会</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h2 id=\"fcfs\"><a class=\"anchor\" href=\"#fcfs\">#</a> FCFS</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230128235228419.png\" alt=\"image-20230128235228419\" /></p>\n<hr />\n<p>例题：各进程到达就绪队列的时间、需要的运行时间如下表所示。使用<strong>先来先服务</strong>调度算法，计算各进程的等待时间、平均等待时间、周转时间、平均周转时间、带权周转时间、平均带权周转时间。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230128232811470.png\" alt=\"image-20230128232811470\" /></p>\n<hr />\n<h2 id=\"sjf\"><a class=\"anchor\" href=\"#sjf\">#</a> SJF</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230128235300494.png\" alt=\"image-20230128235300494\" /></p>\n<h3 id=\"非抢占式的-sjf\"><a class=\"anchor\" href=\"#非抢占式的-sjf\">#</a> 非抢占式的 SJF</h3>\n<p>例题：各进程到达就绪队列的时间、需要的运行时间如下表所示。使用<strong>非抢占式</strong>的<strong>短作业优先</strong>（严格来说，用于进程调度应该称为<strong>短进程优先调度</strong>  <code>SPF</code> ）调度算法，计算各进程的等待时间、平均等待时间、周转时间、平均周转时间、带权周转时间、平均带权周转时间。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230128233735530.png\" alt=\"image-20230128233735530\" /></p>\n<h3 id=\"抢占式的-sjf最短剩余时间优先算法srtn\"><a class=\"anchor\" href=\"#抢占式的-sjf最短剩余时间优先算法srtn\">#</a> 抢占式的 SJF（最短剩余时间优先算法 SRTN）</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230128234226912.png\" alt=\"image-20230128234226912\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230128234342677.png\" alt=\"image-20230128234342677\" /></p>\n<h3 id=\"注意\"><a class=\"anchor\" href=\"#注意\">#</a> 注意</h3>\n<p>1 . 如果题目中未特别说明，所提到的 “短作业 / 进程优先算法” <strong>默认是非抢占式的</strong></p>\n<p>2 . 很多书上都会说 “  <code>SJF</code>  调度算法的平均等待时间、平均周转时间最少”</p>\n<p>严格来说，这个表述是错误的，不严谨的。之前的例子表明，最短剩余时间优先算法得到的平均等代时间、平均周转时间还要更少</p>\n<p>应该加上一个条件 “在 <code>所有进程同时可运行</code> 时，采用  <code>SJF</code>  调度算法的平均等待时间、平均周转时间最少”;</p>\n<p>或者说 “在 <code>所有进程都几乎同时到达时</code> ，采用  <code>SJF</code>  调度算法的平均等待时间、平均周转时间最少” ;</p>\n<p>如果不加上述前提条件，则应该说 “ <code>抢占式的</code> 短作业 / 进程优先调度算法（ <code>最短剩余时间优先, SRTN</code>  算法）的平均等待时间、平均周转时间最少”</p>\n<p>3．虽然严格来说， <code>SJF</code>  的平均等待时间、平均周转时间并不一定最少，</p>\n<ul>\n<li>但相比于其他算法（如  <code>FCFS</code> ) ， <code>SJF</code>  依然可以获得较少的平均等待时间、平均周转时间</li>\n</ul>\n<p>4 ．如果选择题中遇到 “  <code>SIF</code>  算法的平均等待时间、平均周转时间最少” 的选项，那最好判断其他选项是不是有很明显的错误，如果没有更合适的选项，那也应该选择该选项</p>\n<h2 id=\"二者思考\"><a class=\"anchor\" href=\"#二者思考\">#</a> 二者思考</h2>\n<p><code>FCFS</code>  算法是在每次调度的时候选择一个等待时间最长的作业（进程）为其服务。</p>\n<ul>\n<li>但是没有考虑到作业的运行时间，因此导致了对短作业不友好的问题</li>\n</ul>\n<p><code>SJF</code>  算法是选择一个执行时间最短的作业为其服务。</p>\n<ul>\n<li>但是又完全不考虑各个作业的等待时间，因此导致了对长作业不友好的问题，甚至还会造成饥饿问题</li>\n</ul>\n<p>能不能设计一个算法，即考虑到各个作业的等待时间，也能兼顾运行时间呢？</p>\n<ul>\n<li>高响应比优先算法</li>\n</ul>\n<hr />\n<h2 id=\"hrrn\"><a class=\"anchor\" href=\"#hrrn\">#</a> HRRN</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230129000427215.png\" alt=\"image-20230129000427215\" /></p>\n<hr />\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>响应比</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}响应比</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">响应比</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>=</mo><mstyle mathsize=\"1.2em\"><mfrac><mrow><mtext>等待时间</mtext><mo>+</mo><mtext>要求服务时间</mtext></mrow><mtext>要求服务时间</mtext></mfrac><mtext> </mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">=\\large\\frac{等待时间+要求服务时间}{要求服务时间}\\,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.3669em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.4335em;vertical-align:-0.414em;\"></span><span class=\"mord sizing reset-size6 size7\"><span class=\"mopen nulldelimiter sizing reset-size7 size6\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8496em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord cjk_fallback mtight\">要求服务时间</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size7 size4 mtight\"><span class=\"mord mtight\"><span class=\"mord cjk_fallback mtight\">等待时间</span><span class=\"mbin mtight\">+</span><span class=\"mord cjk_fallback mtight\">要求服务时间</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter sizing reset-size7 size6\"></span></span><span class=\"mspace sizing reset-size6 size7\" style=\"margin-right:0.1667em;\"></span></span></span></span></p>\n<p>例题：各进程到达就绪队列的时间、需要的运行时间如下表所示。使用<strong>高响应比优先</strong>调度算法，计算各进程的等待时间、平均等待时间、周转时间、平均周转时间、带权周转时间、平均带权周转时间。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230129000222019.png\" alt=\"image-20230129000222019\" /></p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>可抢占？</th>\n<th>优点</th>\n<th>缺点</th>\n<th>考虑到等待时间 &amp; 运行时间</th>\n<th>会导致饥饿？</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FCFS</td>\n<td>非抢占式</td>\n<td>公平；实现简单；利于长作业</td>\n<td>不利于短作业</td>\n<td>等待时间 ✔；&lt;br /&gt; 运行时间 ❌</td>\n<td>不会</td>\n</tr>\n<tr>\n<td>SJF/SPF</td>\n<td>默认为非抢占式；也有 SJF 抢占式版本最短剩余时间优先算法（SRTN）</td>\n<td>&quot;最短的&quot; 平均等待 / 周转时间；利于短作业</td>\n<td>不利于长作业，可能会导致饥饿；难以做到正真的短作业优先</td>\n<td>等待时间 ❌；&lt;br /&gt; 运行时间 ✔</td>\n<td>会（导致长作业饥饿）</td>\n</tr>\n<tr>\n<td>HRRN</td>\n<td>非抢占式</td>\n<td>上述两种算法的均衡考虑，综合考虑的等待时间和运行时间</td>\n<td></td>\n<td>等待时间 ✔；&lt;br /&gt; 运行时间 ✔</td>\n<td>不会</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注</strong>：这几种算法主要关心对用户的公平性、平均周转时间、平均等待时间等评价系统整体性能的指标，但是不关心 “响应时间”，也并不区分任务的紧急程度，因此对于用户来说，交互性很糟糕。</p>\n<p>因此这三种算法一般适合用于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>早期的批处理系统</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}早期的批处理系统</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">早期的批处理系统</span></span></span></span>，</p>\n<p>当然， <code>FCFS</code>  算法也常结合其他的算法使用，在现在也扮演着很重要的角色。</p>\n<ul>\n<li>而适合用于交互式系统的调度算法将在下个小节介绍...</li>\n</ul>\n<h1 id=\"时间片轮转-优先级调度算法-多级反馈队列调度算法\"><a class=\"anchor\" href=\"#时间片轮转-优先级调度算法-多级反馈队列调度算法\">#</a> 时间片轮转、优先级调度算法、多级反馈队列调度算法</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230129183902251.png\" alt=\"image-20230129183902251\" /></p>\n<p><code>Tips</code> ：各种调度算法的学习思路</p>\n<ol>\n<li>\n<p>算法思想</p>\n</li>\n<li>\n<p>算法规则</p>\n</li>\n<li>\n<p>这种调度算法是用于作业调度还是进程调度？</p>\n</li>\n<li>\n<p>抢占式？非抢占式？</p>\n</li>\n<li>\n<p>优点和缺点</p>\n</li>\n<li>\n<p>是否会导致<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>饥饿</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}饥饿</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">饥饿</span></span></span></span></p>\n<p>某 进程 / 作业 长期得不到服务</p>\n</li>\n</ol>\n<hr />\n<h2 id=\"时间片轮转rr-round-robin\"><a class=\"anchor\" href=\"#时间片轮转rr-round-robin\">#</a> 时间片轮转（RR, Round-Robin）</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230129190722131.png\" alt=\"image-20230129190722131\" /></p>\n<hr />\n<h3 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h3>\n<p>常用于分时操作系统，更注重 &quot;响应时间&quot;，因而此处不计算周转时间</p>\n<p>例题：各进程到达就绪队列的时间、需要的运行时间如下表所示。使用<strong>时间片轮转</strong>调度算法，计算各进程的等待时间、平均等待时间、周转时间、平均周转时间、带权周转时间、平均带权周转时间。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230129184754195.png\" alt=\"image-20230129184754195\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230129185103652.png\" alt=\"image-20230129185103652\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230129185248581.png\" alt=\"image-20230129185248581\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230129185315688.png\" alt=\"image-20230129185315688\" /></p>\n<hr />\n<p><strong>时间片为 5 的情况</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230129185611326.png\" alt=\"image-20230129185611326\" /></p>\n<hr />\n<p>若按照<strong>先来先服务</strong>调度算法</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230129185644418.png\" alt=\"image-20230129185644418\" /></p>\n<hr />\n<h3 id=\"时间片太大小的影响\"><a class=\"anchor\" href=\"#时间片太大小的影响\">#</a> 时间片太大 / 小的影响</h3>\n<p>如果<strong>时间片太大</strong>，使得每个进程都可以在一个时间片内就完成，</p>\n<ul>\n<li>\n<p>则时间片轮转调度算法 <code>退化</code> 为<strong>先来先服务</strong>调度算法，</p>\n<p>并且<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>会增大进程响应时间</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}会增大进程响应时间</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">会增大进程响应时间</span></span></span></span>。</p>\n<p>比如：系统中有 10 个进程在并发执行，如果时间片为 1 秒，则一个进程被响应可能需要等 9 秒...</p>\n<ul>\n<li>\n<p>也就是说，如果用户在自己进程的时间片外通过键盘发出调试命令，</p>\n<p>可能需要等待 9 秒才能被系统响应</p>\n</li>\n<li>\n<p>其实就是时间片太长了，导致后面的进程等待时间也会太长</p>\n</li>\n</ul>\n</li>\n<li>\n<p>因此<strong>时间片不能太大</strong>。</p>\n</li>\n</ul>\n<p>另一方面，进程调度、切换是有时间代价的（保存、恢复运行环境)，</p>\n<ul>\n<li>\n<p>因此如果<strong>时间片太小</strong>，会导致 <code>进程切换过于频繁</code> （不断地频繁切换用户态与内核态），系统会花大量的时间来处理进程切换，</p>\n<p>从而导致实际用于进程执行的时间比例减少。</p>\n</li>\n<li>\n<p>可见<strong>时间片也不能太小</strong>。</p>\n</li>\n</ul>\n<p>一般来说，设计时间片时要让切换进程的开销占比不超过 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">%</mi></mrow><annotation encoding=\"application/x-tex\">1\\%</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8056em;vertical-align:-0.0556em;\"></span><span class=\"mord\">1%</span></span></span></span></p>\n<h2 id=\"优先级调度算法\"><a class=\"anchor\" href=\"#优先级调度算法\">#</a> 优先级调度算法</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230129194948005.png\" alt=\"image-20230129194948005\" /></p>\n<hr />\n<p>例题：各进程到达就绪队列的时间、需要的运行时间、进程优先数如下表所示。使用<strong>非抢占式</strong>的<strong>优先级</strong>调度算法，分析进程运行情况。（注：<strong>优先数</strong>越大，<strong>优先级</strong>越高)</p>\n<h3 id=\"非抢占式的\"><a class=\"anchor\" href=\"#非抢占式的\">#</a> 非抢占式的</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230129191523357.png\" alt=\"image-20230129191523357\" /></p>\n<h3 id=\"抢占式的\"><a class=\"anchor\" href=\"#抢占式的\">#</a> 抢占式的</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230129193143525.png\" alt=\"image-20230129193143525\" /></p>\n<h3 id=\"静态动态优先级\"><a class=\"anchor\" href=\"#静态动态优先级\">#</a> 静态 / 动态优先级</h3>\n<p>就绪队列未必只有一个，可以按照不同优先级来组织。</p>\n<ul>\n<li>另外，也可以把优先级高的进程排在更靠近队头的位置</li>\n</ul>\n<p>根据优先级是否可以动态改变，可将优先级分为<strong>静态优先级</strong>和<strong>动态优先级</strong>两种。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>静态优先级</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}静态优先级</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">静态优先级</span></span></span></span>：</p>\n<ul>\n<li>创建进程时确定，之后一直不变。</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>动态优先级</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}动态优先级</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">动态优先级</span></span></span></span>：</p>\n<ul>\n<li>创建进程时有一个初始值，之后会根据情况动态地调整优先级。</li>\n</ul>\n<hr />\n<p><strong>如何合理地设置各类进程地优先级？</strong></p>\n<p>通常：</p>\n<ul>\n<li>系统进程优先级 <strong>高于</strong> 用户进程</li>\n<li>前台进程优先级 <strong>高于</strong> 后台进程</li>\n<li>操作系统更偏好  <code>I/O</code>  型进程（或称  <code>I/O</code>  繁忙型进程）</li>\n</ul>\n<p>注：与  <code>I/O</code>  型进程相对的是<strong>计算型进程</strong>（或称  <code>CPU</code>  繁忙型进程）</p>\n<p><code>I/O</code>  设备和  <code>CPU</code>  可以<strong>并行</strong>工作。如果优先让  <code>I/O</code>  繁忙型进程优先运行的话，</p>\n<ul>\n<li>则越有可能让  <code>I/O</code>  设备尽早地投入工作，则资源利用率、系统吞吐量都会得到提升</li>\n<li><code>I/O</code>  花费的时间一般比较长，尽早处理完  <code>I/O</code></li>\n</ul>\n<p>若采用  <code>CPU</code>  繁忙型进程的话，</p>\n<ul>\n<li><code>CPU</code>  优先于  <code>I/O</code> ，则  <code>CPU</code>  运行完之后，此时后备队列中没有队列了，需要等待  <code>I/O</code>  设备输入</li>\n</ul>\n<hr />\n<p><strong>如果采用的是动态优先级，什么时候应该调整？</strong></p>\n<p>可以从追求公平、提升资源利用率等角度考虑</p>\n<ul>\n<li>\n<p>如果某进程在就绪队列中等待了很长时间，则可以适当提升其优先级</p>\n</li>\n<li>\n<p>如果某进程占用处理机运行了很长时间，则可适当降低其优先级</p>\n</li>\n<li>\n<p>如果发现一个进程频繁地进行  <code>I/O</code>  操作，则可适当提升其优先级</p>\n</li>\n</ul>\n<p><code>HRRN</code>  高响应比优先调度算法，可以认为是动态地优先级调度算法</p>\n<h2 id=\"多级反馈队列调度算法\"><a class=\"anchor\" href=\"#多级反馈队列调度算法\">#</a> 多级反馈队列调度算法</h2>\n<p><code>FCFS</code>  算法的优点是公平</p>\n<p><code>SJF</code>  算法的优点是能尽快处理完短作业，平均等待 / 周转时间等参数很优秀</p>\n<p>时间片轮转调度算法可以让各个进程得到及时的响应</p>\n<p>优先级调度算法可以灵活地调整各种进程被服务的机会</p>\n<p>能否对其他算法做个折中权衡？得到一个综合表现优秀平衡的算法呢？</p>\n<ul>\n<li>多级反馈队列调度算法</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230129204837476.png\" alt=\"image-20230129204837476\" /></p>\n<p>由于进程源源不断地到来会使得高优先级的队列始终非空，而低优先级的队列需要等待高优先级的队列为空时才能使用，导致低优先级队列中的进程饥饿</p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230129204010547.png\" alt=\"image-20230129204010547\" /></p>\n<h2 id=\"总结-2\"><a class=\"anchor\" href=\"#总结-2\">#</a> 总结</h2>\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>可抢占？</th>\n<th>优点</th>\n<th>缺点</th>\n<th>会导致饥饿？</th>\n<th>补充</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>时间片轮转</td>\n<td>抢占式</td>\n<td>公平；适用于分时系统</td>\n<td>频繁切换有开销；不区分优先级</td>\n<td>不会</td>\n<td>时间片太大或太小导致的影响</td>\n</tr>\n<tr>\n<td>优先级调度</td>\n<td>有的抢占式的，有的非抢占式的</td>\n<td>区分优先级；适用于实时系统</td>\n<td>可能导致饥饿</td>\n<td>会</td>\n<td>动态 / 静态优先级。各类型型进程如何设置优先级？如何调整优先级</td>\n</tr>\n<tr>\n<td>多级反馈队列</td>\n<td>抢占式</td>\n<td>平衡优秀；6（9 翻了）</td>\n<td>一般不说它优缺点；不过可能导致饥饿</td>\n<td>会</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><strong>注</strong>：比起早期的批处理操作系统来说，由于计算机造价大幅降低，因此之后出现的交互式操作系统（包括分时操作系统、实时操作系统等）更注重系统的响应时间、公平性、平衡性等指标。</p>\n<ul>\n<li>而这几种算法恰好也能较好地满足交互式系统的需求。</li>\n</ul>\n<p>因此这三种算法适合用于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>交互式系统</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}交互式系统</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">交互式系统</span></span></span></span></p>\n<ul>\n<li>比如  <code>UNIX</code>  使用的就是多级反馈队列调度算法</li>\n</ul>\n<h1 id=\"进程同步与互斥\"><a class=\"anchor\" href=\"#进程同步与互斥\">#</a> 进程同步与互斥</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230129205753999.png\" alt=\"image-20230129205753999\" /></p>\n<h2 id=\"什么是进程同步\"><a class=\"anchor\" href=\"#什么是进程同步\">#</a> 什么是进程同步</h2>\n<h3 id=\"回顾异步性\"><a class=\"anchor\" href=\"#回顾异步性\">#</a> 回顾异步性</h3>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>异步</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}异步</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">异步</span></span></span></span>是指，</p>\n<ul>\n<li>在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而是<strong>走走停停</strong>，以不可预知的速度向前推进，这就是进程的异步性。</li>\n</ul>\n<p>由于系统的<strong>有限资源导致的</strong></p>\n<p>例如：老渣要和两个女孩并发约会</p>\n<p>一号的指令 1 ：老渣陪我吃饭</p>\n<p>一号的指令 2 ：老渣把心给我</p>\n<p>二号的指令 1 ：老渣把心给我</p>\n<p>二号的指令 2 ：老渣陪我吃饭</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112195333739.png\" alt=\"image-20230112195333739\" /></p>\n<p>与一号、二号的约会相当于对两个进程的处理，每个进程都有各自需要执行的指令。</p>\n<p>老渣的心相当于<strong>有限的系统资源</strong>。</p>\n<hr />\n<p>若女一号只想做老渣的初恋</p>\n<p>女二号只想交一个有恋爱经验的渣男</p>\n<p>那么，老渣在并发执行这两个约会进程的时候，就必须保证 “一号的指令 2” 一定要在 二号的指令 1” <strong>之前执行</strong>。</p>\n<p>操作系统需要提供 &quot;进程同步机制&quot; 来实现上述需求</p>\n<hr />\n<h3 id=\"回顾进程通信-管道通信\"><a class=\"anchor\" href=\"#回顾进程通信-管道通信\">#</a> 回顾进程通信 -- 管道通信</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230129212810491.png\" alt=\"image-20230129212810491\" /></p>\n<p>读进程和写进程并发地运行，由于并发必然导致异步性，</p>\n<ul>\n<li>因此 “写数据” 和 “读数据” 两个操作执行的先后顺序是不确定的。</li>\n</ul>\n<p>而实际应用中，又必须按照 “<strong>写数据→读数据</strong>” 的顺序来执行的。</p>\n<p>如何解决这种<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>异步</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}异步</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">异步</span></span></span></span>问题，</p>\n<ul>\n<li>就是 “进程<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>同步</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}同步</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">同步</span></span></span></span>” 所讨论的内容。</li>\n</ul>\n<h3 id=\"同步直接制约关系\"><a class=\"anchor\" href=\"#同步直接制约关系\">#</a> 同步（直接制约关系）</h3>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>同步</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}同步</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">同步</span></span></span></span>亦称<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>直接制约关系</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}直接制约关系</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">直接制约关系</span></span></span></span>，</p>\n<ul>\n<li>它是指为完成某种任务而建立的两个或多个进程，这些进程因为需要在某些位置上<strong>协调</strong>它们的<strong>工作次序</strong>而产生的制约关系。</li>\n<li>进程间的直接制约关系就是源于它们之间的相互合作。</li>\n</ul>\n<h2 id=\"进程互斥间接制约关系\"><a class=\"anchor\" href=\"#进程互斥间接制约关系\">#</a> 进程互斥（间接制约关系）</h2>\n<p>进程的 “并发” 需要 “共享” 的支持。各个并发执行的进程不可避免的需要共享一些系统资源</p>\n<ul>\n<li>比如内存，又比如打印机、摄像头这样的  <code>I/O</code>  设备</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112191158930.png\" alt=\"image-20230112191158930\" /></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>临界资源</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}临界资源</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">临界资源</span></span></span></span></p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>一个时间段内只允许一个进程使用</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\textcolor{red}{一个时间段内只允许一个进程使用}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">一个时间段内只允许一个进程使用</span></span></span></span> 的资源</li>\n</ul>\n<p>许多物理设备（比如摄像头、打印机）都属于临界资源。</p>\n<p>此外还有许多变量、数据、内存缓冲区等都属于临界资源。</p>\n<p>对临界资源的访问，必须<strong>互斥</strong>地进行。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>互斥</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}互斥</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">互斥</span></span></span></span>，亦称<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>间接制约关系</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}间接制约关系</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">间接制约关系</span></span></span></span>。</p>\n<ul>\n<li><strong>进程互斥</strong>指当一个进程访问某临界资源时，另一个想要访问该临界资源的进程<strong>必须等待</strong>。当前访问临界资源的进程访问结束，释放该资源之后另一个进程才能去访问临界资源。</li>\n</ul>\n<h3 id=\"对临界资源的互斥访问四个部分\"><a class=\"anchor\" href=\"#对临界资源的互斥访问四个部分\">#</a> 对临界资源的互斥访问（四个部分）</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230129213940492.png\" alt=\"image-20230129213940492\" /></p>\n<p><strong>注意</strong>：</p>\n<ul>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>临界区</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\textcolor{red}{临界区}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">临界区</span></span></span></span> 是进程中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>访问临界资源</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\textcolor{red}{访问临界资源}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">访问临界资源</span></span></span></span> 的代码段。</p>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>进入区</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\textcolor{red}{进入区}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">进入区</span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>退出区</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\textcolor{red}{退出区}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">退出区</span></span></span></span> 是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>负责实现互斥</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\textcolor{red}{负责实现互斥}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">负责实现互斥</span></span></span></span> 的代码段。</p>\n</li>\n<li>\n<p>临界区也可以称为 &quot;临界段&quot;</p>\n</li>\n</ul>\n<hr />\n<p>如果一个进程暂时不能进入临界区，</p>\n<ul>\n<li>\n<p>那么该进程是否应该一直占着处理机？</p>\n</li>\n<li>\n<p>该进程有没有可能一直进不了临界区？</p>\n</li>\n</ul>\n<h3 id=\"遵循的原则\"><a class=\"anchor\" href=\"#遵循的原则\">#</a> 遵循的原则</h3>\n<ol>\n<li>\n<p><strong>空闲让进</strong>。临界区空闲时，可以允许一个请求进入临界区的进程立即进入临界区；</p>\n</li>\n<li>\n<p><strong>忙则等待</strong>。当已有进程进入临界区时，其他试图进入临界区的进程必须等待；</p>\n</li>\n<li>\n<p><strong>有限等待</strong>。对请求访问的进程，应保证能在有限时间内进入临界区（保证不会饥饿）;</p>\n</li>\n<li>\n<p><strong>让权等待</strong>。当进程不能进入临界区时，应立即释放处理机，防止进程忙等待。</p>\n</li>\n</ol>\n<h2 id=\"整体框架-9\"><a class=\"anchor\" href=\"#整体框架-9\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230129215102372.png\" alt=\"image-20230129215102372\" /></p>\n<h1 id=\"进程互斥的软件实现方法\"><a class=\"anchor\" href=\"#进程互斥的软件实现方法\">#</a> 进程互斥的软件实现方法</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230129215232588.png\" alt=\"image-20230129215232588\" /></p>\n<p>学习提示:</p>\n<ol>\n<li>理解各个算法的思想、原理</li>\n<li>结合上小节学习的 “实现互斥的四个逻辑部分”，重点理解各算法在进入区、退出区都做了什么</li>\n<li>分析各算法存在的缺陷（结合 “实现互斥要遵循的四个原则” 进行分析）</li>\n</ol>\n<h2 id=\"单标志法\"><a class=\"anchor\" href=\"#单标志法\">#</a> 单标志法</h2>\n<p>算法思想：两个进程在<strong>访问完临界区后</strong>会把使用临界区的权限转交给另一个进程。</p>\n<ul>\n<li>也就是说<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>每个进程进入临界区的权限只能被另一个进程赋予</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}每个进程进入临界区的权限只能被另一个进程赋予</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">每个进程进入临界区的权限只能被另一个进程赋予</span></span></span></span></li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230129223624058.png\" alt=\"image-20230129223624058\" /></p>\n<p>turn 的初值为 0，即刚开始只允许 0 号进程进入临界区。</p>\n<p>若  <code>P1</code>  先上处理机运行，则会一直卡在 ⑤。直到  <code>P1</code>  的时间片用完，发生调度，切换  <code>P0</code>  上处理机运行。</p>\n<p>代码 ① 不会卡住  <code>P0</code> ， <code>P0</code>  可以正常访问临界区，在  <code>P0</code>  访问临界区期间即时切换回  <code>P1</code> ， <code>P1</code>  依然会卡在⑤。</p>\n<p>只有  <code>P0</code>  在退出区将 turn 改为 1 后， <code>P1</code>  才能进入临界区。</p>\n<p>因此，该算法可以实现 “<strong>同一时刻最多只允许一个进程访问临界区</strong>”</p>\n<hr />\n<p>turn 表示当前允许进入临界区的进程号，而只有当前允许进入临界区的进程在访问了临界区之后，才会修改 turn 的值。</p>\n<ul>\n<li>也就是说，对于临界区的访问，一定是按 P0→P1→P0→P1→...... 这样轮流访问。</li>\n</ul>\n<hr />\n<p>这种必须 “轮流访问” 带来的<strong>问题</strong>是，</p>\n<ul>\n<li>如果此时允许进入临界区的进程是  <code>P0</code> ，而  <code>P0</code>  一直<strong>不访问临界区</strong>，那么虽然此时临界区空闲，但是并不允许  <code>P1</code>  访问。</li>\n</ul>\n<p>因此，<strong>单标志法</strong>存在的<strong>主要问题</strong>是：</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>违背空闲让进原则</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}违背空闲让进原则</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">违背空闲让进原则</span></span></span></span>。</li>\n</ul>\n<h2 id=\"双标志先检查法\"><a class=\"anchor\" href=\"#双标志先检查法\">#</a> 双标志先检查法</h2>\n<p>算法思想：设置一个布尔型数组 flag [] ，数组中各个元素用来<strong>标记各进程想进入临界区的意愿</strong>，</p>\n<ul>\n<li>比如 “flag [0] = true” 意味着 0 号进程  <code>P0</code>  现在想要进入临界区。</li>\n</ul>\n<p>每个进程在进入临界区之前先检查当前有没有别的进程想进入临界区，</p>\n<ul>\n<li>如果没有，则把自身对应的标志 flag [i] 设为 true，之后开始访问临界区。</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230129225120954.png\" alt=\"image-20230129225120954\" /></p>\n<p>若按照 ①⑤②⑥③⑦.... 顺序执行， <code>P0</code>  和  <code>P1</code>  将会同时访问临界区。</p>\n<p>因此，<strong>双标志先检查法</strong>存在的<strong>主要问题</strong>是：</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>违背忙则等待原则</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}违背忙则等待原则</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">违背忙则等待原则</span></span></span></span>。</li>\n</ul>\n<p>原因在于，<strong>进入区</strong>的 “检查” 和 “上锁” <strong>两个处理不是一气呵成的</strong>。“检查” 后，“上锁” 前可能发生讲程切换</p>\n<h2 id=\"双标志后检查法\"><a class=\"anchor\" href=\"#双标志后检查法\">#</a> 双标志后检查法</h2>\n<p>算法思想：双标志先检查法的改版。前一个算法的问题是先 “检查” 后 “上锁” ，但是这两个操作又无法一气呵成，因此导致了两个进程同时进入临界区的问题。</p>\n<ul>\n<li>因此，人们又想到先 “上锁” 后 “检查” 的方法，来避免上述问题。</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230129225707180.png\" alt=\"image-20230129225707180\" /></p>\n<p>若按照 ①⑤②⑥.... 的顺序执行， <code>P0</code>  和  <code>P1</code>  将都无法进入临界区</p>\n<ul>\n<li>相当于<strong>死锁</strong>，两方都一直等待对方</li>\n</ul>\n<p>因此，双标志后检查法虽然<strong>解决了 “忙则等待”</strong> 的问题，</p>\n<ul>\n<li>但是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>又违背了空闲让进和有限等待原则</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}又违背了空闲让进和有限等待原则</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">又违背了空闲让进和有限等待原则</span></span></span></span></li>\n</ul>\n<p>会因各进程都长期无法访问临界资源而产生 “ <code>饥饿</code> ” 现象。</p>\n<p>两个进程都争着想进入临界区，但是谁也不让谁，最后谁都无法进入临界区。</p>\n<h2 id=\"peterson-算法\"><a class=\"anchor\" href=\"#peterson-算法\">#</a> Peterson 算法</h2>\n<p>算法思想：双标志后检查法中，两个进程都争着想进入临界区，但是谁也不让谁，最后谁都无法进入临界区。</p>\n<p><code>Gary L.Peterson</code>  想到了一种方法，如果双方都争着想进入临界区，那可以让进程尝试 “孔融让梨” ，主动让对方先使用临界区。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230129230951082.png\" alt=\"image-20230129230951082\" /></p>\n<p>两种双标志法的问题都是由于进入区的几个操作不能一气呵成导致的。</p>\n<p>我们可以推理验证在  <code>Peterson</code>  算法中，两个进程进入区中的各个操作按不同的顺序穿插执行会发生什么情况:</p>\n<ul>\n<li>\n<p>①②③⑥⑦⑧...</p>\n</li>\n<li>\n<p>①⑥②③...</p>\n</li>\n</ul>\n<p>因为 turn 只有一个，必然有一个判断是 false，所以不会产生死锁</p>\n<p>抛开 turn 不谈，就回到了双标志后检查法，所以不会出现<strong>单标志法的问题</strong></p>\n<ul>\n<li>单标志法的问题：如果此时允许进入临界区的进程是  <code>P0</code> ，而  <code>P0</code>  一直<strong>不访问临界区</strong>，那么虽然此时临界区空闲，但是并不允许  <code>P1</code>  访问。</li>\n</ul>\n<hr />\n<p><strong>进入区</strong>:</p>\n<ol>\n<li>主动争取；</li>\n<li>主动谦让；</li>\n<li>检查对方是否也想使用，且最后一次是不是自己说了 “客气话”</li>\n</ol>\n<hr />\n<p><strong>例如</strong>：</p>\n<ul>\n<li>\n<p>香香想用马桶，如果需要的话，可以先让臭臭用，</p>\n<p>检查发现臭臭不需要，于是香香访问临界区 —―马桶。</p>\n</li>\n<li>\n<p>臭臭想用马桶，可以让香香先用</p>\n<p>香香想用马桶，可以让臭臭先用</p>\n<p>经检查发现香香也要使用，但最后是臭臭说了 &quot;客气话&quot;，因此臭臭循环等待</p>\n</li>\n</ul>\n<hr />\n<p><code>Peterson</code>  算法用软件方法解决了进程互斥问题，</p>\n<ul>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>遵循了空闲让进、忙则等待、有限等待三个原则</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}遵循了空闲让进、忙则等待、有限等待三个原则</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">遵循了空闲让进、忙则等待、有限等待三个原则</span></span></span></span></p>\n</li>\n<li>\n<p>但是依然<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>未遵循让权等待</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}未遵循让权等待</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">未遵循让权等待</span></span></span></span>的原则。</p>\n</li>\n</ul>\n<p><code>Peterson</code>  算法相较于之前三种软件解决方案来说，是最好的，但依然不够好。</p>\n<h2 id=\"整体框架-10\"><a class=\"anchor\" href=\"#整体框架-10\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230129232806721.png\" alt=\"image-20230129232806721\" /></p>\n<p>上述并不是概览，不同的算法应该相应的分析</p>\n<h1 id=\"进程互斥的硬件实现方法\"><a class=\"anchor\" href=\"#进程互斥的硬件实现方法\">#</a> 进程互斥的硬件实现方法</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230201220123976.png\" alt=\"image-20230201220123976\" /></p>\n<h2 id=\"中断屏蔽方法\"><a class=\"anchor\" href=\"#中断屏蔽方法\">#</a> 中断屏蔽方法</h2>\n<p>利用 “<strong>开 / 关中断指令</strong>” 实现（与原语的实现思想相同，即在某进程开始访问临界区到结束访问为止都不允许被中断，也就不能发生进程切换，因此也不可能发生两个同时访问临界区的情况）</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230201220233739.png\" alt=\"image-20230201220233739\" /></p>\n<p>优点：简单、高效</p>\n<p>缺点：</p>\n<ul>\n<li>\n<p>不适用于多处理机（多个处理机访问同一个临界区，导致其中剩余的处理机会一值等待）；</p>\n</li>\n<li>\n<p><strong>只适用于操作系统内核进程</strong>；</p>\n</li>\n<li>\n<p>不适用于用户进程（因为开 / 关中断指令只能运行在内核态，这组指令如果能让用户随意使用会很危险）</p>\n</li>\n</ul>\n<h2 id=\"testandset\"><a class=\"anchor\" href=\"#testandset\">#</a> TestAndSet</h2>\n<p>简称  <code>TS</code>  指令，也有地方称为  <code>TestAndSetLock</code>  指令，或  <code>TSL</code>  指令</p>\n<p><code>TSL</code>  指令是用硬件实现的，执行的过程不允许被中断，只能一气呵成。以下是用 C 语言描述的逻辑</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230201221855703.png\" alt=\"image-20230201221855703\" /></p>\n<p>若刚开始  <code>lock</code>  是 false，则  <code>TSL</code>  返回的  <code>old</code>  值为 false， <code>while</code>  循环条件不满足，直接跳过循环，进入临界区。若刚开始  <code>lock</code>  是  <code>true</code> ，则执行  <code>TLS</code>  后  <code>old</code>  返回的值为  <code>true</code> ， <code>while</code>  循环条件满足，会一直循环，直到当前访问临界区的进程在退出区进行 “解锁”。</p>\n<p>相比软件实现方法， <code>TSL</code>  指令把 “上锁” 和 “检查” 操作用硬件的方式变成了<strong>一气呵成的原子操作</strong>。</p>\n<p><strong>优点</strong>：</p>\n<ul>\n<li>\n<p>实现简单，无需像软件实现方法那样严格检查是否会有逻辑漏洞；</p>\n</li>\n<li>\n<p>适用于多处理机环境</p>\n<p>其他进程会卡在 ts 循环里面</p>\n</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>不满足 “<strong>让权等待</strong>” 原则，暂时无法进入临界区的进程会占用  <code>CPU</code>  并循环执行  <code>TSL</code>  指令，从而导致 “忙等” 。</li>\n</ul>\n<h2 id=\"swap指令\"><a class=\"anchor\" href=\"#swap指令\">#</a> Swap 指令</h2>\n<p>有的地方也叫  <code>Exchange</code>  指令，或简称  <code>XCHG</code>  指令。<br />\n <code>Swap</code>  指令是用硬件实现的，执行的过程不允许被中断，只能一气呵成。以下是用 C 语言描述的逻辑</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230201222829718.png\" alt=\"image-20230201222829718\" /></p>\n<p>逻辑上来看  <code>Swap</code>  和  <code>TSL</code>  并无太大区别，都是先记录下此时临界区是否已经被上锁（记录在  <code>old</code>  变量上)，再将上锁标记  <code>lock</code>  设置为 true，最后检查  <code>old</code> ，如果  <code>old</code>  为 false 则说明之前没有别的进程对临界区上锁，则可跳出循环，进入临界区。</p>\n<p><strong>优点</strong>：</p>\n<ul>\n<li>\n<p>实现简单，无需像软件实现方法那样严格检查是否会有逻辑漏洞；</p>\n</li>\n<li>\n<p>适用于多处理机环境</p>\n<p>其他进程会卡在 ts 循环里面</p>\n</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>不满足 “<strong>让权等待</strong>” 原则，暂时无法进入临界区的进程会占用  <code>CPU</code>  并循环执行  <code>Swap</code>  指令，从而导致 “忙等” 。</li>\n</ul>\n<h2 id=\"整体框架-11\"><a class=\"anchor\" href=\"#整体框架-11\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230201223231647.png\" alt=\"image-20230201223231647\" /></p>\n<h1 id=\"信号量机制\"><a class=\"anchor\" href=\"#信号量机制\">#</a> 信号量机制</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230201224127062.png\" alt=\"image-20230201224127062\" /></p>\n<p>复习回顾 + 思考：之前学习的这些进程互斥的解决方案分别存在哪些问题？</p>\n<p>进程互斥的四种软件实现方式（单标志法、双标志先检查、双标志后检查、 <code>Peterson</code>  算法)</p>\n<p>进程互斥的三种硬件实现方式（中断屏蔽方法、 <code>TS/TSL</code>  指令、 <code>Swap/XCHG</code>  指令)</p>\n<ol>\n<li>\n<p>在双标志先检查法中，<strong>进入区的 “检查”、“上锁” 操作无法一气呵成</strong>，从而导致了两个进程有可能同时进入临界区的问题；</p>\n</li>\n<li>\n<p>所有的解决方案都<strong>无法实现 “让权等待”</strong></p>\n</li>\n</ol>\n<p>1965 年，荷兰学者  <code>Dijkstra</code>  提出了一种卓有成效的实现进程互斥、同步的方法――信号量机制</p>\n<hr />\n<p>用户进程可以通过使用操作系统提供的<strong>一对原语</strong>来对<strong>信号量</strong>进行操作，从而很方便的实现了进程互斥、进程同步。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>信号量</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}信号量</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">信号量</span></span></span></span> ：</p>\n<ul>\n<li>\n<p>其实就是一个变量（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"blue\"><mtext>可以是一个整数，也可以是更复杂的记录型变量</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{blue}可以是一个整数，也可以是更复杂的记录型变量</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:blue;\">可以是一个整数，也可以是更复杂的记录型变量</span></span></span></span>)，</p>\n</li>\n<li>\n<p>可以用一个信号量来<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>表示系统中某种资源的数量</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}表示系统中某种资源的数量</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">表示系统中某种资源的数量</span></span></span></span></p>\n<p>比如：系统中只有一台打印机，就可以设置一个初值为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 的信号量。</p>\n</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>原语</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}原语</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">原语</span></span></span></span></p>\n<ul>\n<li>是一种特殊的程序段，其<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>执行只能一气呵成，不可被中断</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}执行只能一气呵成，不可被中断</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">执行只能一气呵成，不可被中断</span></span></span></span>。</li>\n<li>原语是由<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>关中断</mtext><mi mathvariant=\"normal\">/</mi><mtext>开中断指令</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}关中断/开中断指令</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">关中断</span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord cjk_fallback\" style=\"color:red;\">开中断指令</span></span></span></span>实现的。</li>\n<li>软件解决方案的主要问题是由 “进入区的各种操作无法一气呵成” ，因此如果能把<strong>进入区、退出区的操作都用 “原语” 实现</strong>，使这些操作能 “一气呵成” 就能避免问题。</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>一对原语</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}一对原语</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">一对原语</span></span></span></span>:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext mathvariant=\"monospace\">wait(S)</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}\\texttt{wait(S)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord texttt\" style=\"color:red;\">wait(S)</span></span></span></span></span> 原语和 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext mathvariant=\"monospace\">signal(S)</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}\\texttt{signal(S)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9167em;vertical-align:-0.2222em;\"></span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord texttt\" style=\"color:red;\">signal(S)</span></span></span></span></span> 原语</li>\n<li>可以把原语理解为我们自己写的函数，函数名分别为  <code>wait</code>  和  <code>signal</code> ，</li>\n<li>括号里的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>信号量</mtext><mtext mathvariant=\"monospace\">S</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}信号量 \\texttt{S}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">信号量</span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord texttt\" style=\"color:red;\">S</span></span></span></span></span> 其实就是函数调用时传入的一个参数。</li>\n</ul>\n<p><code>wait</code> 、 <code>signal</code>  原语常<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>简称为</mtext><mtext mathvariant=\"monospace\">P、V</mtext><mtext>操作</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}简称为 \\texttt{P、V}操作</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">简称为</span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord texttt\" style=\"color:red;\">P</span><span class=\"mord texttt cjk_fallback\" style=\"color:red;\">、</span><span class=\"mord texttt\" style=\"color:red;\">V</span></span><span class=\"mord cjk_fallback\" style=\"color:red;\">操作</span></span></span></span>（来自荷兰语 proberen ：<strong>尝试</strong> 和 verhogen ：<strong>增加</strong>）</p>\n<ul>\n<li>因此，做题的时候常把  <code>wait(S)</code> 、 <code>signal(S)</code>  两个操作分别写为  <code>P(S)</code> 、 <code>V(S)</code></li>\n</ul>\n<h2 id=\"整形信号量\"><a class=\"anchor\" href=\"#整形信号量\">#</a> 整形信号量</h2>\n<p>用一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>整数型的变量</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}整数型的变量</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">整数型的变量</span></span></span></span>作为信号量，用来<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>表示系统中某种资源的数量</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}表示系统中某种资源的数量</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">表示系统中某种资源的数量</span></span></span></span>。</p>\n<p>与普通整数变量的区别：对信号量的操作只有三种，</p>\n<ul>\n<li>即初始化、 <code>P</code>  操作、 <code>V</code>  操作</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230201225118579.png\" alt=\"image-20230201225118579\" /></p>\n<p><code>P</code>  操作中：“检查” 和 “上锁” 一气呵成，避免了并发、异步导致的问题</p>\n<ul>\n<li>因为这是原语</li>\n</ul>\n<p>存在的问题：不满足 “让权等待” 原则，会发生 “忙等”</p>\n<ul>\n<li>卡在  <code>while</code>  循环中，因为这是原语，不可中断，会一直卡在  <code>while</code>  循环中，除非有资源</li>\n</ul>\n<p>例如：<img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230201225128992.png\" alt=\"image-20230201225128992\" /></p>\n<h2 id=\"记录型信号量\"><a class=\"anchor\" href=\"#记录型信号量\">#</a> 记录型信号量</h2>\n<p>整型信号量的缺陷是存在 “忙等” 问题，因此人们又提出了 “记录型信号量”，即用记录型数据结构表示的信号量。</p>\n<p>Java 中典型的 <a href=\"https://blog.csdn.net/qq_67720621/article/details/127708498\">AQS</a></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230201230543927.png\" alt=\"image-20230201230543927\" /></p>\n<p>若剩余资源 &gt; 0 的话，说明没有进程在等待这种资源，就不需要唤醒了</p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/PV-16752652694592.gif\" alt=\"PV\" /></p>\n<hr />\n<p>在考研题目中  <code>wait(S)</code> 、 <code>signal(S)</code>  也可以记为  <code>P(S)</code> 、 <code>V(S)</code>  ,</p>\n<ul>\n<li>这对原语可用于实现系统资源的 “申请” 和 “释放”。</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext mathvariant=\"monospace\">S.value</mtext><mtext>的初值</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}\\texttt{S.value} 的初值</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord texttt\" style=\"color:red;\">S.value</span></span><span class=\"mord cjk_fallback\" style=\"color:red;\">的初值</span></span></span></span>表示系统中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>某种资源的数目</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}某种资源的数目</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">某种资源的数目</span></span></span></span></p>\n<p>对信号量  <code>S</code>  的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>一次</mtext><mtext mathvariant=\"monospace\">Р</mtext><mtext>操作</mtext></mstyle><mtext>意味着进程</mtext><mstyle mathcolor=\"red\"><mtext>请求一个单位的该类资源</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\textcolor{red}{一次 \\texttt{Р}操作}意味着进程\\textcolor{red}{请求一个单位的该类资源}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">一次</span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord texttt cyrillic_fallback\" style=\"color:red;\">Р</span></span><span class=\"mord cjk_fallback\" style=\"color:red;\">操作</span><span class=\"mord cjk_fallback\">意味着进程</span><span class=\"mord cjk_fallback\" style=\"color:red;\">请求一个单位的该类资源</span></span></span></span></p>\n<ul>\n<li>\n<p>因此需要执行  <code>S.value--</code> ，表示资源数减 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> ，</p>\n</li>\n<li>\n<p>当  <code>S.value &lt; 0</code>  时表示该类资源已分配完毕，因此进程应调用  <code>block</code>  原语进行<strong>自我阻塞</strong>（当前运行的进程<strong>从运行态→阻塞态</strong>)，主动放弃处理机，并插入该类资源的等待队列  <code>S.L</code>  中。</p>\n</li>\n<li>\n<p>可见，<strong>该机制遵循了 “让权等待” 原则</strong>，不会出现 “忙等” 现象。</p>\n</li>\n</ul>\n<p>对信号量  <code>S</code>  的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>一次</mtext><mtext mathvariant=\"monospace\">V</mtext><mtext>操作</mtext></mstyle><mtext>意味着进程</mtext><mstyle mathcolor=\"red\"><mtext>释放一个单位的该类资源</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\textcolor{red}{一次 \\texttt{V}操作}意味着进程\\textcolor{red}{释放一个单位的该类资源}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">一次</span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord texttt\" style=\"color:red;\">V</span></span><span class=\"mord cjk_fallback\" style=\"color:red;\">操作</span><span class=\"mord cjk_fallback\">意味着进程</span><span class=\"mord cjk_fallback\" style=\"color:red;\">释放一个单位的该类资源</span></span></span></span></p>\n<ul>\n<li>因此需要执行  <code>S.value++</code> ，表示资源数加 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>，</li>\n<li>若加 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 后仍是  <code>S.value &lt;=0</code> ，表示依然有进程在等待该类资源，因此应调用  <code>wakeup</code>  原语<strong>唤醒等待队列中的第一个进程</strong>（被唤醒进程<strong>从阻塞态→就绪态</strong>）。</li>\n</ul>\n<h2 id=\"整体框架-12\"><a class=\"anchor\" href=\"#整体框架-12\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230201233812333.png\" alt=\"image-20230201233812333\" /></p>\n<p>注：若考试中出现  <code>P(S)</code> 、 <code>V(S)</code>  的操作，除非特别说明，否则默认  <code>S</code>  为记录型信号量。</p>\n<h1 id=\"用信号量机制实现进程互斥-同步-前驱关系\"><a class=\"anchor\" href=\"#用信号量机制实现进程互斥-同步-前驱关系\">#</a> 用信号量机制实现进程互斥、同步、前驱关系</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230201234139626.png\" alt=\"image-20230201234139626\" /></p>\n<h2 id=\"信号量机制实现进程互斥\"><a class=\"anchor\" href=\"#信号量机制实现进程互斥\">#</a> 信号量机制实现进程互斥</h2>\n<ol>\n<li>\n<p>分析并发进程的关键活动，划定临界区（如：对临界资源打印机的访问就应放在临界区)</p>\n</li>\n<li>\n<p>设置<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>互斥信号量</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}互斥信号量</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">互斥信号量</span></span></span></span>  <code>mutex</code> ，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>初值为</mtext><mn>1</mn></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}初值为 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">初值为</span><span class=\"mord\" style=\"color:red;\">1</span></span></span></span></p>\n</li>\n<li>\n<p>在临界区之前执行  <code>P(mutex)</code></p>\n</li>\n<li>\n<p>在临界区之后执行  <code>V(mutex)</code></p>\n</li>\n</ol>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230202001741953.png\" alt=\"image-20230202001741953\" /></p>\n<p>要会自己定义记录型信号量，但如果题目中没特别说明，可以把信号量的声明简写成这种形式</p>\n<ul>\n<li><code>semaphore mytex = 1</code></li>\n</ul>\n<hr />\n<p><strong>注意</strong>：对不同的临界资源需要设置不同的互斥信号量</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230202001958999.png\" alt=\"image-20230202001958999\" /></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext mathvariant=\"monospace\">P、V</mtext><mtext>操作必须成对出现</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}\\texttt{P、V} 操作必须成对出现</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord texttt\" style=\"color:red;\">P</span><span class=\"mord texttt cjk_fallback\" style=\"color:red;\">、</span><span class=\"mord texttt\" style=\"color:red;\">V</span></span><span class=\"mord cjk_fallback\" style=\"color:red;\">操作必须成对出现</span></span></span></span></p>\n<ul>\n<li>缺少  <code>P(mutex)</code>  就不能保证临界资源的互斥访问</li>\n<li>缺少  <code>V(mutex)</code>  会导致资源用不被释放，等待进程永不被唤醒</li>\n</ul>\n<h2 id=\"用信号量机制实现进程同步\"><a class=\"anchor\" href=\"#用信号量机制实现进程同步\">#</a> 用信号量机制实现进程同步</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230202002411247.png\" alt=\"image-20230202002411247\" /></p>\n<p>比如， <code>P1</code> 、 <code>P2</code>  并发执行，由于存在异步性，因此二者交替推进的次序是不确定的。</p>\n<p>若  <code>P2</code>  的 “代码 4” 要基于  <code>P1</code>  的 “代码 1” 和 “代码 2 ” 的运行结果才能执行，</p>\n<ul>\n<li>那么我们就必须保证 “代码 4” 一定是在 “代码 2 ” 之后才会执行。</li>\n</ul>\n<p>这就是进程同步问题，让本来异步并发的进程互相配合，有序推进。</p>\n<hr />\n<p>用信号量实现进程同步</p>\n<ol>\n<li>\n<p>分析什么地方需要实现 “同步关系” ，即必须保证 “一前一后” 执行的两个操作（或两句代码）</p>\n</li>\n<li>\n<p>设置<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>同步信号量</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}同步信号量</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">同步信号量</span></span></span></span> S，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>初始为</mtext><mn>0</mn></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}初始为0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">初始为</span><span class=\"mord\" style=\"color:red;\">0</span></span></span></span></p>\n</li>\n<li>\n<p>在 “<strong>前操作</strong>” <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>之后</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}之后</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">之后</span></span></span></span>执行  <code>V(S)</code></p>\n</li>\n<li>\n<p>在 “<strong>后操作</strong>” <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>之前</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}之前</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">之前</span></span></span></span>执行  <code>P(S)</code></p>\n</li>\n</ol>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230202003110757.png\" alt=\"image-20230202003110757\" /></p>\n<p>若先执行到  <code>V(S)</code>  操作，则  <code>S++</code>  后  <code>S=1</code> 。</p>\n<ul>\n<li>之后当执行到  <code>P(S)</code>  操作时，由于  <code>S=1</code>  ，表示有可用资源，会执行  <code>S--</code>  ， <code>S</code>  的值变回  <code>0</code> ， <code>P2</code>  进程不会执行  <code>block</code>  原语，而是继续往下执行代码 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span></span></span></span>。</li>\n<li>说明代码 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> 肯定是先于代码 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span></span></span></span> 执行的</li>\n</ul>\n<p>若先执行到  <code>P(S)</code>  操作，由于  <code>S=0</code> ， <code>S--</code>  后  <code>S=-1</code> ，表示此时没有可用资源，</p>\n<ul>\n<li>因此  <code>P</code>  操作中会执行  <code>block</code>  原语，主动请求阻塞。之后当执行完代码 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span>，继而执行  <code>V(S)</code>  操作， <code>S++</code> ，使 S 变回 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>，由于此时有进程在该信号量对应的阻塞队列中，因此会在  <code>V</code>  操作中执行  <code>wakeup</code>  原语，唤醒  <code>P2</code>  进程。这样  <code>P2</code>  就可以继续执行代码 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span></span></span></span> 了</li>\n</ul>\n<p>可以理解为  <code>Java</code>  中的  <code>LockSupport.park()</code>  与  <code>LockSupport.unpark(...)</code></p>\n<ul>\n<li><code>LockSupport.park()</code>  对应  <code>P(S)</code></li>\n<li><code>LockSupport.unpark(...)</code>   对应  <code>V(S)</code></li>\n</ul>\n<p><a href=\"https://blog.csdn.net/qq_67720621/article/details/127681204\">LockSupport 与线程中断</a></p>\n<hr />\n<h2 id=\"用信号量机制实现前驱关系\"><a class=\"anchor\" href=\"#用信号量机制实现前驱关系\">#</a> 用信号量机制实现前驱关系！！</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230202005301540.png\" alt=\"image-20230202005301540\" /></p>\n<h2 id=\"整体框架-13\"><a class=\"anchor\" href=\"#整体框架-13\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230202005851995.png\" alt=\"image-20230202005851995\" /></p>\n<p>除了互斥、同步问题外，还会考察有多个资源的问题，有多少资源就把信号量初值设为多少。</p>\n<ul>\n<li>申请资源时进行  <code>P</code>  操作，释放资源时进行  <code>V</code>  操作即可</li>\n</ul>\n<h1 id=\"生产者-消费者问题\"><a class=\"anchor\" href=\"#生产者-消费者问题\">#</a> 生产者 - 消费者问题</h1>\n<p>系统中有一组生产者进程和一组消费者进程，生产者进程每次生产一个产品放入缓冲区，消费者进程每次从缓冲区中取出一个产品并使用。（注：这里的 “产品” 理解为某种数据）</p>\n<p>生产者、消费者共享一个初始为空、大小为 n 的缓冲区。</p>\n<p>只有<strong>缓冲区没满</strong>时，生产者才能把产品放入缓冲区，否则必须等待。</p>\n<ul>\n<li>同步关系。缓冲区满时，生产者要等待消费者取走产品</li>\n</ul>\n<p>只有<strong>缓冲区不空</strong>时，消费者才能从中取出产品，否则必须等待。</p>\n<ul>\n<li>同步关系。缓冲区为空时，消费者要等待生产者放入产品</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230202165415248.png\" alt=\"image-20230202165415248\" /></p>\n<p><strong>缓冲区是临界资源，各进程必须互斥地访问</strong></p>\n<ul>\n<li>若其他进程并发地向缓冲区放入数据，会导致之前的数据会被覆盖</li>\n</ul>\n<hr />\n<p>如何用信号量机制（ <code>P</code>  、 <code>V</code>  操作）实现生产者、消费者进程的这些功能呢？</p>\n<p>信号量机制可实现互斥、同步、对一类系统资源的申请和释放。</p>\n<ul>\n<li>\n<p>设置初值为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 的互斥信号量</p>\n</li>\n<li>\n<p>设置初值为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> 的同步信号量（实现 “一前一后”）</p>\n</li>\n<li>\n<p>设置一个信号量，初始值即为资源的数量（本质上也属于 “同步问题”，若无空闲资源，则申请资源的进程需要等待别的进程释放资源后才能继续往下执行)</p>\n</li>\n</ul>\n<hr />\n<h2 id=\"pv-操作题目分析步骤\"><a class=\"anchor\" href=\"#pv-操作题目分析步骤\">#</a> PV 操作题目分析步骤</h2>\n<ol>\n<li>\n<p>关系分析。找出题目中描述的各个进程，分析它们之间的同步</p>\n</li>\n<li>\n<p>整理思路。根据各进程的操作流程确定  <code>P</code> 、 <code>V</code>  操作的大致顺序。</p>\n</li>\n<li>\n<p>设置信号量。设置需要的信号量，并根据题目条件确定信号量初值。</p>\n<p>(互斥信号量初值一般为 1，同步信号量的初始值要看对应资源的初始值是多少）</p>\n</li>\n</ol>\n<p>生产者每次要消耗（P）一个空闲缓冲区，并生产（V）一个产品</p>\n<p>消费者每次要消耗（P）一个产品，并且释放一个空闲缓冲区（V）</p>\n<p>往缓冲区中放入 / 取走产品需要互斥</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230202171357580.png\" alt=\"image-20230202171357580\" /></p>\n<h2 id=\"能否改变相邻-p-v-操作的顺序\"><a class=\"anchor\" href=\"#能否改变相邻-p-v-操作的顺序\">#</a> 能否改变相邻 P、V 操作的顺序？</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230202171529210.png\" alt=\"image-20230202171529210\" /></p>\n<p>若此时缓冲区内已经放满产品，则  <code>empty=0</code> ， <code>full=n</code> 。</p>\n<p>则生产者进程执行 ① 使  <code>mutex</code>  变为 0 ，再执行 ② ，由于已没有空闲缓冲区，因此生产者被阻塞。由于生产者阻塞，因此切换回消费者进程。消费者进程执行 ③ ，由于  <code>mutex</code>  为 0，即生产者还没释放对临界资源的 “锁”，因此消费者也被阻塞。</p>\n<p>这就造成了生产者等待消费者释放空闲缓冲区，而消费者又等待生产者释放临界区的情况，生产者和消费者循环等待被对方唤醒，出现 “<strong>死锁</strong>”。</p>\n<p>同样的，若缓冲区中没有产品，即  <code>full=0</code> ， <code>empty=n</code> 。按③④①的顺序执行就会发生死锁。</p>\n<p>因此，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>实现互斥的</mtext><mtext mathvariant=\"monospace\">P</mtext><mtext>操作一定要在实现同步的</mtext><mtext mathvariant=\"monospace\">P</mtext><mtext>操作之后</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}实现互斥的\\texttt{P}操作一定要在实现同步的\\texttt{P}操作之后</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">实现互斥的</span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord texttt\" style=\"color:red;\">P</span></span><span class=\"mord cjk_fallback\" style=\"color:red;\">操作一定要在实现同步的</span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord texttt\" style=\"color:red;\">P</span></span><span class=\"mord cjk_fallback\" style=\"color:red;\">操作之后</span></span></span></span>。</p>\n<p><code>V</code>  操作不会导致进程阻塞，因此<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>两个V操作顺序可以交换</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}两个\\text{V}操作顺序可以交换</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">两个</span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord\" style=\"color:red;\">V</span></span><span class=\"mord cjk_fallback\" style=\"color:red;\">操作顺序可以交换</span></span></span></span></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230202172147588.png\" alt=\"image-20230202172147588\" /></p>\n<p>若放到  <code>PV</code>  操作之间会导致并发度降低，消费者花费更多的时间去使用产品，此时还没有释放临界资源，会导致生产者不断地等待消费者。</p>\n<ul>\n<li>例如：业务代码放入核心代码里</li>\n</ul>\n<h2 id=\"java-案例\"><a class=\"anchor\" href=\"#java-案例\">#</a> Java 案例</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Deque</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LinkedList</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Random</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Condition</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Lock</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ReentrantLock</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProducerConsumerByLock</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 互斥资源</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 最大容量</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> maxSize <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Lock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Condition</span> full <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Condition</span> empty <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Producer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Consumer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">//CompletableFuture.runAsync (new Consumer ()); 产生的进程默认是守护进程</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// 生产者</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Producer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">produce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> maxSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"产品已满, 等待消费者进行消费, 当前生产者: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                        <span class=\"token comment\">// 阻塞生产者，并释放当前线程的锁</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                            full<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    <span class=\"token comment\">// 生产产品</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    queue<span class=\"token punctuation\">.</span><span class=\"token function\">offerLast</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    <span class=\"token comment\">// 日志打印，业务逻辑尽量放在锁外面，这里只是为了顺序打印到控制台</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前生产者生产产品 \"</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", 当前生产者: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    <span class=\"token comment\">// 唤醒其他所有的消费者与生产者</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    empty<span class=\"token punctuation\">.</span><span class=\"token function\">signalAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                    full<span class=\"token punctuation\">.</span><span class=\"token function\">signalAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 并发，让其他生产者也参与竞争</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token function\">produce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token comment\">// 消费者</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Consumer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token comment\">// 消费产品</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">consume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"产品为空, 等待生产者进行生产, 当前消费者: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                        <span class=\"token comment\">// 阻塞消费者者，并释放当前线程的锁</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                            empty<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                    <span class=\"token comment\">// 从缓冲区获取资源</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                    x <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                    <span class=\"token comment\">// 日志打印，业务逻辑尽量放在锁外面，这里只是为了顺序打印到控制台</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消费者消费产品 \"</span> <span class=\"token operator\">+</span> x <span class=\"token operator\">+</span> <span class=\"token string\">\", 当前消费者: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                    <span class=\"token comment\">// 唤醒其他所有的消费者与生产者</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                    empty<span class=\"token punctuation\">.</span><span class=\"token function\">signalAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 并发，让其他消费者也参与竞争</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                    full<span class=\"token punctuation\">.</span><span class=\"token function\">signalAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                    lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                <span class=\"token comment\">// 防止一瞬间消费完成</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>            <span class=\"token function\">consume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>stdout</strong>：</p>\n<pre><code>当前生产者生产产品 1, 当前生产者: ForkJoinPool.commonPool-worker-9\n当前生产者生产产品 1, 当前生产者: ForkJoinPool.commonPool-worker-11\n当前生产者生产产品 1, 当前生产者: ForkJoinPool.commonPool-worker-2\n消费者消费产品 1, 当前消费者: ForkJoinPool.commonPool-worker-4\n消费者消费产品 1, 当前消费者: ForkJoinPool.commonPool-worker-6\n消费者消费产品 1, 当前消费者: ForkJoinPool.commonPool-worker-13\n产品为空, 等待生产者进行生产, 当前消费者: ForkJoinPool.commonPool-worker-6\n当前生产者生产产品 1, 当前生产者: ForkJoinPool.commonPool-worker-2\n消费者消费产品 1, 当前消费者: ForkJoinPool.commonPool-worker-6\n产品为空, 等待生产者进行生产, 当前消费者: ForkJoinPool.commonPool-worker-4\n产品为空, 等待生产者进行生产, 当前消费者: ForkJoinPool.commonPool-worker-13\n当前生产者生产产品 1, 当前生产者: ForkJoinPool.commonPool-worker-2\n消费者消费产品 1, 当前消费者: ForkJoinPool.commonPool-worker-4\n产品为空, 等待生产者进行生产, 当前消费者: ForkJoinPool.commonPool-worker-13\n当前生产者生产产品 1, 当前生产者: ForkJoinPool.commonPool-worker-9\n消费者消费产品 1, 当前消费者: ForkJoinPool.commonPool-worker-13\n当前生产者生产产品 1, 当前生产者: ForkJoinPool.commonPool-worker-11\n消费者消费产品 1, 当前消费者: ForkJoinPool.commonPool-worker-6\n当前生产者生产产品 1, 当前生产者: ForkJoinPool.commonPool-worker-9\n消费者消费产品 1, 当前消费者: ForkJoinPool.commonPool-worker-13\n当前生产者生产产品 1, 当前生产者: ForkJoinPool.commonPool-worker-9\n消费者消费产品 1, 当前消费者: ForkJoinPool.commonPool-worker-4\n当前生产者生产产品 1, 当前生产者: ForkJoinPool.commonPool-worker-2\n消费者消费产品 1, 当前消费者: ForkJoinPool.commonPool-worker-4\n当前生产者生产产品 1, 当前生产者: ForkJoinPool.commonPool-worker-11\n当前生产者生产产品 1, 当前生产者: ForkJoinPool.commonPool-worker-2\n消费者消费产品 1, 当前消费者: ForkJoinPool.commonPool-worker-6\n当前生产者生产产品 1, 当前生产者: ForkJoinPool.commonPool-worker-9\n消费者消费产品 1, 当前消费者: ForkJoinPool.commonPool-worker-4\n当前生产者生产产品 1, 当前生产者: ForkJoinPool.commonPool-worker-9\n消费者消费产品 1, 当前消费者: ForkJoinPool.commonPool-worker-13\n消费者消费产品 1, 当前消费者: ForkJoinPool.commonPool-worker-13\n产品为空, 等待生产者进行生产, 当前消费者: ForkJoinPool.commonPool-worker-4\n当前生产者生产产品 1, 当前生产者: ForkJoinPool.commonPool-worker-2\n消费者消费产品 1, 当前消费者: ForkJoinPool.commonPool-worker-4\n产品为空, 等待生产者进行生产, 当前消费者: ForkJoinPool.commonPool-worker-13\n当前生产者生产产品 1, 当前生产者: ForkJoinPool.commonPool-worker-11\n消费者消费产品 1, 当前消费者: ForkJoinPool.commonPool-worker-13\n</code></pre>\n<h2 id=\"总结-3\"><a class=\"anchor\" href=\"#总结-3\">#</a> 总结</h2>\n<p><code>PV</code>  操作题目的解题思路</p>\n<ol>\n<li>\n<p>关系分析。找出题目中描述的各个进程，分析它们之间的同步</p>\n</li>\n<li>\n<p>整理思路。根据各进程的操作流程确定  <code>P</code> 、 <code>V</code>  操作的大致顺序。</p>\n</li>\n<li>\n<p>设置信号量。设置需要的信号量，并根据题目条件确定信号量初值。</p>\n<p>(互斥信号量初值一般为 1，同步信号量的初始值要看对应资源的初始值是多少）</p>\n</li>\n</ol>\n<p>生产者消费者问题是一个互斥、同步的综合问题。</p>\n<p>对于初学者来说最难的是发现题目中隐含的两对同步关系。</p>\n<p>有时候是消费者需要等待生产者生产，有时候是生产者要等待消费者消费，这是两个不同的 “一前一后问题”，因此也需要设置两个同步信号量。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230202200259479.png\" alt=\"image-20230202200259479\" /></p>\n<p><strong>易错点</strong>：实现互斥和实现同步的两个  <code>P</code>  操作的先后顺序</p>\n<ul>\n<li>实现互斥的操作要在实现同步的操作之后，否则会产生 &quot;死锁&quot;</li>\n</ul>\n<h1 id=\"多生产者-多消费者进程\"><a class=\"anchor\" href=\"#多生产者-多消费者进程\">#</a> 多生产者 - 多消费者进程</h1>\n<p>桌子上有一只盘子，每次只能向其中放入一个水果。爸爸专向盘子中放苹果，妈妈专向盘子中放橘子，儿子专等着吃盘子中的橘子，女儿专等着吃盘子中的苹果。只有盘子空时，爸爸或妈妈才可向盘子中放一个水果。仅当盘子中有自己需要的水果时，儿子或女儿可以从盘子中取出水果。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230202201249516.png\" alt=\"image-20230202201249516\" /></p>\n<p>生产者生产不同的产品，消费者消费相应的产品</p>\n<hr />\n<h2 id=\"问题分析\"><a class=\"anchor\" href=\"#问题分析\">#</a> 问题分析</h2>\n<p>① 关系分析。找出题目中描述的各个进程，分析它们之间的同步、互斥关系。</p>\n<p><strong>互斥关系</strong>:</p>\n<ul>\n<li>对缓冲区（盘子）的访问要互斥地进行同步关系（一前一后）:</li>\n</ul>\n<p><strong>同步关系（一前一后）</strong></p>\n<ol>\n<li>\n<p>父亲将苹果放入盘子后，女儿才能取苹果</p>\n</li>\n<li>\n<p>母亲将橘子放入盘子后，儿子才能取橘子</p>\n</li>\n<li>\n<p>只有盘子为空时，父亲或母亲才能放入水果</p>\n<ul>\n<li>“盘子为空” 这个事件可以由儿子或女儿触发，事件发生后才允许父亲或母亲放水果</li>\n</ul>\n</li>\n</ol>\n<p>② 整理思路。根据各进程的操作流程确定  <code>P</code> 、 <code>V</code>  操作的大致顺序。</p>\n<p><strong>互斥</strong>：在临界资源前后分别  <code>PV</code></p>\n<p><strong>同步</strong>：前  <code>V</code>  后  <code>P</code></p>\n<ul>\n<li>在前操作后面进行  <code>V</code>  操作</li>\n<li>在后操作前面进行  <code>P</code>  操作</li>\n</ul>\n<p>③ 设置信号量。设置需要的信号量，并根据题目条件确定信号量初值。</p>\n<ul>\n<li>(互斥信号量初值一般为 1，同步信号量的初始值要看对应资源的初始值是多少)</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230202202128592.png\" alt=\"image-20230202202128592\" /></p>\n<h2 id=\"具体实现\"><a class=\"anchor\" href=\"#具体实现\">#</a> 具体实现</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230202202128592.png\" alt=\"image-20230202202128592\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230202202510021.png\" alt=\"image-20230202202510021\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230202203401161.png\" alt=\"image-20230202203401161\" /></p>\n<hr />\n<p><strong>问题：可不可以不用互斥信号量？</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230202203942261.png\" alt=\"image-20230202203942261\" /></p>\n<p><strong>分析</strong>：刚开始，儿子、女儿进程即使上处理机运行也会被阻塞。如果刚开始是父亲进程先上处理机运行，则：<br />\n父亲  <code>P(plate)</code> ，可以访问盘子 → 母亲  <code>P(plate)</code> ，阻塞等待盘子 → 父亲放入苹果  <code>V(apple)</code> ，女儿进程被唤醒，其他进程即使运行也都会阻塞，暂时不可能访问临界资源（盘子) → 女儿  <code>P(apple)</code>  ，访问盘子， <code>V(plate)</code>  ，等待盘子的母亲进程被唤醒→母亲进程访问盘子（其他进程暂时都无法进入临界区）&gt;...</p>\n<p><strong>结论</strong>：即使不设置专门的互斥变量  <code>mutex</code> ，也不会出现多个进程同时访问盘子的现象</p>\n<p><strong>原因在于</strong>：</p>\n<ul>\n<li>\n<p>本题中的缓冲区大小为 1，在任何时刻， <code>apple</code> 、 <code>orange</code> 、 <code>plate</code>  三个同步信号量中最多只有一个是 1。</p>\n</li>\n<li>\n<p>因此在任何时刻，最多只有一个进程的 P 操作不会被阻塞，并顺利地进入临界区...</p>\n</li>\n</ul>\n<hr />\n<p><strong>若盘子容量设置为 2</strong></p>\n<p>父亲  <code>P(plate)</code> ，可以访问盘子 → 母亲  <code>P(plate)</code> ，可以访问盘子 → 父亲在往盘子里放苹果，同时母亲也可以往盘子里放橘子。</p>\n<ul>\n<li>于是就出现了两个进程<strong>同时访问缓冲区</strong>的情况，有可能导致两个进程写入缓冲区的<strong>数据相互覆盖</strong>的情况。</li>\n</ul>\n<hr />\n<p>因此，如果缓冲区大小大于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>，就必须专门设置一个互斥信号量  <code>mutex</code>  来保证互斥访问缓冲区。</p>\n<h2 id=\"java-案例-2\"><a class=\"anchor\" href=\"#java-案例-2\">#</a> Java 案例</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Deque</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LinkedList</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Random</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AtomicInteger</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Condition</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Lock</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ReentrantLock</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProducerConsumerByLock</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 互斥资源</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> queueApple <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> queueOrange <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> maxSize <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Lock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Condition</span> apple <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Condition</span> orange <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Condition</span> plate <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Dad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Mom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Daughter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">//CompletableFuture.runAsync (new Consumer ()); 产生的进程默认是守护进程</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dad</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 放入苹果</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queueApple<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> maxSize <span class=\"token operator\">||</span> queueOrange<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> maxSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"盘子不为空, 父亲阻塞\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                            plate<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token comment\">// 放入苹果</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    queueApple<span class=\"token punctuation\">.</span><span class=\"token function\">offerLast</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"父亲放入了 1 个苹果\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token comment\">// 通知苹果的所有消费者</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    apple<span class=\"token punctuation\">.</span><span class=\"token function\">signalAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Mom</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token comment\">// 放入橘子</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queueOrange<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> maxSize <span class=\"token operator\">||</span> queueApple<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> maxSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"盘子不为空, 母亲阻塞\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                            plate<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                    <span class=\"token comment\">// 放入橘子</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                    queueOrange<span class=\"token punctuation\">.</span><span class=\"token function\">offerLast</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"母亲放入了 1 个橘子\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                    <span class=\"token comment\">// 通知橘子的所有消费者</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                    orange<span class=\"token punctuation\">.</span><span class=\"token function\">signalAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                    lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token comment\">// 获取橘子</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>                <span class=\"token class-name\">String</span> v <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queueOrange<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"盘子为空或者没有橘子，儿子阻塞\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>                        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>                            orange<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>                            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>                    <span class=\"token comment\">// 获取橘子</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>                    v <span class=\"token operator\">=</span> queueOrange<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"儿子吃了一个橘子: \"</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>                    <span class=\"token comment\">// 通知所有生产者，父亲和母亲</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>                    plate<span class=\"token punctuation\">.</span><span class=\"token function\">signalAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>                    lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>                <span class=\"token comment\">// 防止一瞬间消费完成</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>            <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Daughter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        <span class=\"token comment\">// 获取苹果</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            <span class=\"token class-name\">String</span> v <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>                lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queueApple<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"盘子为空或者没有苹果，女儿阻塞\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>                        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>                            apple<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>                            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>                    <span class=\"token comment\">// 获取橘子</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>                    v <span class=\"token operator\">=</span> queueApple<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"女儿吃了一个苹果: \"</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>                    <span class=\"token comment\">// 通知所有生产者，父亲和母亲</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>                    plate<span class=\"token punctuation\">.</span><span class=\"token function\">signalAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>                    lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>                <span class=\"token comment\">// 防止一瞬间消费完成</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>            <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>stdout：</strong></p>\n<pre><code>父亲放入了 1 个苹果\n盘子不为空, 母亲阻塞\n女儿吃了一个苹果: apple\n母亲放入了 1 个橘子\n儿子吃了一个橘子: orange\n父亲放入了 1 个苹果\n盘子为空或者没有橘子，儿子阻塞\n女儿吃了一个苹果: apple\n母亲放入了 1 个橘子\n儿子吃了一个橘子: orange\n盘子为空或者没有橘子，儿子阻塞\n盘子为空或者没有苹果，女儿阻塞\n父亲放入了 1 个苹果\n女儿吃了一个苹果: apple\n母亲放入了 1 个橘子\n儿子吃了一个橘子: orange\n母亲放入了 1 个橘子\n盘子不为空, 父亲阻塞\n儿子吃了一个橘子: orange\n父亲放入了 1 个苹果\n女儿吃了一个苹果: apple\n盘子为空或者没有橘子，儿子阻塞\n母亲放入了 1 个橘子\n儿子吃了一个橘子: orange\n盘子为空或者没有苹果，女儿阻塞\n</code></pre>\n<h2 id=\"总结-4\"><a class=\"anchor\" href=\"#总结-4\">#</a> 总结</h2>\n<p><strong>总结</strong>：在生产者 - 消费者问题中，如果缓冲区大小为 1 ，那么有可能不需要设置互斥信号量就可以实现互斥访问缓冲区的功能。</p>\n<ul>\n<li>当然，这不是绝对的，要具体问题具体分析。</li>\n</ul>\n<p><strong>建议</strong>：在考试中如果来不及仔细分析，可以加上互斥信号量，保证各进程一定会互斥地访问缓冲区。</p>\n<ul>\n<li>但需要注意的是，实现互斥的 P 操作一定要在实现同步的  <code>P</code>  操作之后，否则可能引起 “死锁” 。</li>\n</ul>\n<hr />\n<p>解决 “多生产者 - 多消费者问题” 的关键在于理清复杂的同步关系。</p>\n<p>在分析同步问题（一前一后问题）的时候不能从单个进程行为的角度来分析，要把 “一前一后” 发生的事看做是两种 “事件” 的前后关系。</p>\n<p>比如，如果从单个进程行为的角度来考虑的话，我们会有以下结论:</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>如果盘子里装有苹果，那么一定要女儿取走苹果后父亲或母亲才能再放入水果</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}如果盘子里装有苹果，那么一定要女儿取走苹果后父亲或母亲才能再放入水果</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">如果盘子里装有苹果，那么一定要女儿取走苹果后父亲或母亲才能再放入水果</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>如果盘子里装有橘子，那么一定要儿子取走橘子后父亲或母亲才能再放入水果</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}如果盘子里装有橘子，那么一定要儿子取走橘子后父亲或母亲才能再放入水果</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">如果盘子里装有橘子，那么一定要儿子取走橘子后父亲或母亲才能再放入水果</span></span></span></span></li>\n<li>这么看是否就意味着要设置四个同步信号量分别实现这四个 “一前一后” 的关系了？</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230202205304014.png\" alt=\"image-20230202205304014\" /></p>\n<p>正确的分析方法应该从 “<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>事件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\textcolor{red}{事件}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">事件</span></span></span></span>” 的角度来考虑</p>\n<ul>\n<li>我们可以把上述四对 “进程行为的前后关系” 抽象为一对 “<strong>事件的前后关系</strong>”</li>\n<li><strong>盘子变空事件 → 放入水果事件</strong>。“盘子变空事件” 既可由儿子引发，也可由女儿引发；“放水果事件”&quot; 既可能是父亲执行，也可能是母亲执行。这样的话，就可以用一个同步信号量解决问题了</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230202205319716.png\" alt=\"image-20230202205319716\" /></p>\n<h1 id=\"吸烟者问题\"><a class=\"anchor\" href=\"#吸烟者问题\">#</a> 吸烟者问题</h1>\n<p>假设一个系统有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>三个抽烟者进程和一个供应者进程</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}三个抽烟者进程和一个供应者进程</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">三个抽烟者进程和一个供应者进程</span></span></span></span>。</p>\n<p>每个抽烟者不停地卷烟并抽掉它，但是要卷起并抽掉一支烟，抽烟者需要有三种材料：烟草、纸和胶水。三个抽烟者中，<strong>第一个拥有烟草、第二个拥有纸、第三个拥有胶水</strong>。供应者进程无限地提供三种材料，供应者每次将两种材料放桌子上，<strong>拥有剩下那种材料的抽烟者卷一根烟并抽掉它，并给供应者进程一个信号告诉完成了</strong>，供应者就会放另外两种材料再桌上，这个过程一直重复（<strong>让三个抽烟者轮流地抽烟</strong>)</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/smoking.gif\" alt=\"smoking\" /></p>\n<hr />\n<h2 id=\"问题分析-2\"><a class=\"anchor\" href=\"#问题分析-2\">#</a> 问题分析</h2>\n<p>本质上这题也属于 “生产者 - 消费者” 问题，更详细的说应该是 “可生产多种产品的单生产者 - 多消费者”。</p>\n<p>① 关系分析。找出题目中描述的各个进程，分析它们之间的同步、互斥关系。</p>\n<p>桌子可以抽象为容量为 1 的缓冲区，要互斥访问</p>\n<ul>\n<li>组合一：纸 + 胶水</li>\n<li>组合二：烟草 + 胶水</li>\n<li>组合三：烟草 + 纸</li>\n</ul>\n<p>同步关系（从事件的角度来分析）:</p>\n<ul>\n<li>\n<p>桌上有组合一：第一个抽烟者取走东西</p>\n</li>\n<li>\n<p>桌上有组合二：第二个抽烟者取走东西</p>\n</li>\n<li>\n<p>桌上有组合三：第三个抽烟者取走东西</p>\n</li>\n<li>\n<p>发出完成信号：供应者将下一个组合放到桌上</p>\n</li>\n</ul>\n<p>② 整理思路。根据各进程的操作流程确定  <code>P</code> 、 <code>V</code>  操作的大致顺序</p>\n<ul>\n<li>同步关系：前  <code>V</code>  后  <code>P</code></li>\n</ul>\n<p>③ 设置信号量。设置需要的信号量，并根据题目条件确定信号量初值。</p>\n<ul>\n<li>(互斥信号量初值一般为 1，同步信号量的初始值要看对应资源的初始值是多少)</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230202225729675.png\" alt=\"image-20230202225729675\" /></p>\n<hr />\n<h2 id=\"具体实现-2\"><a class=\"anchor\" href=\"#具体实现-2\">#</a> 具体实现</h2>\n<p>由于互斥资源只有一个，所以上述案例可以不需要互斥量</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230202230639098.png\" alt=\"image-20230202230639098\" /></p>\n<p>上述所示，若  <code>P(finish)</code>  放在  <code>if</code>  前面，则需要设置  <code>finish</code>  初值为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>，否则会产生死锁</p>\n<ul>\n<li>放在  <code>if</code>  前面就跟之前案例中的盘子互斥资源一样了</li>\n</ul>\n<p>缓冲区大小为 1，同一时刻，四个同步信号量中至多有一个的值为 1</p>\n<h2 id=\"java-案例-3\"><a class=\"anchor\" href=\"#java-案例-3\">#</a> Java 案例</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Random</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Condition</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Lock</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ReentrantLock</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProducerConsumerByLock</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 互斥资源，由于直接在修改 i 的时候加锁了，所以不需要设置为原子类</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 最大容量</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> capacity <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 产品个数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">//flag</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Lock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Condition</span> offer1 <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Condition</span> offer2 <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Condition</span> offer3 <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Condition</span> finish <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 三个吸烟者</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Smokers</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 一个生产者</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Producer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">//CompletableFuture.runAsync (new Consumer ()); 产生的进程默认是守护进程</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 生产者</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Producer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">produce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>capacity <span class=\"token operator\">==</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"产品 \"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\" 还没有被消费,阻塞\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                        finish<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    <span class=\"token comment\">// 根据 i 的值不同唤醒不同的进程</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                        <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                            offer1<span class=\"token punctuation\">.</span><span class=\"token function\">signalAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                        <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                            offer2<span class=\"token punctuation\">.</span><span class=\"token function\">signalAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                        <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                            offer3<span class=\"token punctuation\">.</span><span class=\"token function\">signalAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                    i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">3</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"生产当前一个产品: \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                    lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            <span class=\"token function\">produce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token comment\">// 吸烟者</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token annotation punctuation\">@AllArgsConstructor</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Smokers</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> number<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">smoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                    <span class=\"token comment\">// 如果当前吸烟者对应的材料不同，阻塞</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">!=</span> number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"吸烟者\"</span> <span class=\"token operator\">+</span> number <span class=\"token operator\">+</span> <span class=\"token string\">\"阻塞, 材料为空\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"吸烟者\"</span> <span class=\"token operator\">+</span> number <span class=\"token operator\">+</span> <span class=\"token string\">\"阻塞, 当前材料: \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                            <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                                offer1<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                            <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                                offer2<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                            <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                                offer3<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>                                <span class=\"token comment\">// 刚开始默认全部阻塞</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                                <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                                    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                                        offer1<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>                                    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>                                        offer2<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>                                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>                                    <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>                                        offer3<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>                                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>                                    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>                                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>                    count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>                    <span class=\"token comment\">// 进行吸烟</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"吸烟者\"</span> <span class=\"token operator\">+</span> number <span class=\"token operator\">+</span> <span class=\"token string\">\"吸烟 \"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\", 吸烟完成\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>                    <span class=\"token comment\">// 唤醒生产者进行生产下一个吸烟者</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>                    finish<span class=\"token punctuation\">.</span><span class=\"token function\">signalAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>                    lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>                <span class=\"token comment\">// 防止一瞬间消费完成</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>            <span class=\"token function\">smoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>stdout:</strong></p>\n<pre><code>吸烟者1阻塞, 材料为空\n吸烟者2阻塞, 材料为空\n吸烟者3阻塞, 材料为空\n生产当前一个产品: 2\n吸烟者1阻塞, 当前材料: 2\n吸烟者2吸烟 2, 吸烟完成\n吸烟者3阻塞, 材料为空\n生产当前一个产品: 3\n吸烟者1阻塞, 当前材料: 3\n吸烟者3吸烟 3, 吸烟完成\n吸烟者2阻塞, 材料为空\n吸烟者3阻塞, 材料为空\n生产当前一个产品: 1\n吸烟者1吸烟 1, 吸烟完成\n吸烟者2阻塞, 材料为空\n吸烟者3阻塞, 材料为空\n生产当前一个产品: 2\n吸烟者2吸烟 2, 吸烟完成\n吸烟者3阻塞, 材料为空\n吸烟者2阻塞, 材料为空\n生产当前一个产品: 3\n吸烟者3吸烟 3, 吸烟完成\n吸烟者2阻塞, 材料为空\n吸烟者1阻塞, 材料为空\n生产当前一个产品: 1\n吸烟者2阻塞, 当前材料: 1\n吸烟者1吸烟 1, 吸烟完成\n吸烟者3阻塞, 材料为空\n生产当前一个产品: 2\n吸烟者2吸烟 2, 吸烟完成\n吸烟者3阻塞, 材料为空\n生产当前一个产品: 3\n吸烟者3吸烟 3, 吸烟完成\n生产当前一个产品: 1\n吸烟者1吸烟 1, 吸烟完成\n吸烟者3阻塞, 材料为空\n吸烟者2阻塞, 材料为空\n吸烟者1阻塞, 材料为空\n生产当前一个产品: 2\n吸烟者3阻塞, 当前材料: 2\n吸烟者2吸烟 2, 吸烟完成\n吸烟者1阻塞, 材料为空\n生产当前一个产品: 3\n吸烟者3吸烟 3, 吸烟完成\n吸烟者1阻塞, 材料为空\n吸烟者2阻塞, 材料为空\n生产当前一个产品: 1\n吸烟者1吸烟 1, 吸烟完成\n吸烟者2阻塞, 材料为空\n吸烟者3阻塞, 材料为空\n生产当前一个产品: 2\n吸烟者2吸烟 2, 吸烟完成\n吸烟者3阻塞, 材料为空\n吸烟者2阻塞, 材料为空\n生产当前一个产品: 3\n吸烟者3吸烟 3, 吸烟完成\n吸烟者2阻塞, 材料为空\n吸烟者1阻塞, 材料为空\n吸烟者3阻塞, 材料为空\n生产当前一个产品: 1\n吸烟者2阻塞, 当前材料: 1\n吸烟者1吸烟 1, 吸烟完成\n吸烟者3阻塞, 材料为空\n吸烟者1阻塞, 材料为空\n生产当前一个产品: 2\n吸烟者2吸烟 2, 吸烟完成\n吸烟者3阻塞, 材料为空\n吸烟者1阻塞, 材料为空\n生产当前一个产品: 3\n吸烟者3吸烟 3, 吸烟完成\n吸烟者1阻塞, 材料为空\n吸烟者2阻塞, 材料为空\n生产当前一个产品: 1\n吸烟者1吸烟 1, 吸烟完成\n吸烟者2阻塞, 材料为空\n吸烟者3阻塞, 材料为空\n吸烟者1阻塞, 材料为空\n生产当前一个产品: 2\n吸烟者2吸烟 2, 吸烟完成\n吸烟者3阻塞, 材料为空\n吸烟者1阻塞, 材料为空\n</code></pre>\n<hr />\n<h2 id=\"总结-5\"><a class=\"anchor\" href=\"#总结-5\">#</a> 总结</h2>\n<p>吸烟者问题可以为我们解决 “可以生产多个产品的单生产者” 问题提供一个思路。</p>\n<p>值得吸取的精华是：“轮流让各个吸烟者吸烟” 必然需要 “轮流的在桌上放上组合一、二、三”，注意体会我们是如何用一个整型变量 i 实现这个 “轮流” 过程的。</p>\n<p>如果题目改为 “每次随机地让一个吸烟者吸烟”，我们有应该如何用代码写出这个逻辑呢？</p>\n<ul>\n<li><code>random</code>  变量即可</li>\n</ul>\n<hr />\n<p>若一个生产者要生产多种产品（或者说会引发多种前驱事件），那么各个  <code>V</code>  操作应该放在各自对应的 “<strong>前驱事件</strong>” 发生之后的位置。</p>\n<h1 id=\"读者-写者问题\"><a class=\"anchor\" href=\"#读者-写者问题\">#</a> 读者 - 写者问题</h1>\n<p>有读者和写者两组并发进程，共享一个文件，当两个或两个以上的读进程同时访问共享数据时不会产生副作用，</p>\n<ul>\n<li>但若某个写进程和其他进程（读进程或写进程）同时访问共享数据时则可能导致数据不一致的错误。</li>\n</ul>\n<p>因此要求:</p>\n<ul>\n<li>①允许多个读者可以同时对文件执行读操作；</li>\n<li>②只允许一个写者往文件中写信息；</li>\n<li>③任一写者在完成写操作之前不允许其他读者或写者工作；</li>\n<li>④写者执行写操作前，应让已有的读者和写者全部退出。</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230203211117170.png\" alt=\"image-20230203211117170\" /></p>\n<h2 id=\"问题分析-3\"><a class=\"anchor\" href=\"#问题分析-3\">#</a> 问题分析</h2>\n<p>两类进程：写进程、读进程</p>\n<p>互斥关系：写进程一写进程、写进程一读进程。读进程与读进程不存在互斥问题。</p>\n<p>写者进程和任何进程都互斥，设置一个互斥信号量  <code>rw</code> ，在写者访问共享文件前后分别执行  <code>P</code> 、 <code>V</code>  操作。</p>\n<p>读者进程和写者进程也要互斥，因此读者访问共享文件前后也要对  <code>rw</code>  执行  <code>P</code> 、 <code>V</code>  操作。</p>\n<p>如果所有读者进程在访问共享文件之前都执行  <code>P(rw)</code>  操作，那么会导致各个读进程之间也无法同时访问文件。</p>\n<hr />\n<p><strong>Key</strong>：读者写者问题的核心思想――怎么处理该问题呢？</p>\n<p><code>P(rw)</code>  和  <code>V(rw)</code>  其实就是对共享文件的 “加锁” 和 “解锁”。既然各个读进程需要同时访问，而读进程与写进程又必须互斥访问，那么我们可以让第一个访问文件的读进程 “加锁”，让最后一个访问完文件的读进程 “解锁”。</p>\n<p>可以设置一个整数变量  <code>count</code>  来记录当前有几个读进程在访问文件。</p>\n<h2 id=\"具体实现-3\"><a class=\"anchor\" href=\"#具体实现-3\">#</a> 具体实现</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230203212211954.png\" alt=\"image-20230203212211954\" /></p>\n<p>潜在的问题：只要有读进程还在读，写进程就要一直阻塞等待，可能 “饿死”。</p>\n<ul>\n<li>因此，这种算法中，读进程是优先的</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230203233530865.png\" alt=\"image-20230203233530865\" /></p>\n<h2 id=\"总结-6\"><a class=\"anchor\" href=\"#总结-6\">#</a> 总结</h2>\n<p>读者 - 写者问题为我们解决复杂的互斥问题提供了一个参考思路。</p>\n<p>其<strong>核心思想</strong>在于设置了一个计数器  <code>count</code>  用来记录当前正在访问共享文件的读进程数。我们可以用  <code>count</code>  的值来判断当前进入的进程是否是第一个 / 最后一个读进程，从而做出不同的处理。</p>\n<p>另外，对  <code>count</code>  变量的检查和赋值不能一气呵成导致了一些错误，</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>如果需要实现一气呵成，自然应该想到用互斥信号量</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}如果需要实现一气呵成，自然应该想到用互斥信号量</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">如果需要实现一气呵成，自然应该想到用互斥信号量</span></span></span></span></li>\n</ul>\n<p>最后，还要认真体会我们是如何解决 “写进程饥饿” 问题的。</p>\n<p>绝大多数的考研  <code>PV</code>  操作大题都可以用之前介绍的几种生产者 - 消费者问题的思想来解决，如果遇到更复杂的问题，可以想想能否用读者写者问题的这几个思想来解决。</p>\n<h1 id=\"哲学家进餐问题\"><a class=\"anchor\" href=\"#哲学家进餐问题\">#</a> 哲学家进餐问题</h1>\n<p>一张圆桌上坐着 5 名哲学家，每两个哲学家之间的桌上摆一根筷子，桌子的中间是一碗米饭。</p>\n<p>哲学家们倾注毕生的精力用于思考和进餐，哲学家在思考时，并不影响他人。</p>\n<p>只有当哲学家饥饿时，才试图拿起左、右两根筷子（一根一根地拿起)。如果筷子已在他人手上，则需等待。</p>\n<p>饥饿的哲学家只有同时拿起两根筷子才可以开始进餐，当进餐完毕后，放下筷子继续思考。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230204003023792.png\" alt=\"image-20230204003023792\" /></p>\n<h2 id=\"问题分析-4\"><a class=\"anchor\" href=\"#问题分析-4\">#</a> 问题分析</h2>\n<ol>\n<li>\n<p>关系分析。系统中有 5 个哲学家进程，5 位哲学家与左右邻居对其中间筷子的访问是互斥关系。</p>\n</li>\n<li>\n<p>整理思路。这个问题中只有互斥关系，但与之前遇到的问题不同的事，每个哲学家进程需要<strong>同时持有两个临界资源</strong>才能开始吃饭。如何避免临界资源分配不当造成的<strong>死锁现象</strong>，是哲学家问题的精髓。</p>\n</li>\n<li>\n<p>信号量设置。定义互斥信号量数组  <code>chopstick[5]=&#123;1,1,1,1,1&#125;</code>  用于实现对 5 个筷子的互斥访问。</p>\n<p>并对哲学家按 0~4 编号，哲学家 i 左边的筷子编号为  <code>i</code>  ，右边的筷子编号为  <code>(i+1)%5</code> 。</p>\n</li>\n</ol>\n<p><strong>错误</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230204003436560.png\" alt=\"image-20230204003436560\" /></p>\n<p><strong>循环的等待</strong></p>\n<hr />\n<h2 id=\"如何避免死锁的发生呢附-java-实现\"><a class=\"anchor\" href=\"#如何避免死锁的发生呢附-java-实现\">#</a> 如何避免死锁的发生呢？（附 Java 实现）</h2>\n<p>① 可以对哲学家进程施加一些限制条件，比如最多允许四个哲学家同时进餐。（<strong>破坏循环等待条件</strong>，本来 5 个哲学家对应 5 个筷子，现在 4 个哲学家对应 5 个筷子）</p>\n<p>这样可以保证至少有一个哲学家是可以拿到左右两只筷子的</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230204003718420.png\" alt=\"image-20230204003718420\" /></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>semaphore chopstick <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>semaphore mutex <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 只允许 4 个哲学家进行争抢</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">pi</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 拿左</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 拿右</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">//V 顺序无所谓</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        吃饭<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 放左</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 放右</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        思考<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Java 实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 最多允许四个哲学家同时进餐</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DiningPhilosophers</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DiningPhilosophers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">Lock</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chopstick <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">Semaphore</span> mutex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Semaphore</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// call the run() method of any runnable to execute its code</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">wantsToEat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> philosopher<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> pickLeftFork<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> pickRightFork<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> eat<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> putLeftFork<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> putRightFork<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 信号量 -1</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        mutex<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 拿起左右筷子</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        chopstick<span class=\"token punctuation\">[</span>philosopher<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        chopstick<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>philosopher <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        pickLeftFork<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        pickRightFork<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">//eat</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        eat<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 放下左右筷子</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        putLeftFork<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        putRightFork<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        chopstick<span class=\"token punctuation\">[</span>philosopher<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        chopstick<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>philosopher <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 信号量 + 1</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        mutex<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>② 要求<strong>奇数号</strong>哲学家<strong>先拿左边</strong>的筷子，然后<strong>再拿右边</strong>的筷子，而偶数号哲学家刚好相反。（<strong>破坏循环等待</strong>，分为奇偶数，给上编号）</p>\n<p>用这种方法可以保证如果相邻的两个奇偶号哲学家都想吃饭，那么只会有其中一个可以拿起第一只筷子，另一个会直接阻塞。这就避免了占有一支后再等待另一只的情况。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>semaphore chopstick <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>semaphore mutex <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 互斥地取筷子</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">pi</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 偶数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t        <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 拿右   </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t        <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 拿左</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 拿左</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t        <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 拿右   </span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t<span class=\"token comment\">//V 顺序无所谓</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        吃饭<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 放左</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 放右</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        思考<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230204004009243.png\" alt=\"image-20230204004009243\" /></p>\n<p>Java 实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 奇数号哲学家先左后右，偶数号哲学家先右后左</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DiningPhilosophers</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DiningPhilosophers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">Lock</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chopstick <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// call the run() method of any runnable to execute its code</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">wantsToEat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> philosopher<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> pickLeftFork<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> pickRightFork<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> eat<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> putLeftFork<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> putRightFork<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 尝试拿起左右筷子</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>philosopher <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            chopstick<span class=\"token punctuation\">[</span>philosopher<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            chopstick<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>philosopher <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            chopstick<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>philosopher <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            chopstick<span class=\"token punctuation\">[</span>philosopher<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        pickLeftFork<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        pickRightFork<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">//eat</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        eat<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        putLeftFork<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        putRightFork<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 放下左右筷子</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        chopstick<span class=\"token punctuation\">[</span>philosopher<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        chopstick<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>philosopher <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>③ 仅当一个哲学家左右两支筷子都可用时才允许他抓起筷子。（<strong>破坏请求和保持条件</strong>，预先分配 2 个筷子）</p>\n<p>如下所示：</p>\n<ol>\n<li>\n<p>若 0 号哲学家正在  <code>P(chopstick[i])</code>  中，此时 2 号哲学家也想拿筷子，将会阻塞在  <code>P(mutex)</code>  ，直到等待 0 号哲学家  <code>V(mutex)</code></p>\n</li>\n<li>\n<p>若 0 号哲学家正在吃饭，0, 1 号筷子被使用；此时 1 号哲学家将会阻塞  <code>P(chopstick[i])</code> ;（0 号筷子），  <code>mutex = 0</code> ; 若 2 号哲学家也想拿筷子，则会被阻塞到  <code>P(mutex)</code></p>\n<ul>\n<li>即使 2 号左右两边的筷子都在，也暂时无法取得</li>\n</ul>\n</li>\n<li>\n<p>若 0 号哲学家正在吃饭，0, 1 号筷子被使用；此时 4 号哲学家将拿起左边筷子，但是阻塞在  <code>P(chopstick[(i + 1) % 5])</code>  ，直到等待 0 号哲学家吃完饭  <code>V(chopstick[i]);</code></p>\n<ul>\n<li>此时 4 号右边的筷子不可用，但 4 号仍然会拿起左边的筷子</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>semaphore chopstick <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>semaphore mutex <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 互斥地取筷子</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">Pi</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\t\t\t\t<span class=\"token comment\">//i 号哲学家的进程</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 拿左</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">P</span><span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 拿右</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        吃饭<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// 放左</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">V</span><span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 放右</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        思考<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>因此上述方法并不能保证只有两边的筷子都可用时，才允许哲学家拿起筷子</p>\n<ul>\n<li>例如上述的情况 1 和 2 都会导致 2 号哲学家两边的筷子都可以用，但是却被阻塞</li>\n</ul>\n<p><strong>更准确的说法应该是</strong>：</p>\n<ul>\n<li>\n<p>各哲学家拿筷子这件事必须互斥的执行。</p>\n<p>这就保证了即使一个哲学家在拿筷子拿到一半时被阻塞，也不会有别的哲学家会继续尝试拿筷子。</p>\n<p>这样的话，当前正在吃饭的哲学家放下筷子后，被阻塞的哲学家就可以获得等待的筷子了。</p>\n</li>\n</ul>\n<p>Java 实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DiningPhilosophers</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DiningPhilosophers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Lock</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chopstick <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">Lock</span> mutex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// call the run() method of any runnable to execute its code</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">wantsToEat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> philosopher<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> pickLeftFork<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> pickRightFork<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> eat<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> putLeftFork<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> putRightFork<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 由于要同时持有，所以要互斥</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        mutex<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        chopstick<span class=\"token punctuation\">[</span>philosopher<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        chopstick<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>philosopher <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        mutex<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        pickLeftFork<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        pickRightFork<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">//eat</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        eat<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        putLeftFork<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        putRightFork<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 放下左右筷子</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        chopstick<span class=\"token punctuation\">[</span>philosopher<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        chopstick<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>philosopher <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h2 id=\"位运算-cas-优化\"><a class=\"anchor\" href=\"#位运算-cas-优化\">#</a> 位运算 + CAS 优化</h2>\n<p>方式① 最多允许四个哲学家同时进餐</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 最多允许四个哲学家同时进餐</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DiningPhilosophers</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DiningPhilosophers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 若 chopstick 等于 0, 表示筷子未被使用</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">AtomicInteger</span> chopstick <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 00001, 00010, 00100, 01000, 10000</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chopstickMask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">Semaphore</span> mutex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Semaphore</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// call the run() method of any runnable to execute its code</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">wantsToEat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> philosopher<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> pickLeftFork<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> pickRightFork<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> eat<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> putLeftFork<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> putRightFork<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 左右筷子</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">int</span> leftC <span class=\"token operator\">=</span> chopstickMask<span class=\"token punctuation\">[</span>philosopher<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">int</span> rightC <span class=\"token operator\">=</span> chopstickMask<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>philosopher <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 信号量 -1</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        mutex<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 尝试拿起左右筷子</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">//CAS</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>leftC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>rightC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        pickLeftFork<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        pickRightFork<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">//eat</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        eat<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        putLeftFork<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        putRightFork<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 放下左右筷子</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>leftC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>rightC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">// 信号量 + 1</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        mutex<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> mask<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">int</span> expect <span class=\"token operator\">=</span> chopstick<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token comment\">// 例如：1 号放下筷子 00001 和 00010</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token comment\">// 左边的筷子 expect : 00011 ^ 00001 -> 00010</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token comment\">// 右边的筷子 expect : 00010 ^ 00010 -> 00000</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">return</span> chopstick<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>expect<span class=\"token punctuation\">,</span> expect <span class=\"token operator\">^</span> mask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">// 尝试拿起左右筷子</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> mask<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">int</span> expect <span class=\"token operator\">=</span> chopstick<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token comment\">// 只有当前筷子没有被拿起才返回 true, 并且更新筷子状态</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token comment\">// 例如：1 号拿起筷子 00001 和 00010 , 更新后 : 00011 (说明 1, 2 号筷子被拿了)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token comment\">//  此时 2 号想拿起左边的筷子 : 00010 , &amp; 运算发现被拿了，返回 false</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>expect <span class=\"token operator\">&amp;</span> mask<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> chopstick<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>expect<span class=\"token punctuation\">,</span> expect <span class=\"token operator\">^</span> mask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>方式② 奇数号哲学家先左后右，偶数号哲学家先右后左</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Semaphore</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AtomicInteger</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Condition</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Lock</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ReentrantLock</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * 奇数号哲学家先左后右，偶数号哲学家先右后左</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DiningPhilosophers</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DiningPhilosophers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 若 chopstick 等于 0, 表示筷子未被使用</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">AtomicInteger</span> chopstick <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 00001, 00010, 00100, 01000, 10000</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chopstickMask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// call the run() method of any runnable to execute its code</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">wantsToEat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> philosopher<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> pickLeftFork<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> pickRightFork<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> eat<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> putLeftFork<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> putRightFork<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 左右筷子</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">int</span> leftC <span class=\"token operator\">=</span> chopstickMask<span class=\"token punctuation\">[</span>philosopher<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">int</span> rightC <span class=\"token operator\">=</span> chopstickMask<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>philosopher <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 信号量 -1</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>philosopher <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">// 尝试拿起左右筷子</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>leftC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>rightC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token comment\">// 尝试拿起右左筷子</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>rightC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>leftC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">// 退出临界区</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        pickLeftFork<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        pickRightFork<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token comment\">//eat</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        eat<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        putLeftFork<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        putRightFork<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">// 放下左右筷子</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>leftC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>rightC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token comment\">// 信号量 + 1</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> mask<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">int</span> expect <span class=\"token operator\">=</span> chopstick<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token comment\">// 例如：1 号放下筷子 00001 和 00010</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token comment\">// 左边的筷子 expect : 00011 ^ 00001 -> 00010</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token comment\">// 右边的筷子 expect : 00010 ^ 00010 -> 00000</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">return</span> chopstick<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>expect<span class=\"token punctuation\">,</span> expect <span class=\"token operator\">^</span> mask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token comment\">// 尝试拿起左右筷子</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> mask<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token keyword\">int</span> expect <span class=\"token operator\">=</span> chopstick<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token comment\">// 只有当前筷子没有被拿起才返回 true, 并且更新筷子状态</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token comment\">// 例如：1 号拿起筷子 00001 和 00010 , 更新后 : 00011 (说明 1, 2 号筷子被拿了)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token comment\">//  此时 2 号想拿起左边的筷子 : 00010 , &amp; 运算发现被拿了，返回 false</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>expect <span class=\"token operator\">&amp;</span> mask<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> chopstick<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>expect<span class=\"token punctuation\">,</span> expect <span class=\"token operator\">^</span> mask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>方式③ 仅当一个哲学家左右两支筷子都可用时才允许他抓起筷子。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Semaphore</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AtomicInteger</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Condition</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Lock</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ReentrantLock</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * 仅当一个哲学家左右两支筷子都可用时才允许他抓起筷子。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DiningPhilosophers</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DiningPhilosophers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 若 chopstick 等于 0, 表示筷子未被使用</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">AtomicInteger</span> chopstick <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 00001, 00010, 00100, 01000, 10000</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chopstickMask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 进入临界区</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token class-name\">AtomicInteger</span> mutex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// call the run() method of any runnable to execute its code</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">wantsToEat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> philosopher<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> pickLeftFork<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> pickRightFork<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> eat<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> putLeftFork<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                           <span class=\"token class-name\">Runnable</span> putRightFork<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 左右筷子</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">int</span> leftC <span class=\"token operator\">=</span> chopstickMask<span class=\"token punctuation\">[</span>philosopher<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">int</span> rightC <span class=\"token operator\">=</span> chopstickMask<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>philosopher <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 信号量 -1</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 进入临界区</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mutex<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 尝试拿起左右筷子</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>leftC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>rightC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">// 退出临界区</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mutex<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        pickLeftFork<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        pickRightFork<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">//eat</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        eat<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        putLeftFork<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        putRightFork<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token comment\">// 放下左右筷子</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>leftC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>rightC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token comment\">// 信号量 + 1</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> mask<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">int</span> expect <span class=\"token operator\">=</span> chopstick<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token comment\">// 例如：1 号放下筷子 00001 和 00010</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token comment\">// 左边的筷子 expect : 00011 ^ 00001 -> 00010</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token comment\">// 右边的筷子 expect : 00010 ^ 00010 -> 00000</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">return</span> chopstick<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>expect<span class=\"token punctuation\">,</span> expect <span class=\"token operator\">^</span> mask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\">// 尝试拿起左右筷子</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> mask<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">int</span> expect <span class=\"token operator\">=</span> chopstick<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">// 只有当前筷子没有被拿起才返回 true, 并且更新筷子状态</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token comment\">// 例如：1 号拿起筷子 00001 和 00010 , 更新后 : 00011 (说明 1, 2 号筷子被拿了)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token comment\">//  此时 2 号想拿起左边的筷子 : 00010 , &amp; 运算发现被拿了，返回 false</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>expect <span class=\"token operator\">&amp;</span> mask<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> chopstick<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>expect<span class=\"token punctuation\">,</span> expect <span class=\"token operator\">^</span> mask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"总结-7\"><a class=\"anchor\" href=\"#总结-7\">#</a> 总结</h2>\n<p>哲学家进餐问题的关键在于<strong>解决进程死锁</strong>。</p>\n<p>这些进程之间只存在互斥关系，但是与之前接触到的互斥关系不同的是，每个进程都需要<strong>同时持有两个临界资源，因此就有 “死锁” 问题的隐患。</strong></p>\n<hr />\n<p>如果在考试中遇到了一个进程需要<strong>同时持有多个临界资源的情况，应该参考哲学家问题的思想</strong>，分析题中给出的进程之间是否会发生循环等待，是否会发生死锁。</p>\n<p>可以参考哲学家就餐问题解决死锁的三种思路。</p>\n<h1 id=\"管程\"><a class=\"anchor\" href=\"#管程\">#</a> 管程</h1>\n<p><strong>管程就是一个软件模块，里面封装了实现同步，互斥的函数</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230204224328863.png\" alt=\"image-20230204224328863\" /></p>\n<h2 id=\"为什么要引入管程\"><a class=\"anchor\" href=\"#为什么要引入管程\">#</a> 为什么要引入管程</h2>\n<p>信号量机制存在的<strong>问题</strong>：编写程序困难、易出错</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230204224513867.png\" alt=\"image-20230204224513867\" /></p>\n<hr />\n<p>能不能设计一种机制，让程序员写程序时不需要再关注复杂的  <code>PV</code>  操作，让写代码更轻松呢？</p>\n<p>1973 年， <code>Brinch Hansen</code>  首次在程序设计语言（ <code>Pascal</code> ）中引入了 “管程” 成分 —―一种高级同步机制</p>\n<h2 id=\"管程的定义和基本特征\"><a class=\"anchor\" href=\"#管程的定义和基本特征\">#</a> 管程的定义和基本特征</h2>\n<p>管程是一种<strong>特殊的软件模块</strong>，有这些部分组成：</p>\n<ol>\n<li>\n<p>局部于管程的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>共享数据结构</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}共享数据结构</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">共享数据结构</span></span></span></span>说明；</p>\n</li>\n<li>\n<p>对该数据结构进行操作的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>一组过程</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}一组过程</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">一组过程</span></span></span></span></p>\n</li>\n<li>\n<p>对局部于管程的共享数据设置初始值的语句；</p>\n</li>\n<li>\n<p>管程有一个名字。</p>\n</li>\n</ol>\n<p><code>Tips</code>  ：&quot;过程&quot; 其实就是 &quot;函数&quot;</p>\n<hr />\n<p>管程的基本特征：</p>\n<ol>\n<li>局部于管程的数据只能被局部于管程的过程所访问；</li>\n<li>一个进程<strong>只有通过调用管程内的过程</strong>才能进入管程访问共享数据；\n<ul>\n<li>类似于 Java 中 private，要访问私有变量的数据，需要提供 public 方法才可以访问</li>\n</ul>\n</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>每次仅允许一个进程在管程内执行某个内部过程</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}每次仅允许一个进程在管程内执行某个内部过程</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">每次仅允许一个进程在管程内执行某个内部过程</span></span></span></span></li>\n</ol>\n<p>例：若想访问这些数据结构的话，需要调用管程中的<strong>函数间接</strong>的访问这些数据</p>\n<hr />\n<h2 id=\"拓展1用管程解决生产者消费者问题\"><a class=\"anchor\" href=\"#拓展1用管程解决生产者消费者问题\">#</a> 拓展 1∶用管程解决生产者消费者问题</h2>\n<p>如下所示的伪代码：</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230204225925741.png\" alt=\"image-20230204225925741\" /></p>\n<p>除了由编译器负责实现各进程互斥地进管程中的过程之外</p>\n<ul>\n<li>\n<p>可以在管程中设置条件变量和等待 / 唤醒操作，已解决同步问题</p>\n</li>\n<li>\n<p>例 2 ：两个消费者进程先执行，生产者进程后执行...</p>\n</li>\n</ul>\n<hr />\n<p>引入管程的目的无非就是要更方便地<strong>实现进程互斥和同步。</strong></p>\n<ol>\n<li>\n<p>需要在管程中<strong>定义共享数据</strong>（如生产者消费者问题的缓冲区)</p>\n</li>\n<li>\n<p>需要在管程中定义用于<strong>访问这些共享数据的 “入口”</strong> ――其实就是一些函数（如生产者消费者问题中，可以定义一个函数用于将产品放入缓冲区，再定义一个函数用于从缓冲区取出产品)</p>\n</li>\n<li>\n<p>只有<strong>通过这些特定的 “入口” 才能访问共享数据</strong></p>\n</li>\n<li>\n<p>管程中有很多 “入口”，但是<strong>每次只能开放其中一个 “入口”</strong>，并且只能让<strong>一个进程或线程进入</strong></p>\n<p>（如生产者消费者问题中，各进程需要互斥地访问共享缓冲区。管程的这种特性即可保证一个时间段内最多只会有一个进程在访问缓冲区。)</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>注意</mtext><mo>:</mo><mtext>这种互斥特性是由编译器负责实现的，程序员不用关心</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}注意:这种互斥特性是由编译器负责实现的，程序员不用关心</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">注意</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">这种互斥特性是由编译器负责实现的，程序员不用关心</span></span></span></span></p>\n</li>\n<li>\n<p>可在管程中设置<strong>条件变量</strong>及<strong>等待 / 唤醒操作</strong>以解决同步问题。可以让一个进程或线程在条件变量上等待</p>\n<p>（<strong>此时，该进程应先释放管程的使用权，也就是让出 “入口”</strong>)；可以通过唤醒操作将等待在条件变量上的进程或线程唤醒。</p>\n</li>\n</ol>\n<p>程序员可以用某种特殊的语法定义一个管程（比如:  <code>monitor ProducerConsumer .....end monitor</code> 😉</p>\n<ul>\n<li>之后其他程序员就可以使用这个管程提供的特定 “入口” 很方便地使用实现进程同步 / 互斥了。</li>\n<li><strong>&quot;封装&quot; 思想</strong></li>\n</ul>\n<h2 id=\"拓展2java-中类似于管程的机制\"><a class=\"anchor\" href=\"#拓展2java-中类似于管程的机制\">#</a> 拓展 2：Java 中类似于管程的机制</h2>\n<p><code>Java</code>  中，如果用关键字  <code>synchronized</code>  来描述一个函数，那么这个函数同一时间段内只能被一个线程调用</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230204231246024.png\" alt=\"image-20230204231246024\" /></p>\n<p>每次只能有一个线程进入  <code>insert</code>  函数，如果多个线程同时调用  <code>insert</code>  函数，则后来者需要排队等待</p>\n<h2 id=\"整体框架-14\"><a class=\"anchor\" href=\"#整体框架-14\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230204232019688.png\" alt=\"image-20230204232019688\" /></p>\n<h1 id=\"死锁\"><a class=\"anchor\" href=\"#死锁\">#</a> 死锁</h1>\n<h2 id=\"死锁的概念\"><a class=\"anchor\" href=\"#死锁的概念\">#</a> 死锁的概念</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230204233612922.png\" alt=\"image-20230204233612922\" /></p>\n<h3 id=\"什么是死锁\"><a class=\"anchor\" href=\"#什么是死锁\">#</a> 什么是死锁</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230205190745487.png\" alt=\"image-20230205190745487\" /></p>\n<p>我等待你，你等待他，他等待她，她等待我..... 这世界每个人都爱别人.....</p>\n<ul>\n<li>我们从资源占有的角度来分析，这段关系为什么看起来那么纠结...</li>\n</ul>\n<hr />\n<p>在并发环境下，各进程因竞争资源而造成的一种<strong>互相等待对方手里的资源</strong>，导致各进程都阻塞，都无法向前推进的现象，就是 &quot;死锁&quot;。</p>\n<ul>\n<li>发生死锁后若无外力干涉，这些进程都将无法向前推进。</li>\n</ul>\n<h3 id=\"死锁-饥饿-死循环的区别\"><a class=\"anchor\" href=\"#死锁-饥饿-死循环的区别\">#</a> 死锁、饥饿、死循环的区别</h3>\n<p><code>死锁</code> ：各进程互相等待对方手里的资源，导致各进程都阻塞，无法向前推进的现象。</p>\n<p><code>饥饿</code> ：由于长期得不到想要的资源，某进程无法向前推进的现象。</p>\n<ul>\n<li>比如：在短进程优先（ <code>SPF</code> ）算法中，若有源源不断的短进程到来，则长进程将一直得不到处理机，从而发生长进程 “饥饿”。</li>\n</ul>\n<p><code>死循环</code> ：某进程执行过程中一直跳不出某个循环的现象。有时是因为程序逻辑  <code>bug</code>  导致的，有时是程序员故意设计的。</p>\n<p>\n\n<table height=\"100\" width=\"100\" border=\"1\" >\n\t<thead>\n        <tr>\n            <th></th>\n            <th>相同点</th>\n            <th>不同点</th>\n            </tr>\n    </thead>\n<tbody>\n    <tr>\n        <td>死锁</td>\n        <td  rowspan=\"3\" style = \"width : 120px\">都是进程无法顺利向前推进的现象<br>(故意设计的死循环除外)</br></td>\n<td>死锁一定是 “循环等待对方手里的资源” 导致的，因此如果有死锁现象，那<span style = \"color : red\">至少有两个或两个以上的进程同时发生死锁</span>。另外，发生死锁的进程一定处于阻塞态。</td>\n    </tr>\n    <tr>\n        <td>饥饿</td>\n        <td><span style = \"color : red\">可能只有一个进程发生饥饿</span>。发生饥饿的进程既可能是阻塞态(如长期得不到需要的 I/O 设备)，也可能是就绪态(长期得不到处理机)</td>\n    </tr>\n    <tr>\n        <td>死循环</td>\n        <td>可能只有一个进程发生死循环。死循环的进程可以上处理机运行（可以是运行态），只不过无法像期待的那样顺利推进。死锁和饥饿问题是由于操作系统分配资源的策略不合理导致的，而死循环是由代码逻辑的错误导致的。<span style = \"color : red\">死锁和饥饿是管理者（操作系统）的问题,死循环是被管理者的问题</span>。</td>\n    </tr>\n</tbody>\n    </table>\n</p>\n<h3 id=\"死锁产生的必要条件\"><a class=\"anchor\" href=\"#死锁产生的必要条件\">#</a> 死锁产生的必要条件</h3>\n<p>产生死锁必须同时满足一下四个条件，只要其中任一条件不成立，死锁就不会发生。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>互斥条件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}互斥条件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">互斥条件</span></span></span></span>：只有对必须互斥使用的资源的争抢才会导致死锁（如哲学家的筷子、打印机设备）。</p>\n<ul>\n<li>像内存、扬声器这样可以同时让多个进程使用的资源是不会导致死锁的（因为进程不用阻塞等待这种资源）。</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>不剥夺条件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}不剥夺条件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">不剥夺条件</span></span></span></span>：进程所获得的资源在未使用完之前，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>不能由其他进程强行夺走</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}不能由其他进程强行夺走</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">不能由其他进程强行夺走</span></span></span></span>，只能主动释放。</p>\n<ul>\n<li>例如：哲学家进程问题中，若每一个哲学家都持有一只筷子，则需要等待某一个哲学家释放该筷子，而不是强行夺走筷子</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>请求和保持条件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}请求和保持条件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">请求和保持条件</span></span></span></span>：进程已经<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>保持了至少一个资源</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}保持了至少一个资源</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">保持了至少一个资源</span></span></span></span>，但又提出了新的资源<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>请求</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}请求</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">请求</span></span></span></span>，而该资源又被其他进程占有，此时请求进程被阻塞，但又对自己已有的资源<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>保持</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}保持</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">保持</span></span></span></span>不放。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>循环等待条件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}循环等待条件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">循环等待条件</span></span></span></span>：存在一种进程<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>资源的循环等待链</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}资源的循环等待链</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">资源的循环等待链</span></span></span></span>，链中的每一个进程已获得的资源同时被下一个进程所请求。</p>\n<hr />\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>注意！发生死锁时一定有循环等待，但是发生循环等待时未必死锁</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}注意！发生死锁时一定有循环等待，但是发生循环等待时未必死锁</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">注意！发生死锁时一定有循环等待，但是发生循环等待时未必死锁</span></span></span></span>（循环等待是死锁的必要不充分条件)</p>\n<p>如果同类资源数大于 1 ，则即使有循环等待，也未必发生死锁。</p>\n<ul>\n<li>但如果系统中每类资源都只有一个，那循环等待就是死锁的充分必要条件了。</li>\n</ul>\n<h3 id=\"什么时候会发生死锁\"><a class=\"anchor\" href=\"#什么时候会发生死锁\">#</a> 什么时候会发生死锁</h3>\n<p>① <strong>对系统资源的竞争</strong>。各进程对不可剥夺的资源（如打印机）的竞争可能引起死锁，对可剥夺的资源（CPU）的竞争是不会引起死锁的。</p>\n<p>② <strong>进程推进顺序非法</strong>。请求和释放资源的顺序不当，也同样会导致死锁。</p>\n<ul>\n<li>例如，并发执行的进程  <code>P1</code> 、 <code>P2</code>  分别申请并占有了资源  <code>R1</code> 、 <code>R2</code>  ，之后进程  <code>P1</code>  又紧接着申请资源  <code>R2</code> ，而进程  <code>P2</code>  又申请资源  <code>R1</code> ，两者会因为申请的资源被对方占有而阻塞，从而发生死锁。</li>\n</ul>\n<p>③ <strong>信号量的使用不当</strong>也会造成死锁。</p>\n<ul>\n<li>如生产者 - 消费者问题中，如果实现互斥的 P 操作在实现同步的  <code>P</code>  操作之前，就有可能导致死锁。(可以把互斥信号量、同步信号量也看做是一种抽象的系统资源）</li>\n</ul>\n<hr />\n<p><code>总之</code> ，对不可剥夺资源的不合理分配，可能导致死锁。</p>\n<h3 id=\"死锁的处理策略\"><a class=\"anchor\" href=\"#死锁的处理策略\">#</a> 死锁的处理策略</h3>\n<p><strong>预防死锁</strong>。</p>\n<ul>\n<li>破坏死锁产生的四个必要条件中的一个或几个。</li>\n</ul>\n<p><strong>避免死锁</strong>。</p>\n<ul>\n<li>用某种方法防止系统进入不安全状态，从而避免死锁（银行家算法)</li>\n</ul>\n<p><strong>死锁的检测和解除</strong>。</p>\n<ul>\n<li>允许死锁的发生，不过操作系统会负责检测出死锁的发生，然后采取某种措施解除死锁。</li>\n</ul>\n<h3 id=\"整体框架-15\"><a class=\"anchor\" href=\"#整体框架-15\">#</a> 整体框架</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230205195304249.png\" alt=\"image-20230205195304249\" /></p>\n<h2 id=\"死锁的处理策略-2\"><a class=\"anchor\" href=\"#死锁的处理策略-2\">#</a> 死锁的处理策略</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230205200435716.png\" alt=\"image-20230205200435716\" /></p>\n<h3 id=\"预防死锁\"><a class=\"anchor\" href=\"#预防死锁\">#</a> 预防死锁</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230205205302564.png\" alt=\"image-20230205205302564\" /></p>\n<h4 id=\"破坏互斥条件\"><a class=\"anchor\" href=\"#破坏互斥条件\">#</a> 破坏互斥条件</h4>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>互斥条件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}互斥条件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">互斥条件</span></span></span></span>：只有对必须互斥使用的资源的争抢才会导致死锁。</p>\n<p>如果把只能互斥使用的资源改造为允许共享使用，则系统不会进入死锁状态。</p>\n<ul>\n<li>比如：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mi>S</mi><mi>P</mi><mi>O</mi><mi>O</mi><mi>L</mi><mi>i</mi><mi>n</mi><mi>g</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}SPOOLing</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;color:red;\">SPOO</span><span class=\"mord mathnormal\" style=\"color:red;\">L</span><span class=\"mord mathnormal\" style=\"color:red;\">in</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;color:red;\">g</span></span></span></span> 技术。操作系统可以采用  <code>SPOOLing</code>  技术把独占设备在逻辑上改造成共享设备。</li>\n<li>比如，用  <code>SPOOLing</code>  技术将打印机改造为共享设备...</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230205202413625.png\" alt=\"image-20230205202413625\" /></p>\n<p>如上右所示：进程 1 和进程 2 将作业交给输出进程即可，不需要阻塞，具体的打印操作由输出进程操作即可</p>\n<ul>\n<li>可以理解为菜鸟驿站</li>\n</ul>\n<hr />\n<p>该策略的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>缺点</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}缺点</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">缺点</span></span></span></span>：<strong>并不是所有的资源都可以改造成可共享使用的资源</strong>。</p>\n<ul>\n<li>\n<p>并且为了系统安全，很多地方还必须保护这种互斥性。</p>\n</li>\n<li>\n<p>因此，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>很多时候都无法破坏互斥条件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}很多时候都无法破坏互斥条件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">很多时候都无法破坏互斥条件</span></span></span></span>。</p>\n</li>\n</ul>\n<h4 id=\"破坏不剥夺条件\"><a class=\"anchor\" href=\"#破坏不剥夺条件\">#</a> 破坏不剥夺条件</h4>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>不剥夺条件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}不剥夺条件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">不剥夺条件</span></span></span></span>：进程所获得的资源在未使用完之前，不能由其他进程强行夺走，只能主动释放。</p>\n<p>破坏不剥夺条件:</p>\n<p>① 方案一：当某个进程请求新的资源得不到满足时，它必须<strong>立即释放保持的所有资源</strong>，待以后需要时再重新申请。也就是说，即使某些资源尚未使用完，也需要主动释放，从而破坏了不可剥夺条件。</p>\n<p>② 方案二：当某个进程需要的资源被其他进程所占有的时候，可以由操作系统协助，将想要的资源强行剥夺。这种方式一般需要考虑各进程的<strong>优先级</strong>（比如：剥夺调度方式，就是将处理机资源强行剥夺给优先级更高的进程使用)</p>\n<hr />\n<p>该策略的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>缺点</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}缺点</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">缺点</span></span></span></span></p>\n<ul>\n<li>\n<p>实现起来比较复杂</p>\n</li>\n<li>\n<p>释放已获得的资源可能造成前一阶段工作的失效。</p>\n</li>\n<li>\n<p>因此这种方法一般只适用于<strong>易保存和恢复状态的资源</strong>，如  <code>CPU</code> 。</p>\n</li>\n<li>\n<p>反复地申请和释放资源会增加系统开销，降低系统吞吐量。</p>\n</li>\n<li>\n<p>若采用方案一，意味着只要暂时得不到某个资源、之前获得的那些资源就都需要放弃，以后再重新申请。<strong>如果一直发生这样的情况，就会导致进程饥饿。</strong></p>\n</li>\n</ul>\n<h4 id=\"破坏请求和保持条件\"><a class=\"anchor\" href=\"#破坏请求和保持条件\">#</a> 破坏请求和保持条件</h4>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>请求和保持条件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}请求和保持条件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">请求和保持条件</span></span></span></span>：进程<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>已经保持了至少一个资源</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}已经保持了至少一个资源</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">已经保持了至少一个资源</span></span></span></span>，但又提出了新的资源<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>请求</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}请求</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">请求</span></span></span></span>，而该资源又被其他进程占有，此时请求进程被阻塞，但又对自己已有的资源<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>保持</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}保持</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">保持</span></span></span></span>不放。</p>\n<p>可以<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>采用静态分配方法</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}采用静态分配方法</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">采用静态分配方法</span></span></span></span>，即进程在<strong>运行前一次申请完它所需要的全部资源</strong>，在它的资源未满足前，不让它投入运行。一旦投入运行后，这些资源就一直归它所有，该进程就不会再请求别的任何资源了。</p>\n<hr />\n<p>该策略实现起来简单，但也有明显的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>缺点</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}缺点</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">缺点</span></span></span></span>:</p>\n<ul>\n<li>\n<p>有些资源可能只需要用很短的时间，因此如果进程的整个运行期间都一直保持着所有资源，就会造成严重的资源浪费，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>资源利用率极低</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}资源利用率极低</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">资源利用率极低</span></span></span></span>。</p>\n</li>\n<li>\n<p>另外，该策略也有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>可能导致某些进程饥饿</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}可能导致某些进程饥饿</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">可能导致某些进程饥饿</span></span></span></span>。</p>\n</li>\n</ul>\n<p>如下所示：若有源源不断地  <code>A</code>  类进程进来，资源 1 一直被分配给  <code>A</code>  类进程，会导致  <code>C</code>  类进程饥饿</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230205203845412.png\" alt=\"image-20230205203845412\" /></p>\n<h4 id=\"破坏循环等待条件\"><a class=\"anchor\" href=\"#破坏循环等待条件\">#</a> 破坏循环等待条件</h4>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>循环等待条件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}循环等待条件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">循环等待条件</span></span></span></span>：存在一种进程资源的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>循环等待链</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}循环等待链</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">循环等待链</span></span></span></span>，链中的每一个进程已获得的资源同时被下一个进程所请求。</p>\n<p>可采用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>顺序资源分配法</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}顺序资源分配法</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">顺序资源分配法</span></span></span></span>。首先给系统中的资源编号，规定每个进程必<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>须按编号递增的顺序请求资源</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}须按编号递增的顺序请求资源</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">须按编号递增的顺序请求资源</span></span></span></span>，同类资源（即编号相同的资源）一次申请完。</p>\n<p>原理分析：一个进程只有已占有小编号的资源时，才有资格申请更大编号的资源。按此规则，已持有大编号资源的进程不可能逆向地回来申请小编号的资源，从而就不会产生循环等待的现象。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230205204611090.png\" alt=\"image-20230205204611090\" /></p>\n<hr />\n<p>该策略的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>缺点</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}缺点</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">缺点</span></span></span></span>:</p>\n<ul>\n<li>不方便增加新的设备，因为可能需要重新分配所有的编号；</li>\n<li>进程实际使用资源的顺序可能和编号递增<strong>顺序不一致，会导致资源浪费</strong>；</li>\n</ul>\n<p>例如：5 号资源为打印机，7 号资源为扫描仪。 <code>P3</code>  进程应该先使用扫描仪，在使用打印机，但是实际上缺失先使用打印机，再使用扫描仪，导致打印机<strong>空闲</strong>了很长一段时间，等到扫描仪使用完了在使用打印机资源。因此导致系统资源的浪费</p>\n<ul>\n<li>必须按规定次序申请资源，用户编程麻烦。</li>\n</ul>\n<h3 id=\"避免死锁银行家算法\"><a class=\"anchor\" href=\"#避免死锁银行家算法\">#</a> 避免死锁（银行家算法）</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230205212214871.png\" alt=\"image-20230205212214871\" /></p>\n<h4 id=\"什么是安全序列\"><a class=\"anchor\" href=\"#什么是安全序列\">#</a> 什么是安全序列</h4>\n<p>你是一位成功的银行家，手里掌握着 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>100</mn></mrow><annotation encoding=\"application/x-tex\">100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">100</span></span></span></span> 个亿的资金...<br />\n 有三个企业想找你贷款，分别是企业  <code>B</code> 、企业  <code>A</code> 、企业  <code>T</code> ，为描述方便，简称  <code>BAT</code>  。</p>\n<p><code>B</code>  表示:“大哥，我最多会跟你借 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>70</mn></mrow><annotation encoding=\"application/x-tex\">70</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">70</span></span></span></span> 亿...”</p>\n<p><code>A</code>  表示:“大哥，我最多会跟你借 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>40</mn></mrow><annotation encoding=\"application/x-tex\">40</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">40</span></span></span></span> 亿..”</p>\n<p><code>T</code>  表示:“大哥，我最多会跟你借 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>50</mn></mrow><annotation encoding=\"application/x-tex\">50</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">50</span></span></span></span> 亿..”</p>\n<p><strong>然而... 江湖中有个不成文的规矩：如果你借给企业的钱总数达不到企业提出的最大要求，那么不管你之前给企业借了多少钱，那些钱都拿不回来了....</strong></p>\n<p>刚开始， <code>BAT</code>  三个企业分别从你这儿借了 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>20</mn></mrow><annotation encoding=\"application/x-tex\">20</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">20</span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">10</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">10</span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>30</mn></mrow><annotation encoding=\"application/x-tex\">30</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">30</span></span></span></span> 亿....</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230205212604852.png\" alt=\"image-20230205212604852\" /></p>\n<p>① 先给  <code>B</code>  借 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>30</mn></mrow><annotation encoding=\"application/x-tex\">30</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">30</span></span></span></span> 亿</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230205212946136.png\" alt=\"image-20230205212946136\" /></p>\n<p>所以给  <code>B</code>  借 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>30</mn></mrow><annotation encoding=\"application/x-tex\">30</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">30</span></span></span></span> 亿是不安全的...</p>\n<hr />\n<p>② 先给  <code>A</code>  借 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>20</mn></mrow><annotation encoding=\"application/x-tex\">20</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">20</span></span></span></span> 亿，再借给  <code>B</code>  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>50</mn></mrow><annotation encoding=\"application/x-tex\">50</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">50</span></span></span></span> 亿</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230205213233137.png\" alt=\"image-20230205213233137\" /></p>\n<hr />\n<p>③ 先给  <code>A</code>  借 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>20</mn></mrow><annotation encoding=\"application/x-tex\">20</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">20</span></span></span></span> 亿，再借给  <code>T</code>  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>20</mn></mrow><annotation encoding=\"application/x-tex\">20</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">20</span></span></span></span> 亿</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230205213358083.png\" alt=\"image-20230205213358083\" /></p>\n<hr />\n<h4 id=\"安全序列-不安全状态-死锁的联系\"><a class=\"anchor\" href=\"#安全序列-不安全状态-死锁的联系\">#</a> 安全序列、不安全状态、死锁的联系</h4>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230205213527877.png\" alt=\"image-20230205213527877\" /></p>\n<p>所谓<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>安全序列</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}安全序列</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">安全序列</span></span></span></span>，就是指如果系统按照这种序列分配资源，则每个进程都能顺利完成。只要能找出一个安全序列，系统就是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>安全状态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}安全状态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">安全状态</span></span></span></span>。当然，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>安全序列可能有多个</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}安全序列可能有多个</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">安全序列可能有多个</span></span></span></span>。</p>\n<p>如果分配了资源之后，系统中<strong>找不出任何一个安全序列</strong>，系统就进入了<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>不安全状态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}不安全状态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">不安全状态</span></span></span></span>。这就意味着之后<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>可能</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}可能</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">可能</span></span></span></span>所有进程都无法顺利的执行下去。当然，如果有进程提前归还了一些资源，那<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>系统也有可能重新回到安全状态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}系统也有可能重新回到安全状态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">系统也有可能重新回到安全状态</span></span></span></span>，不过我们在分配资源之前总是要考虑到最坏的情况。</p>\n<p>如果系统处于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>安全状态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}安全状态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">安全状态</span></span></span></span>，就<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>一定不会</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}一定不会</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">一定不会</span></span></span></span>发生<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>死锁</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}死锁</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">死锁</span></span></span></span>。如果系统进入<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>不安全状态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}不安全状态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">不安全状态</span></span></span></span>，就<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>可能</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}可能</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">可能</span></span></span></span>发生<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>死锁</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}死锁</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">死锁</span></span></span></span>（处于不安全状态未必就是发生了死锁，但发生死锁时一定是在不安全状态)</p>\n<hr />\n<p>因此可以<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>在资源分配之前预先判断这次分配是否会导致系统进入不安全状态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}在资源分配之前预先判断这次分配是否会导致系统进入不安全状态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">在资源分配之前预先判断这次分配是否会导致系统进入不安全状态</span></span></span></span>，以此决定是否答应资源分配请求。这也是 “<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>银行家算法</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}银行家算法</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">银行家算法</span></span></span></span>” 的核心思想。</p>\n<h4 id=\"银行家算法\"><a class=\"anchor\" href=\"#银行家算法\">#</a> 银行家算法</h4>\n<p>银行家算法是荷兰学者  <code>Dijkstra</code>  为银行系统设计的，以确保银行在发放现金贷款时，不会发生不能满足所有客户需要的情况。后来该算法被用在操作系统中，用于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>避免死锁</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}避免死锁</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">避免死锁</span></span></span></span>。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>核心思想</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}核心思想</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">核心思想</span></span></span></span>：在进程提出资源申请时，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>先预判此次分配是否会导致系统进入不安全状态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}先预判此次分配是否会导致系统进入不安全状态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">先预判此次分配是否会导致系统进入不安全状态</span></span></span></span></p>\n<ul>\n<li>如果会进入不安全状态，就暂时不答应这次请求，让该进程先阻塞等待。</li>\n</ul>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230205214319141.png\" alt=\"image-20230205214319141\" /></p>\n<hr />\n<p>此时系统是否处于安全状态？</p>\n<p>思路：尝试找出一个安全序列...<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mrow><mi>P</mi><mn>1</mn></mrow></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}{P1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\" style=\"color:red;\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;color:red;\">P</span><span class=\"mord\" style=\"color:red;\">1</span></span></span></span></span></p>\n<p>依次检查剩余可用资源  <code>(3,3,2)</code>  是否能满足各进程的需求</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230205214812187.png\" alt=\"image-20230205214812187\" /></p>\n<p>① 可满足  <code>P1</code>  需求，将  <code>P1</code>  加入安全序列，并更新剩余可用资源值为 <code>(5,3,2)</code></p>\n<p>依次检查剩余可用资源  <code>(5,3,2)</code>  是否能满足剩余进程（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>不包括已加入安全序列的进程</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}不包括已加入安全序列的进程</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">不包括已加入安全序列的进程</span></span></span></span>）的需求</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230205215001648.png\" alt=\"image-20230205215001648\" /></p>\n<p>说明如果优先把资源分配给  <code>P3</code>  , 那  <code>P3</code>  一定是可以顺利执行结束的。等  <code>P3</code>  结束了就会归还资源。</p>\n<ul>\n<li>于是，资源数就可以增加到  <code>(2,1,1)+(5,3,2)=(7,4,3)</code></li>\n</ul>\n<p>② 可满足  <code>P3</code>  需求，将  <code>P3</code>  加入安全序列，并更新剩余可用资源值为 <code>(7,4,3)</code></p>\n<p>依次检查剩余可用资源  <code>(7,4,3)</code>  是否能满足剩余进程（不包括已加入安全序列的进程）的需求.....</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230205215208268.png\" alt=\"image-20230205215208268\" /></p>\n<p>……….</p>\n<p>以此类推，共五次循环检查即可将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span></span></span></span> 个进程都加入安全序列中，最终可得一个安全序列。</p>\n<p>该算法称为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>安全性算法</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}安全性算法</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">安全性算法</span></span></span></span>。可以很方便地用代码实现以上流程，每一轮检查都从编号较小的进程开始检查实际做题时可以更快速的得到安全序列。</p>\n<hr />\n<p><strong>对于手算</strong></p>\n<p>① 可以找到安全序列的例子</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230205215627709.png\" alt=\"image-20230205215627709\" /></p>\n<p>实际做题（手算）时可用更快速的方法找到一个安全序列:<br />\n 经对比发现， <code>(3,3,2)</code>  可满足  <code>P1</code>  、 <code>P3</code>  ，说明无论如何，这两个进程的资源需求一定是可以依次被满足的，因此  <code>P1</code> 、 <code>P3</code>  一定可以顺利的执行完，并归还资源。可把  <code>P1</code> 、 <code>P3</code>  先加入安全序列。<br />\n <code>(2,0,0)+(2,1,1)+(3,3,2)= (7,4,3)</code></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230205215722103.png\" alt=\"image-20230205215722103\" /></p>\n<p>剩下的  <code>P0</code> 、 <code>P2</code>  、 <code>P4</code>  都可被满足。同理，这些进程都可以加入安全序列。</p>\n<p>于是，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span></span></span></span> 个进程全部加入安全序列，说明此时系统<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>处于安全状态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}处于安全状态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">处于安全状态</span></span></span></span>，暂<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>不可能发生死锁</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}不可能发生死锁</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">不可能发生死锁</span></span></span></span></p>\n<p>② 找不到安全序列的例子</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230205215938160.png\" alt=\"image-20230205215938160\" /></p>\n<p>经对比发现， <code>(3,3,2)</code>  可满足  <code>P1</code> 、 <code>P3</code> ，说明无论如何，这两个进程的资源需求一定是可以依次被满足的，因此 <code>P1</code> 、 <code>P3</code>  一定可以顺利的执行完，并归还资源。可把  <code>P1</code> 、 <code>P3</code>  先加入安全序列。</p>\n<ul>\n<li><code>(2,0,0)+(2,1,1)+(3,3,2)= (7,4,3)</code></li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230205220040671.png\" alt=\"image-20230205220040671\" /></p>\n<p>剩下的  <code>P0</code>  需要  <code>(8,4,3)</code> ， <code>P2</code>  需要  <code>(6,5,0)</code> ， <code>P4</code>  需要  <code>(4,3,4)</code>  任何一个进程都不能被完全满足</p>\n<p>于是，无法找到任何一个安全序列，说明此时系统处于<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>不安全状态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}不安全状态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">不安全状态</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>有可能发生死锁</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}有可能发生死锁</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">有可能发生死锁</span></span></span></span>。</p>\n<h4 id=\"java-实现银行家算法\"><a class=\"anchor\" href=\"#java-实现银行家算法\">#</a> Java 实现银行家算法</h4>\n<p><code>BankerAlgorithm.class</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BankerAlgorithm</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * @param maximumDemands 最大需求，第 i 个进程的最大需求为数组 j</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * @param assigneds      已分配，第 i 个进程的已分配的数量为数组 j</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * @param totalResource  可用资源数</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * @return 是否是安全序列</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSafeSequence</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> maximumDemands<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> assigneds<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> totalResource<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 预处理，获取当前进程最多还需要的需求</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> mostNeededs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>maximumDemands<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>maximumDemands<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> remainResource <span class=\"token operator\">=</span> totalResource<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> maximumDemands<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 最多还需要</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> curNeed <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>maximumDemands<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 最大需求</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> curMaxDemand <span class=\"token operator\">=</span> maximumDemands<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// 已分配</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> curAssigned <span class=\"token operator\">=</span> assigneds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> curMaxDemand<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                curNeed<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>curMaxDemand<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> curAssigned<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token keyword\">int</span> total <span class=\"token operator\">=</span> remainResource<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                remainResource<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> total <span class=\"token operator\">-</span> curAssigned<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            mostNeededs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> curNeed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>assigneds<span class=\"token punctuation\">,</span> mostNeededs<span class=\"token punctuation\">,</span> remainResource<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>maximumDemands<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> assigneds<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> mostNeededs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> remainResource<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> isVisited<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 被分配完了</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">==</span> mostNeededs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> mostNeededs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token comment\">// 被访问过了</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isVisited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token comment\">// 满足需求</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> check <span class=\"token operator\">=</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>assigneds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> mostNeededs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> remainResource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>check <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temp <span class=\"token operator\">=</span> remainResource<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                remainResource <span class=\"token operator\">=</span> check<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token comment\">// 移除当前进程</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                isVisited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>assigneds<span class=\"token punctuation\">,</span> mostNeededs<span class=\"token punctuation\">,</span> remainResource<span class=\"token punctuation\">,</span> isVisited<span class=\"token punctuation\">,</span> cnt <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                isVisited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                remainResource <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\">// 检查是否满足需求，并且重新计算剩余资源数</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> assigned<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> mostNeeded<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> remainResource<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>mostNeeded<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> mostNeeded<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token keyword\">int</span> diff <span class=\"token operator\">=</span> remainResource<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> mostNeeded<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>diff <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> assigned<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> remainResource<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>Test.class</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">BankerAlgorithm</span> bankerAlgorithm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BankerAlgorithm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">//int[][] maximumDemands = new int[][]&#123; &#123;7, 5, 3&#125;, &#123;3, 2, 2&#125;, &#123;9, 0, 2&#125;, &#123;2, 2, 2&#125;, &#123;4, 3, 3&#125;&#125;;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">//int[][] assigneds = new int[][]&#123; &#123;0, 1, 0&#125;, &#123;2, 0, 0&#125;, &#123;3, 0, 2&#125;, &#123;2, 1, 1&#125;, &#123;0, 0, 2&#125;&#125;;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> maximumDemands <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> assigneds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> totalResource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bankerAlgorithm<span class=\"token punctuation\">.</span><span class=\"token function\">isSafeSequence</span><span class=\"token punctuation\">(</span>maximumDemands<span class=\"token punctuation\">,</span> assigneds<span class=\"token punctuation\">,</span> totalResource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"总结-8\"><a class=\"anchor\" href=\"#总结-8\">#</a> 总结</h4>\n<p>银行家算法步骤:</p>\n<p>① 检查此次申请是否超过了之前声明的最大需求数</p>\n<p>② 检查此时系统剩余的可用资源是否还能满足这次请求</p>\n<p>③ 试探着分配，更改各数据结构</p>\n<p>④ 用安全性算法检查此次分配是否会导致系统进入不安全状态</p>\n<p>安全性算法步骤:</p>\n<ul>\n<li>检查当前的剩余可用资源是否能满足某个进程的最大需求，如果可以，就把该进程加入安全序列，并把该进程持有的资源全部回收。</li>\n</ul>\n<p>系统处于不安全状态未必死锁，但死锁时一定处于不安全状态。系统处于安全状态一定不会死锁。</p>\n<h3 id=\"检测和解除\"><a class=\"anchor\" href=\"#检测和解除\">#</a> 检测和解除</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230205232424000.png\" alt=\"image-20230205232424000\" /></p>\n<p>如果系统中既不采取预防死锁的措施，也不采取避免死锁的措施，系统就很<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>可能发生死锁</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}可能发生死锁</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">可能发生死锁</span></span></span></span>。在这种情况下，系统应当提供两个算法:</p>\n<p>① 死锁检测算法：用于检测系统状态，以确定系统中是否发生了死锁。<br />\n② 死锁解除算法：当认定系统中已经发生了死锁，利用该算法可将系统从死锁状态中解脱出来。</p>\n<h4 id=\"死锁的检测\"><a class=\"anchor\" href=\"#死锁的检测\">#</a> 死锁的检测</h4>\n<p>为了能对系统是否已发生了死锁进行检测，必须:</p>\n<p>① 用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>某种数据结构</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}某种数据结构</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">某种数据结构</span></span></span></span>来保存资源的请求和分配信息；</p>\n<p>② 提供<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>一种算法</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}一种算法</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">一种算法</span></span></span></span>，利用上述信息来检测系统是否已进入死锁状态。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230205232953003.png\" alt=\"image-20230205232953003\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230205232958501.png\" alt=\"image-20230205232958501\" /></p>\n<h5 id=\"java-定义该数据结构资源分配图\"><a class=\"anchor\" href=\"#java-定义该数据结构资源分配图\">#</a> Java 定义该数据结构（资源分配图）</h5>\n<p><strong>① map 构造邻接表</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ResourceAllocationGraph</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 对于 Map&lt;Node, List&lt;Pair>> map</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * 若 Node 为进程则 List&lt;Pair> 为申请某些资源数量，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 例如：P1 (false, 1) : [Pair (R1, 1)]</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * 表示 p1 请求资源的总数量为 1, 申请资源 R1 的数量为 1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * 若 Node 为资源则 List&lt;Pair> 为分配给进程的资源数量</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 例如：R1 (true, 0) : [Pair (P1, 2), Pair (P2, 1)]</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * 表示 R1 剩余资源为 0, 分配给 P1, p2 的资源数分别为 2, 1</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> processes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> resources<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 是否是资源的标志， true : 资源， false : 进程</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">boolean</span> isResource<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 若为资源：当前剩余资源的总数量</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 若为进程：当前进程请求资源的总数量</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 进程: pi 被分配的资源的节点 + 相应的分配数</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 资源: ri 被请求的进程节点 + 相应的请求数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> inDegreeNodes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 进程：pi 申请的资源节点 + 相应的申请数</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 资源: ri 分配出去的进程节点 + 相应的分配数</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> outDegreeNodes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> isResource<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isResource <span class=\"token operator\">=</span> isResource<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>② 双向链表</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ResourceAllocationGraph</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Node</span> prevProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Node</span> nextProcess<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Node</span> prevResource<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Node</span> nextResource<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">pSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">rSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 是否是资源的标志， true : 资源， false : 进程</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">boolean</span> isResource<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 若为资源：当前剩余资源的总数量</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 若为进程：当前进程请求资源的总数量</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 进程: pi 被分配的资源的节点 + 相应的分配数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 资源: ri 被请求的进程节点 + 相应的请求数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> inDegreeNodes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 进程：pi 申请的资源节点 + 相应的申请数</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 资源: ri 分配出去的进程节点 + 相应的分配数</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> outDegreeNodes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> isResource<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isResource <span class=\"token operator\">=</span> isResource<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h5 id=\"死锁检测的流程\"><a class=\"anchor\" href=\"#死锁检测的流程\">#</a> 死锁检测的流程</h5>\n<p>① 如果系统中剩余的可用资源数足够满足进程的需求，那么这个进程暂时是不会阻塞的，可以顺利地执行下去。</p>\n<p>② 如果这个进程执行结束了把资源归还系统，就可能使某些正在等待资源的进程被激活，并顺利地执行下去。</p>\n<p>③ 相应的，这些被激活的进程执行完了之后又会归还一些资源，这样可能又会激活另外一些阻塞的进程..</p>\n<p>如果按上述过程分析，最终<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>能消除所有边</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}能消除所有边</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">能消除所有边</span></span></span></span>，就称这个图是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mo>&lt;</mo><mi>i</mi><mo>&gt;</mo><mtext>可完全简化的</mtext><mo>&lt;</mo><mi mathvariant=\"normal\">/</mi><mi>i</mi><mo>&gt;</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}&lt;i&gt;可完全简化的&lt;/i&gt;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\" style=\"color:red;\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6986em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"color:red;\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">可完全简化的</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord mathnormal\" style=\"color:red;\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">&gt;</span></span></span></span>。此时一定<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>没有发生死锁</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}没有发生死锁</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">没有发生死锁</span></span></span></span>（相当于能找到一个安全序列)</p>\n<p>如果最终<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>不能消除所有边</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}不能消除所有边</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">不能消除所有边</span></span></span></span>，那么此时就是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>发生了死锁</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}发生了死锁</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">发生了死锁</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>最终还连着边的那些进程就是处于死锁状态的进程</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}最终还连着边的那些进程就是处于死锁状态的进程</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">最终还连着边的那些进程就是处于死锁状态的进程</span></span></span></span>。</p>\n<hr />\n<p><strong>安全序列的情况</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230205232958501.png\" alt=\"image-20230205232958501\" /></p>\n<p>上述所示：</p>\n<ul>\n<li>\n<p>对于  <code>P2</code>  来说，若  <code>P2</code>  想申请  <code>R1</code>  资源，但是  <code>R1</code>  已经分配出去 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span> 个，因此  <code>P2</code>  的申请请求不能被满足</p>\n</li>\n<li>\n<p>对于  <code>P1</code>  来说，若  <code>P1</code>  想申请  <code>R2</code>  资源， <code>R2</code>  已经分给  <code>P2</code>  一个，还剩余 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 个，所以  <code>P1</code>  可以得到满足。然后等待  <code>P1</code>  运行完毕之后， <code>P1</code>  会释放自己所拥有的资源（即： <code>R1</code>  ：0 -&gt; 2）。之后  <code>P2</code>  也可以得到满足...</p>\n<p>具体流程如下所示：</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/p.gif\" alt=\"p\" /></p>\n</li>\n</ul>\n<hr />\n<p><strong>产生死锁的情况</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230206000001043.png\" alt=\"image-20230206000001043\" /></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>最终还连着边的那些进程就是处于死锁状态的进程</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}最终还连着边的那些进程就是处于死锁状态的进程</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">最终还连着边的那些进程就是处于死锁状态的进程</span></span></span></span></p>\n<p>如下所示</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230206000131594.png\" alt=\"image-20230206000131594\" /></p>\n<hr />\n<h5 id=\"死锁检测的算法\"><a class=\"anchor\" href=\"#死锁检测的算法\">#</a> 死锁检测的算法</h5>\n<p>1）在资源分配图中，找出 <code>既不阻塞又不是孤点的进程 Pi</code> （即找出一条有向边与它相连，<strong>且该有向边对应资源的申请数量小于等于系统中已有空闲资源数量</strong>。</p>\n<ul>\n<li>如下图中， <code>R1</code>  没有空闲资源， <code>R2</code>  有一个空闲资源。若所有的连接该进程的边均满足上述条件，则这个进程能继续运行直至完成，然后释放它所占有的所有资源）。消去它所有的请求边和分配变，使之称为孤立的结点。在下图中， <code>P1</code>  是满足这一条件的进程结点，于是将  <code>P1</code>  的所有边消去。</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230206000520318.png\" alt=\"image-20230206000520318\" /></p>\n<hr />\n<p>2）进程  <code>Pi</code>  所释放的资源，可以唤醒某些因等待这些资源而阻塞的进程，原来的阻塞进程可能变为非阻塞进程。</p>\n<ul>\n<li>在下图中， <code>P2</code>  就满足这样的条件。根据 1) 中的方法进行一系列简化后，若能消去途中所有的边，则称该图是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>可完全简化的</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}可完全简化的</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">可完全简化的</span></span></span></span>。</li>\n</ul>\n<p><code>P1</code>  的所有边消去后的资源分配图</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230206000620976.png\" alt=\"image-20230206000620976\" /></p>\n<p><code>P2</code>  的所有边消去后的可完全简化的资源分配图</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230206000738761.png\" alt=\"image-20230206000738761\" /></p>\n<hr />\n<h5 id=\"java-实现死锁检测的算法\"><a class=\"anchor\" href=\"#java-实现死锁检测的算法\">#</a> Java 实现死锁检测的算法</h5>\n<p>资源分配图</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 资源分配图</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ResourceAllocationGraph</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * 对于 Map&lt;Node, List&lt;Pair>> map</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 若 Node 为进程则 List&lt;Pair> 为申请某些资源数量，</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * 例如：P1 (false, 1) : [Pair (R1, 1)]</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * 表示 p1 请求资源的总数量为 1, 申请资源 R1 的数量为 1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 若 Node 为资源则 List&lt;Pair> 为分配给进程的资源数量</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * 例如：R1 (true, 0) : [Pair (P1, 2), Pair (P2, 1)]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 表示 R1 剩余资源为 0, 分配给 P1, p2 的资源数分别为 2, 1</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> processes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> resources<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 是否是资源的标志， true : 资源， false : 进程</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">boolean</span> isResource<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 若为资源：当前剩余资源的总数量</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 若为进程：当前进程请求资源的总数量</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 进程: pi 被分配的资源的节点 + 相应的分配数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 资源: ri 被请求的进程节点 + 相应的请求数</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> inDegreeNodes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 进程：pi 申请的资源节点 + 相应的申请数</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 资源: ri 分配出去的进程节点 + 相应的分配数</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> outDegreeNodes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> isResource<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isResource <span class=\"token operator\">=</span> isResource<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>step 1 : 构建资源分配图</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230206000520318.png\" alt=\"image-20230206000520318\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ResourceAllocationGraph</span> <span class=\"token function\">builderResourceGraph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 资源</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Node</span> r1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Node</span> r2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 进程</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//        Node p1 = new Node(false, 1);</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Node</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">Node</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//r1 分配出去的资源和请求 r1 资源的进程</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    r1<span class=\"token punctuation\">.</span>outDegreeNodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    r1<span class=\"token punctuation\">.</span>outDegreeNodes<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    r1<span class=\"token punctuation\">.</span>inDegreeNodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    r1<span class=\"token punctuation\">.</span>inDegreeNodes<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">//r2 分配出去的资源和请求 r1 资源的进程</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    r2<span class=\"token punctuation\">.</span>outDegreeNodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    r2<span class=\"token punctuation\">.</span>outDegreeNodes<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    r2<span class=\"token punctuation\">.</span>inDegreeNodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">//        r2.inDegreeNodes.put(p1, 1);</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    r2<span class=\"token punctuation\">.</span>inDegreeNodes<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">//p1 申请的资源和被分配的资源</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>outDegreeNodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">//        p1.outDegreeNodes.put(r2, 1);</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>outDegreeNodes<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>r2<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>inDegreeNodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>inDegreeNodes<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">//p2 申请的资源和被分配的资源</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>outDegreeNodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>outDegreeNodes<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>inDegreeNodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>inDegreeNodes<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>r2<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 建立资源分配图</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token class-name\">ResourceAllocationGraph</span> graph <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResourceAllocationGraph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    graph<span class=\"token punctuation\">.</span>processes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    graph<span class=\"token punctuation\">.</span>processes<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    graph<span class=\"token punctuation\">.</span>processes<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    graph<span class=\"token punctuation\">.</span>resources <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    graph<span class=\"token punctuation\">.</span>resources<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    graph<span class=\"token punctuation\">.</span>resources<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>r2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">return</span> graph<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>step 2 : 死锁检测，true : 死锁，false : 不产生死锁</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasDeadlock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResourceAllocationGraph</span> graph<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> isolated<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//1. 找出即不阻塞又不是孤立的进程 pi</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//  即找出一条有向边与它相连，且该有向边对应资源的申请数量小于等于系统中已有空闲资源数量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> processes <span class=\"token operator\">=</span> graph<span class=\"token punctuation\">.</span>processes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 所有的 pi 都孤立了</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 可能有多个</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> pis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//pi 申请的资源必须全部满足条件</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> processes<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 说明 pi 已经被孤立了</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isolated<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Node</span> pi <span class=\"token operator\">=</span> processes<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//pi 申请的资源节点剩余资源 >= pi 申请的资源</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> entry <span class=\"token operator\">:</span> pi<span class=\"token punctuation\">.</span>outDegreeNodes<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">Node</span> node <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            pis<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 没有 pi , 产生了死锁</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pis<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">//2. pi 释放资源</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pis<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">Node</span> pi <span class=\"token operator\">=</span> pis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">//pi 对应申请的相应资源节点， 释放 pi</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        pi<span class=\"token punctuation\">.</span>outDegreeNodes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> integer<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            node<span class=\"token punctuation\">.</span>inDegreeNodes<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 分配给 pi 的相应资源节点 增加相应的资源数，并释放 pi</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        pi<span class=\"token punctuation\">.</span>inDegreeNodes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> integer<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">+=</span> integer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            node<span class=\"token punctuation\">.</span>outDegreeNodes<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 让 pi 孤立</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        isolated<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        cnt<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">// 递归地检测， 没有死锁 false, 有死锁 true</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">hasDeadlock</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> isolated<span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>整体代码</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeadlockDetection</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">//1. 构建资源分配图</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">DeadlockDetection</span> deadlockDetection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeadlockDetection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ResourceAllocationGraph</span> graph <span class=\"token operator\">=</span> deadlockDetection<span class=\"token punctuation\">.</span><span class=\"token function\">builderResourceGraph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//2. 死锁检测，true : 死锁，false : 不产生死锁</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>deadlockDetection<span class=\"token punctuation\">.</span><span class=\"token function\">hasDeadlock</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>graph<span class=\"token punctuation\">.</span>processes<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> graph<span class=\"token punctuation\">.</span>processes<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasDeadlock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResourceAllocationGraph</span> graph<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> isolated<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//1. 找出即不阻塞又不是孤立的进程 pi</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">//  即找出一条有向边与它相连，且该有向边对应资源的申请数量小于等于系统中已有空闲资源数量</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> processes <span class=\"token operator\">=</span> graph<span class=\"token punctuation\">.</span>processes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 所有的 pi 都孤立了</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 可能有多个</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> pis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//pi 申请的资源必须全部满足条件</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> processes<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// 说明 pi 已经被孤立了</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isolated<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token class-name\">Node</span> pi <span class=\"token operator\">=</span> processes<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">//pi 申请的资源节点剩余资源 >= pi 申请的资源</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> entry <span class=\"token operator\">:</span> pi<span class=\"token punctuation\">.</span>outDegreeNodes<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token class-name\">Node</span> node <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                pis<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 没有 pi , 产生了死锁</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pis<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">//2. pi 释放资源</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pis<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token class-name\">Node</span> pi <span class=\"token operator\">=</span> pis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token comment\">//pi 对应申请的相应资源节点， 释放 pi</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            pi<span class=\"token punctuation\">.</span>outDegreeNodes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> integer<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                node<span class=\"token punctuation\">.</span>inDegreeNodes<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token comment\">// 分配给 pi 的相应资源节点 增加相应的资源数，并释放 pi</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            pi<span class=\"token punctuation\">.</span>inDegreeNodes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> integer<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                node<span class=\"token punctuation\">.</span>val <span class=\"token operator\">+=</span> integer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                node<span class=\"token punctuation\">.</span>outDegreeNodes<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token comment\">// 让 pi 孤立</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            isolated<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            cnt<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">// 递归地检测， 没有死锁 false, 有死锁 true</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">hasDeadlock</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> isolated<span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResourceAllocationGraph</span> <span class=\"token function\">builderResourceGraph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">// 资源</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token class-name\">Node</span> r1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token class-name\">Node</span> r2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token comment\">// 进程</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token comment\">//        Node p1 = new Node(false, 1);</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token class-name\">Node</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token class-name\">Node</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token comment\">//r1 分配出去的资源和请求 r1 资源的进程</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        r1<span class=\"token punctuation\">.</span>outDegreeNodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        r1<span class=\"token punctuation\">.</span>outDegreeNodes<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        r1<span class=\"token punctuation\">.</span>inDegreeNodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        r1<span class=\"token punctuation\">.</span>inDegreeNodes<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token comment\">//r2 分配出去的资源和请求 r1 资源的进程</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        r2<span class=\"token punctuation\">.</span>outDegreeNodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        r2<span class=\"token punctuation\">.</span>outDegreeNodes<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        r2<span class=\"token punctuation\">.</span>inDegreeNodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token comment\">//        r2.inDegreeNodes.put(p1, 1);</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        r2<span class=\"token punctuation\">.</span>inDegreeNodes<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token comment\">//p1 申请的资源和被分配的资源</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        p1<span class=\"token punctuation\">.</span>outDegreeNodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token comment\">//        p1.outDegreeNodes.put(r2, 1);</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        p1<span class=\"token punctuation\">.</span>outDegreeNodes<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>r2<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        p1<span class=\"token punctuation\">.</span>inDegreeNodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        p1<span class=\"token punctuation\">.</span>inDegreeNodes<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token comment\">//p2 申请的资源和被分配的资源</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        p2<span class=\"token punctuation\">.</span>outDegreeNodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        p2<span class=\"token punctuation\">.</span>outDegreeNodes<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        p2<span class=\"token punctuation\">.</span>inDegreeNodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        p2<span class=\"token punctuation\">.</span>inDegreeNodes<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>r2<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token comment\">// 建立资源分配图</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token class-name\">ResourceAllocationGraph</span> graph <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResourceAllocationGraph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        graph<span class=\"token punctuation\">.</span>processes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        graph<span class=\"token punctuation\">.</span>processes<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        graph<span class=\"token punctuation\">.</span>processes<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        graph<span class=\"token punctuation\">.</span>resources <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        graph<span class=\"token punctuation\">.</span>resources<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        graph<span class=\"token punctuation\">.</span>resources<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>r2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token keyword\">return</span> graph<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token comment\">// 资源分配图</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ResourceAllocationGraph</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>     * 对于 Map&lt;Node, List&lt;Pair>> map</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>     * 若 Node 为进程则 List&lt;Pair> 为申请某些资源数量，</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>     * 例如：P1 (false, 1) : [Pair (R1, 1)]</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>     * 表示 p1 请求资源的总数量为 1, 申请资源 R1 的数量为 1</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>     * 若 Node 为资源则 List&lt;Pair> 为分配给进程的资源数量</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>     * 例如：R1 (true, 0) : [Pair (P1, 2), Pair (P2, 1)]</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>     * 表示 R1 剩余资源为 0, 分配给 P1, p2 的资源数分别为 2, 1</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> processes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">></span></span> resources<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token comment\">// 是否是资源的标志， true : 资源， false : 进程</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token keyword\">boolean</span> isResource<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    <span class=\"token comment\">// 若为资源：当前剩余资源的总数量</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token comment\">// 若为进程：当前进程请求资源的总数量</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token comment\">// 进程: pi 被分配的资源的节点 + 相应的分配数</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token comment\">// 资源: ri 被请求的进程节点 + 相应的请求数</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> inDegreeNodes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token comment\">// 进程：pi 申请的资源节点 + 相应的申请数</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token comment\">// 资源: ri 分配出去的进程节点 + 相应的分配数</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> outDegreeNodes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> isResource<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isResource <span class=\"token operator\">=</span> isResource<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"死锁定理\"><a class=\"anchor\" href=\"#死锁定理\">#</a> 死锁定理</h5>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>死锁定理</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}死锁定理</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">死锁定理</span></span></span></span>：如果某时刻系统的资源分配图是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>不可完全简化</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}不可完全简化</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">不可完全简化</span></span></span></span>的，那么此时系统<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>死锁</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}死锁</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">死锁</span></span></span></span></p>\n<hr />\n<h4 id=\"死锁的解除\"><a class=\"anchor\" href=\"#死锁的解除\">#</a> 死锁的解除</h4>\n<p>一旦检测出死锁的发生，就应该立即解除死锁。</p>\n<p><strong>补充</strong>：并不是系统中所有的进程都是死锁状态，用死锁检测算法<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>化简资源分配图后，还连着边的那些进程就是死锁进程</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}化简资源分配图后，还连着边的那些进程就是死锁进程</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">化简资源分配图后，还连着边的那些进程就是死锁进程</span></span></span></span></p>\n<hr />\n<h5 id=\"资源剥夺法\"><a class=\"anchor\" href=\"#资源剥夺法\">#</a> 资源剥夺法</h5>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>资源剥夺法</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}资源剥夺法</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">资源剥夺法</span></span></span></span>：</p>\n<ul>\n<li><strong>挂起（暂时放到外存上）某些死锁进程，并抢占它的资源，将这些资源分配给其他的死锁进程。</strong></li>\n<li>但是应防止被挂起的进程长时间得不到资源而 <code>饥饿</code> 。</li>\n</ul>\n<hr />\n<h5 id=\"撤销进程法终止进程法\"><a class=\"anchor\" href=\"#撤销进程法终止进程法\">#</a> 撤销进程法 (终止进程法)</h5>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>撤销进程法</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}撤销进程法</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">撤销进程法</span></span></span></span>（或称<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>终止进程法</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}终止进程法</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">终止进程法</span></span></span></span>）：</p>\n<ul>\n<li><strong>强制撤销部分、甚至全部死锁进程，并剥夺这些进程的资源。</strong></li>\n</ul>\n<p>这种方式的优点是实现简单，但所付出的代价可能会很大。</p>\n<ul>\n<li>因为有些进程可能已经运行了很长时间，已经接近结束了，一旦被终止可谓 <code>功亏一篑</code> ，以后还得从头再来。</li>\n</ul>\n<hr />\n<h5 id=\"进程回退法\"><a class=\"anchor\" href=\"#进程回退法\">#</a> 进程回退法</h5>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>进程回退法</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}进程回退法</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">进程回退法</span></span></span></span>：</p>\n<ul>\n<li><strong>让一个或多个死锁进程回退到足以避免死锁的地步。</strong></li>\n<li>这就要求系统要记录进程的历史信息，设置 <code>还原点</code> 。</li>\n</ul>\n<hr />\n<h5 id=\"如何决定-对谁动手\"><a class=\"anchor\" href=\"#如何决定-对谁动手\">#</a> 如何决定 &quot;对谁动手&quot;</h5>\n<p><strong>① 进程优先级</strong></p>\n<ul>\n<li>例如：进程优先级低的对其下手</li>\n</ul>\n<p><strong>② 已执行多长时间</strong></p>\n<ul>\n<li>例如：执行时间更少的进程，让其牺牲</li>\n</ul>\n<p><strong>③ 还要多久能完成</strong></p>\n<ul>\n<li>例如：牺牲掉还需要更长的时间完成，优先让即将完成的进程获得资源</li>\n</ul>\n<p><strong>④ 进程已经使用了多少资源</strong></p>\n<ul>\n<li>例如：优先牺牲掉已经使用更多资源的进程</li>\n</ul>\n<p><strong>⑤ 进程是交互式的还是批处理式的</strong></p>\n<ul>\n<li>\n<p>若牺牲掉交互式的（即：正在与用户交互的进程），则用户不满意</p>\n</li>\n<li>\n<p>批处理式的无非就是在做一些计算，对用户的及时反馈并不那么在意</p>\n</li>\n<li>\n<p>所以优先牺牲掉批处理式的</p>\n</li>\n</ul>\n<h4 id=\"整体框架-16\"><a class=\"anchor\" href=\"#整体框架-16\">#</a> 整体框架</h4>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230206011904751.png\" alt=\"image-20230206011904751\" /></p>\n",
            "tags": [
                "操作系统"
            ]
        },
        {
            "id": "https://www.htired.top/2023/06/02/os/1%E3%80%81%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/",
            "url": "https://www.htired.top/2023/06/02/os/1%E3%80%81%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/",
            "title": "1、操作系统概述",
            "date_published": "2023-06-02T07:59:27.000Z",
            "content_html": "<h1 id=\"操作系统的概念-功能和目标\"><a class=\"anchor\" href=\"#操作系统的概念-功能和目标\">#</a> 操作系统的概念、功能和目标</h1>\n<p><strong>整体框架</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230111215614396.png\" alt=\"image-20230111215614396\" /></p>\n<h2 id=\"操作系统的层次结构\"><a class=\"anchor\" href=\"#操作系统的层次结构\">#</a> 操作系统的层次结构</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230111210949060.png\" alt=\"image-20230111210949060\" /></p>\n<p>对于<strong>操作系统</strong>：</p>\n<ol>\n<li>负责<strong>管理协调</strong>硬件、软件登计算机资源的工作</li>\n<li>为上层的应用程序、用户提供简单易用的<strong>服务</strong></li>\n<li>操作系统是<strong>系统软件</strong>，而不是硬件</li>\n</ol>\n<p>对于<strong>裸机（纯硬件）</strong>：</p>\n<ul>\n<li>例如：<strong>CPU</strong>、内存、硬盘</li>\n</ul>\n<hr />\n<h2 id=\"操作系统的定义\"><a class=\"anchor\" href=\"#操作系统的定义\">#</a> 操作系统的定义</h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>操作系统</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}操作系统</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">操作系统</span></span></span></span>（Operating System，OS）是指控制和管理整个计算机系统的硬件和软件资源，</p>\n<ul>\n<li>并合理地<strong>组织调度</strong>计算机的工作和资源的分配，</li>\n<li>以提供给用户和其他软件方便的<strong>接口和环境</strong>，（从下往上）</li>\n<li>它是计算机系统中最基本的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>系统软件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}系统软件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">系统软件</span></span></span></span>。（从上往下）</li>\n</ul>\n<p>例如：任务管理器</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230111211412982.png\" alt=\"image-20230111211412982\" /></p>\n<hr />\n<h2 id=\"操作系统的功能和目标\"><a class=\"anchor\" href=\"#操作系统的功能和目标\">#</a> 操作系统的功能和目标</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230111211512098.png\" alt=\"image-20230111211512098\" /></p>\n<p>① 操作系统<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>作为系统资源的管理者</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}作为系统资源的管理者</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">作为系统资源的管理者</span></span></span></span>（这些资源包括软件、硬件、文件等），</p>\n<ul>\n<li>需要提供什么功能？</li>\n</ul>\n<p>② 操作系统<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>作为用户与计算机硬件之间的接口</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}作为用户与计算机硬件之间的接口</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">作为用户与计算机硬件之间的接口</span></span></span></span>，</p>\n<ul>\n<li>要为其上层的用户、应用程序提供简单易用的服务，需要实现什么功能？</li>\n</ul>\n<p>③ 操作系统<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>作为最接近硬件的层次</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}作为最接近硬件的层次</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">作为最接近硬件的层次</span></span></span></span>，</p>\n<ul>\n<li>需要在纯硬件的基础上实现什么功能？</li>\n</ul>\n<h3 id=\"os-作为系统资源的管理者\"><a class=\"anchor\" href=\"#os-作为系统资源的管理者\">#</a> OS 作为系统资源的管理者</h3>\n<p><strong>补充</strong>：进程是一个程序的执行过程。执行前<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>需要将该程序放到内存中</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}需要将该程序放到内存中</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">需要将该程序放到内存中</span></span></span></span>，才能被 <strong>CPU</strong> 处理</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230111211729018.png\" alt=\"image-20230111211729018\" /></p>\n<p>如下所示：使用 <strong>QQ</strong> 视频聊天的过程</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230111211945694.png\" alt=\"image-20230111211945694\" /></p>\n<p><strong>Step 1</strong>：在各个文件夹找到 QQ 安装的位置（如 D:/Tencent/QQ/Bin）</p>\n<ul>\n<li>\n<p>逐层打开文件夹，找到 QQ.exe 这个程序（可执行文件）的存放位置</p>\n<p>操作系统的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"blue\"><mtext>文件管理</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{blue}文件管理</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:blue;\">文件管理</span></span></span></span></p>\n</li>\n</ul>\n<p><strong>Step 2</strong>：双击打开 QQ.exe</p>\n<ul>\n<li>\n<p>需要把该程序相关数据放入内存</p>\n<p>操作系统的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"blue\"><mtext>存储器</mtext><mo stretchy=\"false\">(</mo><mtext>内存</mtext><mo stretchy=\"false\">)</mo><mtext>管理</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{blue}存储器(内存)管理</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\" style=\"color:blue;\">存储器</span><span class=\"mopen\" style=\"color:blue;\">(</span><span class=\"mord cjk_fallback\" style=\"color:blue;\">内存</span><span class=\"mclose\" style=\"color:blue;\">)</span><span class=\"mord cjk_fallback\" style=\"color:blue;\">管理</span></span></span></span></p>\n</li>\n</ul>\n<p><strong>Step 3</strong>：QQ 程序正常运行</p>\n<ul>\n<li>\n<p>对应的进程被处理机（<strong>CPU</strong>）正常接收</p>\n<p>操作系统的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"blue\"><mtext>处理机管理</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{blue}处理机管理</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:blue;\">处理机管理</span></span></span></span></p>\n</li>\n</ul>\n<p><strong>Step 4</strong>：开始和朋友视频聊天</p>\n<ul>\n<li>\n<p>需要把摄像头设备分配给进程</p>\n<p>操作系统的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"blue\"><mtext>设备管理</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{blue}设备管理</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:blue;\">设备管理</span></span></span></span></p>\n</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230111212036830.png\" alt=\"image-20230111212036830\" /></p>\n<p>在实现这些管理的时候，操作系统需要保证这些是安全、高效的</p>\n<ul>\n<li>这也是操作系统所需要追求的目标</li>\n</ul>\n<hr />\n<h3 id=\"os-作为用户和计算机硬件之间的接口\"><a class=\"anchor\" href=\"#os-作为用户和计算机硬件之间的接口\">#</a> OS 作为用户和计算机硬件之间的接口</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230111212835638.png\" alt=\"image-20230111212835638\" /></p>\n<p>命令接口：允许用户<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>直接使用</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}直接使用</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">直接使用</span></span></span></span></p>\n<p>程序接口：允许用户通过程序<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>间接使用</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}间接使用</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">间接使用</span></span></span></span></p>\n<p><strong>GUl</strong>：现代操作系统中最流行的图形用户接口</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230111212925310.png\" alt=\"image-20230111212925310\" /></p>\n<hr />\n<h4 id=\"命令接口程序接口\"><a class=\"anchor\" href=\"#命令接口程序接口\">#</a> 命令接口 &amp; 程序接口</h4>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230111213024667.png\" alt=\"image-20230111213024667\" /></p>\n<hr />\n<p>联机命令接口 = <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>交互式</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}交互式</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">交互式</span></span></span></span>命令接口</p>\n<ul>\n<li>用户输一句，操作系统做一句</li>\n</ul>\n<p>对于 Windows 系统，例如：命令解释器（cmd）</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230111213207783.png\" alt=\"image-20230111213207783\" /></p>\n<hr />\n<p>脱机命令接口 = <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>批处理</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}批处理</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">批处理</span></span></span></span>命令接口</p>\n<p>例如：其中某个 *.bat 文件</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230111213417378.png\" alt=\"image-20230111213417378\" /></p>\n<p>例如：Linux 中使用的 Shell 脚本</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230111213629058.png\" alt=\"image-20230111213629058\" /></p>\n<hr />\n<p>程序接口 = 系统调用</p>\n<p>如 C:\\Windows\\System32\\user32.dll 程序员在程序中调用 user32.dll</p>\n<ul>\n<li>\n<p>该调用过程即为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>系统调用</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}系统调用</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">系统调用</span></span></span></span>，即可实现创建窗口等功能。</p>\n<p>只能通过用户程序<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>间接</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}间接</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">间接</span></span></span></span>使用。</p>\n</li>\n</ul>\n<p><strong>注意</strong>：系统调用 = 系统调用命令 = <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>广义指令</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}广义指令</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">广义指令</span></span></span></span></p>\n<h4 id=\"gui\"><a class=\"anchor\" href=\"#gui\">#</a> GUI</h4>\n<p><strong>GUI</strong>：图形用户界面（Graphical User Interface）</p>\n<p>用户可以使用形象的图形界面进行操作，而不再需要记忆复杂的命令、参数。</p>\n<p>例如：在 Windows 操作系统中，删除一个文件只需要把文件 “拖拽” 到回收站即可。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230111214150626.png\" alt=\"image-20230111214150626\" /></p>\n<h4 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h4>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230111214338885.png\" alt=\"image-20230111214338885\" /></p>\n<h3 id=\"作为最接近硬件的层次\"><a class=\"anchor\" href=\"#作为最接近硬件的层次\">#</a> 作为最接近硬件的层次</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230111214409457.png\" alt=\"image-20230111214409457\" /></p>\n<p>需要提供的功能和目标：实现对硬件机器的拓展</p>\n<p>没有任何软件支持的计算机成为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>裸机</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}裸机</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">裸机</span></span></span></span>。</p>\n<ul>\n<li>在裸机上安装的操作系统，可以提供资源管理功能和方便用户的服务功能，将裸机改造成功能更强、使用更方便的机器</li>\n</ul>\n<p>通常把覆盖了软件的机器成为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>扩充机器</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}扩充机器</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">扩充机器</span></span></span></span>，</p>\n<ul>\n<li>又称之为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>虚拟机</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}虚拟机</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">虚拟机</span></span></span></span></li>\n</ul>\n<hr />\n<p><strong>类比</strong>：</p>\n<ul>\n<li>\n<p>硬件：锤子、锯子、木头、钉子.....</p>\n</li>\n<li>\n<p>操作系统：优秀的工匠</p>\n</li>\n</ul>\n<p>操作系统对硬件机器的拓展：通过优秀工匠，这些简单的原料可以组织成房子、帆船、匹诺曹。。。</p>\n<p>普通用户可<strong>直接使用</strong>工匠提供的房子、帆船、匹诺曹，而<strong>无需关心</strong>这些东西在底层是怎么组织起来工作的</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230111214650186.png\" alt=\"image-20230111214650186\" /></p>\n<h2 id=\"整体框架\"><a class=\"anchor\" href=\"#整体框架\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230111215605189.png\" alt=\"image-20230111215605189\" /></p>\n<h1 id=\"操作系统的特征\"><a class=\"anchor\" href=\"#操作系统的特征\">#</a> 操作系统的特征</h1>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112194456116.png\" alt=\"image-20230112194456116\" /></p>\n<h2 id=\"并发\"><a class=\"anchor\" href=\"#并发\">#</a> 并发</h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>并发</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}并发</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">并发</span></span></span></span>：指两个或多个事件在同一时间间隔内发生。</p>\n<ul>\n<li>这些事件<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>宏观上是同时发生</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}宏观上是同时发生</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">宏观上是同时发生</span></span></span></span>的，但<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>微观上是交替发生</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}微观上是交替发生</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">微观上是交替发生</span></span></span></span>的。</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>并行</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}并行</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">并行</span></span></span></span>：指两个或多个事件在同一时刻同时发生。</p>\n<hr />\n<p>例如：假设小渣与老渣每人由两个女朋友。任务 1 ：和一号约会；任务 2：和二号约会</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112185728634.png\" alt=\"image-20230112185728634\" /></p>\n<hr />\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>操作系统的并发性</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}操作系统的并发性</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">操作系统的并发性</span></span></span></span>指计算机系统中同时存在着多个运行着的程序。</p>\n<p>一个单核处理机（<strong>CPU</strong>）同一时刻只能执行一个程序，因此操作系统会负责协调多个程序交替执行（这些程序微观上是交替执行的，但宏观上看起来就像在同时执行)</p>\n<p>事实上，操作系统就是伴随着 “多道程序技术” 而出现的。</p>\n<ul>\n<li>因此，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>操作系统和程序并发是一起诞生</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}操作系统和程序并发是一起诞生</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">操作系统和程序并发是一起诞生</span></span></span></span>的</li>\n</ul>\n<p>当今的计算机，一般都是多核 <strong>CPU</strong> ，比如 <strong>Intel</strong> 的第八代 <strong>i3</strong> 处理器就是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span></span></span></span> 核 <strong>CPU</strong></p>\n<ul>\n<li>\n<p>这意味着同一时刻可以有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span></span></span></span> 个程序<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>并行</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}并行</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">并行</span></span></span></span>执行，</p>\n<p>但是操作系统的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>并发性依然必不可少</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}并发性依然必不可少</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">并发性依然必不可少</span></span></span></span>，</p>\n<p>当代人使用计算机绝对有 4 个以上的程序需要同时工作。</p>\n</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112190227426.png\" alt=\"image-20230112190227426\" /></p>\n<hr />\n<h2 id=\"共享互斥同时\"><a class=\"anchor\" href=\"#共享互斥同时\">#</a> 共享（互斥 / 同时）</h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>共享</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}共享</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">共享</span></span></span></span>即资源共享，是指系统中的资源可供内存中多个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>并发</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}并发</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">并发</span></span></span></span>执行的进程共同使用。</p>\n<ul>\n<li>例如：多线程共享同一个进程的资源</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112191158930.png\" alt=\"image-20230112191158930\" /></p>\n<p>所谓的 “同时” 往往是宏观上的，而在微观上，这些进程<strong>可能</strong>是交替地对该资源进行访问的（即分时共享）</p>\n<ul>\n<li>可能：例如边听歌边打游戏，此时游戏声音与音乐播放声音微观上<strong>并行</strong></li>\n</ul>\n<p>例如：</p>\n<ul>\n<li>\n<p><strong>互斥</strong>共享方式：使用 QQ 和微信视频。同一时间段内摄像头只能分配给其中一个进程。</p>\n</li>\n<li>\n<p><strong>同时</strong>共享方式：使用 QQ 发送文件 A，同时使用微信发送文件 B。</p>\n<p><strong>宏观</strong>上看，两边都在同时读取并发送文件说明两个进程都在访问硬盘资源，从中读取数据。</p>\n<p><strong>微观</strong>上看，两个进程是<strong>交替</strong>着访问硬盘的。</p>\n</li>\n</ul>\n<hr />\n<h2 id=\"并发和共享的关系\"><a class=\"anchor\" href=\"#并发和共享的关系\">#</a> 并发和共享的关系</h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>并发性</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}并发性</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">并发性</span></span></span></span>指计算机系统中同时存在着多个运行着的程序。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>共享性</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}共享性</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">共享性</span></span></span></span>是指系统中的资源可供内存中多个并发执行的进程共同使用。</p>\n<p>例如：使用 QQ 发送文件 A，同时使用微信发送文件 B。</p>\n<ol>\n<li>两个进程正在并发执行（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>并发性</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}并发性</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">并发性</span></span></span></span>）</li>\n<li>需要共享的访问硬盘资源（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>共享性</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}共享性</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">共享性</span></span></span></span>）</li>\n</ol>\n<p><strong>注意</strong>：</p>\n<ul>\n<li>如果<strong>失去并发性</strong>，则系统中只有一个程序正在运行，则共享性<strong>失去存在的意义</strong></li>\n<li>如果<strong>失去共享性</strong>，则 QQ 和微信不能同时访问硬盘资源，就<strong>无法实现同时</strong>发送文件，也就无法并发</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112192049296.png\" alt=\"image-20230112192049296\" /></p>\n<h2 id=\"虚拟时分复用空分复用\"><a class=\"anchor\" href=\"#虚拟时分复用空分复用\">#</a> 虚拟（时分复用 / 空分复用）</h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>虚拟</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}虚拟</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">虚拟</span></span></span></span>是指把一个物理上的实体变为若干个逻辑上的对应物。</p>\n<ul>\n<li>物理实体 (前者）是实际存在的，</li>\n<li>而逻辑上对应物（后者）是用户感受到的。</li>\n</ul>\n<p>例如：</p>\n<p>背景知识：一个程序<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>需要放入内存</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}需要放入内存</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">需要放入内存</span></span></span></span>并给它<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>分配</mtext><mtext mathvariant=\"monospace\">CPU</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}分配\\texttt{CPU}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">分配</span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord texttt\" style=\"color:red;\">CPU</span></span></span></span></span> 才能执行</p>\n<ul>\n<li>\n<p><strong>GTA5</strong> 需要 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><mtext mathvariant=\"monospace\">MB</mtext></mrow><annotation encoding=\"application/x-tex\">4\\texttt{MB}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span><span class=\"mord text\"><span class=\"mord texttt\">MB</span></span></span></span></span> 的运行内存，<strong>QQ</strong> 需要 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>256</mn><mtext mathvariant=\"monospace\">MB</mtext></mrow><annotation encoding=\"application/x-tex\">256\\texttt{MB}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">256</span><span class=\"mord text\"><span class=\"mord texttt\">MB</span></span></span></span></span> 的内存，迅雷需要 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>256</mn><mtext mathvariant=\"monospace\">MB</mtext></mrow><annotation encoding=\"application/x-tex\">256\\texttt{MB}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">256</span><span class=\"mord text\"><span class=\"mord texttt\">MB</span></span></span></span></span> 的内存，网易云音乐需要 $256\\texttt {MB} $ 的内存.......</p>\n<p>我的电脑：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><mtext mathvariant=\"monospace\">MB</mtext></mrow><annotation encoding=\"application/x-tex\">4\\texttt{MB}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span><span class=\"mord text\"><span class=\"mord texttt\">MB</span></span></span></span></span> 内存</p>\n<p>问题：这些程序同时运行需要的内存远大于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><mtext mathvariant=\"monospace\">MB</mtext></mrow><annotation encoding=\"application/x-tex\">4\\texttt{MB}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span><span class=\"mord text\"><span class=\"mord texttt\">MB</span></span></span></span></span>，那么为什么它们还可以在我的电脑上同时运行呢？</p>\n<p>答：这是<strong>虚拟存储器技术</strong>（虚拟技术中的 &quot;<strong> 空分复用技术</strong> &quot;）。</p>\n<p>实际只有  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><mtext mathvariant=\"monospace\">MB</mtext></mrow><annotation encoding=\"application/x-tex\">4\\texttt{MB}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span><span class=\"mord text\"><span class=\"mord texttt\">MB</span></span></span></span></span> 的内存，在用户看来似乎远远大于  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><mtext mathvariant=\"monospace\">MB</mtext></mrow><annotation encoding=\"application/x-tex\">4\\texttt{MB}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span><span class=\"mord text\"><span class=\"mord texttt\">MB</span></span></span></span></span></p>\n</li>\n</ul>\n<hr />\n<p>某单核 <strong>CPU</strong> 的计算机中，用户打开了以下软件。。。</p>\n<p>问题：既然一个程序需要被分配 <strong>CPU</strong> 才能正常执行，</p>\n<ul>\n<li>那么为什么单核 <strong>CPU</strong> 的电脑中能同时运行这么多个程序呢？</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112193003128.png\" alt=\"image-20230112193003128\" /></p>\n<p>答：这是<strong>虚拟处理器技术</strong>。实际上只有一个单核 <strong>CPU</strong> ，在用户看来似乎有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>6</mn></mrow><annotation encoding=\"application/x-tex\">6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">6</span></span></span></span> 个 <strong>CPU</strong> 在同时为自己服务</p>\n<ul>\n<li>\n<p>虚拟技术中的 &quot;<strong> 时分复用技术</strong> &quot; 。微观上处理机在各个微小的时间段内交替着为各个进程服务</p>\n<p>例如：时间片轮转（进程调度算法）</p>\n</li>\n</ul>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112194331491.png\" alt=\"image-20230112194331491\" /></p>\n<hr />\n<h2 id=\"异步\"><a class=\"anchor\" href=\"#异步\">#</a> 异步</h2>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>异步</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}异步</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">异步</span></span></span></span>是指，</p>\n<ul>\n<li>在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而是<strong>走走停停</strong>，以不可预知的速度向前推进，这就是进程的异步性。</li>\n</ul>\n<p>由于系统的<strong>有限资源导致的</strong></p>\n<p>例如：老渣要和两个女孩并发约会</p>\n<p>一号的指令 1 ：老渣陪我吃饭</p>\n<p>一号的指令 2 ：老渣把心给我</p>\n<p>二号的指令 1 ：老渣把心给我</p>\n<p>二号的指令 2 ：老渣陪我吃饭</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112195333739.png\" alt=\"image-20230112195333739\" /></p>\n<p>与一号、二号的约会相当于对两个进程的处理，每个进程都有各自需要执行的指令。</p>\n<p>老渣的心相当于<strong>有限的系统资源</strong>。</p>\n<hr />\n<p>由于可分配的资源有限，进程的执行不是一贯到底的，而是走走停停的，以不可预知的速度向前推进。</p>\n<p>显然，如果失去了并发性，则系统只能串行地处理各个进程，每个进程的执行会一贯到底。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>只有系统拥有并发性，才有可能导致异步性</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}只有系统拥有并发性，才有可能导致异步性</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">只有系统拥有并发性，才有可能导致异步性</span></span></span></span>。</p>\n<h2 id=\"小结-2\"><a class=\"anchor\" href=\"#小结-2\">#</a> 小结</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112200317242.png\" alt=\"image-20230112200317242\" /></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>并发和共享互为存在条件，就谈不上虚拟和异步</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}并发和共享互为存在条件，就谈不上虚拟和异步</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">并发和共享互为存在条件，就谈不上虚拟和异步</span></span></span></span>，</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>因此并发和共享是操作系统的两个最基本的特征</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}因此并发和共享是操作系统的两个最基本的特征</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">因此并发和共享是操作系统的两个最基本的特征</span></span></span></span></p>\n<h1 id=\"操作系统的发展和分类\"><a class=\"anchor\" href=\"#操作系统的发展和分类\">#</a> 操作系统的发展和分类</h1>\n<p><strong>整体框架</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112200750460.png\" alt=\"image-20230112200750460\" /></p>\n<h2 id=\"手工操作系阶段\"><a class=\"anchor\" href=\"#手工操作系阶段\">#</a> 手工操作系阶段</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112201207915.png\" alt=\"image-20230112201207915\" /></p>\n<h3 id=\"主要缺点\"><a class=\"anchor\" href=\"#主要缺点\">#</a> 主要缺点</h3>\n<p>用户<strong>独占全机</strong>、<strong>人机速度矛盾</strong>导致资源利用率极低</p>\n<ul>\n<li>\n<p>一个用户把自己的程序放入纸带机，等待计算机执行完后，用户再取走自己的数据。</p>\n<p>这时候，下一个用户才可以继续接着使用该计算机系统</p>\n</li>\n</ul>\n<p>在一个时间段内只允许一个用户使用，速度相差极大</p>\n<h2 id=\"批处理阶段\"><a class=\"anchor\" href=\"#批处理阶段\">#</a> 批处理阶段</h2>\n<h3 id=\"单道批处理系统\"><a class=\"anchor\" href=\"#单道批处理系统\">#</a> 单道批处理系统</h3>\n<p>引入<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>脱机输入</mtext><mi mathvariant=\"normal\">/</mi><mtext>输出技术</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}脱机输入/输出技术</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">脱机输入</span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord cjk_fallback\" style=\"color:red;\">输出技术</span></span></span></span>（用磁带完成），</p>\n<ul>\n<li>\n<p>并<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>监督程序</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}监督程序</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">监督程序</span></span></span></span>负责控制作业的输入、输出</p>\n<p>操作系统的雏形</p>\n</li>\n</ul>\n<p>例如：程序员提前将自己的程序放入<strong>纸带机</strong>上，通过<strong>外围机</strong>将纸带数据读到<strong>磁带</strong>（输入 / 输出设备）</p>\n<ul>\n<li>\n<p>计算机直接从磁带（更高速的输入 / 输出设备上）把各程序<strong>依次</strong>读到计算机的内存中进行处理，</p>\n<p>处理完之后再依次输出到设备当中...</p>\n</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112202200548.png\" alt=\"image-20230112202200548\" /></p>\n<hr />\n<h4 id=\"主要优点缺点\"><a class=\"anchor\" href=\"#主要优点缺点\">#</a> 主要优点 &amp; 缺点</h4>\n<p>主要优点：缓解了一定程度的人机速度矛盾，资源利用率有所提升</p>\n<p>主要缺点：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>内存中仅能有一道程序运行</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}内存中仅能有一道程序运行</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">内存中仅能有一道程序运行</span></span></span></span>，</p>\n<ul>\n<li>只有该程序运行结束之后才能调入下一道程序。</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext mathvariant=\"monospace\">CPU</mtext><mtext>有大量的时间是在空闲等待</mtext><mtext mathvariant=\"monospace\">I/O</mtext><mtext>完成</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}\\texttt{CPU}有大量的时间是在空闲等待 \\texttt{I/O} 完成</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord texttt\" style=\"color:red;\">CPU</span></span><span class=\"mord cjk_fallback\" style=\"color:red;\">有大量的时间是在空闲等待</span><span class=\"mord text\" style=\"color:red;\"><span class=\"mord texttt\" style=\"color:red;\">I/O</span></span><span class=\"mord cjk_fallback\" style=\"color:red;\">完成</span></span></span></span>（例如：每一次对磁带进行输入 / 输出数据）。</li>\n<li>资源利用率依然很低。</li>\n</ul>\n<h3 id=\"多道批处理系统\"><a class=\"anchor\" href=\"#多道批处理系统\">#</a> 多道批处理系统</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112203111288.png\" alt=\"image-20230112203111288\" /></p>\n<hr />\n<h4 id=\"主要优点缺点-2\"><a class=\"anchor\" href=\"#主要优点缺点-2\">#</a> 主要优点 &amp; 缺点</h4>\n<p>主要优点：多道程序<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>并发</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}并发</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">并发</span></span></span></span>执行，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>共享</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}共享</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">共享</span></span></span></span>计算机资源。</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>资源利用率大幅提升</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}资源利用率大幅提升</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">资源利用率大幅提升</span></span></span></span>，<strong>CPU</strong> 和其他资源保持 “忙碌” 状态，系统吞叶量增大。</li>\n</ul>\n<p>主要缺点：用户响应时间长，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>没有人机交互功能</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}没有人机交互功能</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">没有人机交互功能</span></span></span></span></p>\n<ul>\n<li>用户提交自己的作业之后就只能<strong>等待</strong>计算机处理完成，<strong>中间不能控制自己的作业执行</strong></li>\n</ul>\n<hr />\n<p>问题：为何多道批处理系统能使资源利用率大幅提升？</p>\n<p>假设计算机需要处理三个作业</p>\n<p>作业一：输入 1 秒，计算 1 秒，输出 1 秒</p>\n<p>作业二：输入 1 秒，计算 1 秒，输出 1 秒</p>\n<p>作业三：输入 1 秒，计算 1 秒，输出 1 秒</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112204557444.png\" alt=\"image-20230112204557444\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112204931258.png\" alt=\"image-20230112204931258\" /></p>\n<p>计算进程在计算的时候，输入进程可以开始输入数据，输出进程可以开始输出数据</p>\n<p>例如：计算机组成原理中的流水线技术，计算机网络中的分组交换</p>\n<h2 id=\"分时操作系统\"><a class=\"anchor\" href=\"#分时操作系统\">#</a> 分时操作系统</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112205901686.png\" alt=\"image-20230112205901686\" /></p>\n<p>分时操作系统：计算机以<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>时间片</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}时间片</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">时间片</span></span></span></span>为单位<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>轮流为各个用户</mtext><mi mathvariant=\"normal\">/</mi><mtext>作业服务</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}轮流为各个用户/作业服务</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">轮流为各个用户</span><span class=\"mord\" style=\"color:red;\">/</span><span class=\"mord cjk_fallback\" style=\"color:red;\">作业服务</span></span></span></span>，各个用户可通过终端与计算机进行交互。</p>\n<p>例如：<strong>Linux</strong> 操作系统可以明显的体现出多个用户可以通过终端与计算机进行交互。</p>\n<ul>\n<li>典型的分时操作系统</li>\n</ul>\n<h3 id=\"主要优点缺点-3\"><a class=\"anchor\" href=\"#主要优点缺点-3\">#</a> 主要优点 &amp; 缺点</h3>\n<p>主要优点：用户请求可以被即时响应，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>解决了人机交互问题</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}解决了人机交互问题</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">解决了人机交互问题</span></span></span></span>。</p>\n<ul>\n<li>允许多个用户同时使用一台计算机，并且用户对计算机的操作相互独立，感受不到别人的存在。</li>\n</ul>\n<p>主要缺点：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>不能优先处理一些紧急任务</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}不能优先处理一些紧急任务</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">不能优先处理一些紧急任务</span></span></span></span>。</p>\n<ul>\n<li>操作系统对各个用户 / 作业都是<strong>完全公平</strong>的，循环地为每个用户作业服务一个时间片，不区分任务的紧急性。</li>\n</ul>\n<h2 id=\"实时操作系统硬实时软实时\"><a class=\"anchor\" href=\"#实时操作系统硬实时软实时\">#</a> 实时操作系统（硬实时 / 软实时）</h2>\n<h3 id=\"主要优点\"><a class=\"anchor\" href=\"#主要优点\">#</a> 主要优点</h3>\n<p>主要优点：能够优先响应一些紧急任务，某些紧急任务不需时间片排队。</p>\n<p>在实时操作系统的控制下，计算机系统接收到外部信号后及时进行处理，</p>\n<ul>\n<li>并且<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>要在严格的时限内处理完事件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}要在严格的时限内处理完事件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">要在严格的时限内处理完事件</span></span></span></span>。</li>\n<li>实时操作系统的主要特点是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>及时性</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}及时性</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">及时性</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>可靠性</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}可靠性</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">可靠性</span></span></span></span></li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112210736595.png\" alt=\"image-20230112210736595\" /></p>\n<h2 id=\"其他几种操作系统\"><a class=\"anchor\" href=\"#其他几种操作系统\">#</a> 其他几种操作系统</h2>\n<p>网络操作系统：是伴随着计算机网络的发展而诞生的，能把网络中各个计算机有机地结合起来，</p>\n<ul>\n<li>\n<p>实现数据传送等功能，</p>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>实现网络中各种资源的共享</mtext><mo stretchy=\"false\">(</mo><mtext>如文件共享</mtext><mo stretchy=\"false\">)</mo><mtext>和各台计算机之间的通信。</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}实现网络中各种资源的共享(如文件共享)和各台计算机之间的通信。</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">实现网络中各种资源的共享</span><span class=\"mopen\" style=\"color:red;\">(</span><span class=\"mord cjk_fallback\" style=\"color:red;\">如文件共享</span><span class=\"mclose\" style=\"color:red;\">)</span><span class=\"mord cjk_fallback\" style=\"color:red;\">和各台计算机之间的通信。</span></span></span></span></p>\n<p>(如: Windows NT 就是一种典型的网络操作系统，网站服务器就可以使用)</p>\n</li>\n</ul>\n<p>分布式操作系统：主要特点是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>分布性和并行性</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}分布性和并行性</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">分布性和并行性</span></span></span></span>。</p>\n<ul>\n<li>系统中的各台计算机<strong>地位相同</strong>，</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>任何工作都可以分布在这些计算机上，由它们并行、协同完成这个任务</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}任何工作都可以分布在这些计算机上，由它们并行、协同完成这个任务</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">任何工作都可以分布在这些计算机上，由它们并行、协同完成这个任务</span></span></span></span>。</li>\n</ul>\n<p>个人计算机操作系统：如 <strong>Windows XP</strong>、<strong>MacOS</strong>，方便个人使用。</p>\n<h2 id=\"整体框架-2\"><a class=\"anchor\" href=\"#整体框架-2\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112211408709.png\" alt=\"image-20230112211408709\" /></p>\n<h1 id=\"操作系统的运行机制和体系结构\"><a class=\"anchor\" href=\"#操作系统的运行机制和体系结构\">#</a> 操作系统的运行机制和体系结构</h1>\n<p><strong>整体框架</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112230200249.png\" alt=\"image-20230112230200249\" /></p>\n<h2 id=\"运行机制\"><a class=\"anchor\" href=\"#运行机制\">#</a> 运行机制</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112230054721.png\" alt=\"image-20230112230054721\" /></p>\n<h3 id=\"什么是指令\"><a class=\"anchor\" href=\"#什么是指令\">#</a> 什么是指令</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112220849674.png\" alt=\"image-20230112220849674\" /></p>\n<p>简单来说，“指令” 就是处理器（<strong>CPU</strong>）能识别、执行的最基本命令</p>\n<p>比如：加法指令就是让 <strong>CPU</strong> 进行加法运算</p>\n<hr />\n<h3 id=\"特权指令非特权指令\"><a class=\"anchor\" href=\"#特权指令非特权指令\">#</a> 特权指令 &amp; 非特权指令</h3>\n<p>新的问题:</p>\n<p>有的指令 “人畜无害” 。</p>\n<ul>\n<li>比如：加、减、乘、除这些普通的运算指令。</li>\n</ul>\n<p>有的指令有很高的权限。</p>\n<ul>\n<li>比如：内存清零指令。如果用户程序可以使用这个指令，就意味着一个用户可以将其他用户的内存数据随意清零，这样做显然是很危险的。</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112221347317.png\" alt=\"image-20230112221347317\" /></p>\n<hr />\n<h3 id=\"用户态内核态\"><a class=\"anchor\" href=\"#用户态内核态\">#</a> 用户态 &amp; 内核态</h3>\n<p>问题：<strong>CPU</strong> 如何判断当前是否可以执行特权指令？</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112221603087.png\" alt=\"image-20230112221603087\" /></p>\n<h3 id=\"内核程序应用程序\"><a class=\"anchor\" href=\"#内核程序应用程序\">#</a> 内核程序 &amp; 应用程序</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112221808649.png\" alt=\"image-20230112221808649\" /></p>\n<h2 id=\"操作系统的内核\"><a class=\"anchor\" href=\"#操作系统的内核\">#</a> 操作系统的内核</h2>\n<h3 id=\"内核\"><a class=\"anchor\" href=\"#内核\">#</a> 内核</h3>\n<p>问题：操作系统中的哪些功能应该由内核程序实现呢？</p>\n<p>例如：我们安装完 <strong>Windows</strong> 操作系统后，会发现操作系统提供了多种多样的功能，</p>\n<ul>\n<li>\n<p>比如 “记事本”、“任务管理器”。</p>\n<p>然而，这些功能并不是必不可少的。即使没有 “任务管理器”，我们仍然可以使用计算机。</p>\n</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112223503598.png\" alt=\"image-20230112223503598\" /></p>\n<hr />\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>内核</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}内核</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">内核</span></span></span></span>是计算机上配置的底层<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>软件</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}软件</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">软件</span></span></span></span>，是操作系统最基本、最核心的部分。</p>\n<p>实现操作系统内核功能的那些程序就是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>内核程序</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}内核程序</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">内核程序</span></span></span></span>。</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112224127790.png\" alt=\"image-20230112224127790\" /></p>\n<h2 id=\"操作系统的体系结构\"><a class=\"anchor\" href=\"#操作系统的体系结构\">#</a> 操作系统的体系结构</h2>\n<h3 id=\"大内核微内核\"><a class=\"anchor\" href=\"#大内核微内核\">#</a> 大内核 &amp; 微内核</h3>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112224733300.png\" alt=\"image-20230112224733300\" /></p>\n<p>例如：有的内核划分如下所示：</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112224509911.png\" alt=\"image-20230112224509911\" /></p>\n<hr />\n<p><strong>类比</strong>：</p>\n<p>操作系统的体系结构问题与企业的管理问题很相似。</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>内核</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}内核</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">内核</span></span></span></span>就是企业的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>管理层</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}管理层</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">管理层</span></span></span></span>，负责一些重要的工作。</p>\n<ul>\n<li>只有管理层才能执行<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>特权指令</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}特权指令</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">特权指令</span></span></span></span>，普通员工只能执行<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>非特权指令</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}非特权指令</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">非特权指令</span></span></span></span>。</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>用户态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}用户态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">用户态</span></span></span></span>、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>核心态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}核心态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">核心态</span></span></span></span>之间的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>切换</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}切换</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">切换</span></span></span></span>相当于普通员工和管理层之间的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>工作交接</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}工作交接</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">工作交接</span></span></span></span></li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>大内核</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}大内核</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">大内核</span></span></span></span>：企业初创时体量不大，管理层的人会负责大部分的事情。</p>\n<ul>\n<li>优点是效率高；</li>\n<li>缺点是组织结构混乱，难以维护。</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>微内核</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}微内核</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">微内核</span></span></span></span>：随着企业体量越来越大，管理层只负责最核心的一些工作。</p>\n<ul>\n<li>优点是组织结构清晰，方便维护；</li>\n<li>缺点是效率低。</li>\n</ul>\n<h2 id=\"整体框架-3\"><a class=\"anchor\" href=\"#整体框架-3\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230112230146509.png\" alt=\"image-20230112230146509\" /></p>\n<h1 id=\"中断和异常\"><a class=\"anchor\" href=\"#中断和异常\">#</a> 中断和异常</h1>\n<p><strong>整体框架</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230113233754861.png\" alt=\"image-20230113233754861\" /></p>\n<h2 id=\"中断的概念和作用\"><a class=\"anchor\" href=\"#中断的概念和作用\">#</a> 中断的概念和作用</h2>\n<ol>\n<li>\n<p>当中断发生时，<strong>CPU</strong> 立即进入<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>核心态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}核心态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">核心态</span></span></span></span></p>\n</li>\n<li>\n<p>当中断发生后，当前运行的进程暂停运行，并由操作系统内核对中断进行处理</p>\n</li>\n<li>\n<p>对于不同的中断信号，会进行不同的处理</p>\n</li>\n</ol>\n<p>发生了中断，就意味着需要操作系统介入，开展管理工作。由于操作系统的管理工作（比如进程切换、分配 <strong>I/O</strong> 设备等）需要使用特权指令，</p>\n<ul>\n<li>因此 <strong>CPU</strong> 要从用户态转为核心态。</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>中断</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}中断</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">中断</span></span></span></span>可以使 <strong>CPU</strong> 从<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>用户态切换为核心态，使操作系统获得计算机的控制权。</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}用户态切换为核心态，使操作系统获得计算机的控制权。</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">用户态切换为核心态，使操作系统获得计算机的控制权。</span></span></span></span></p>\n<ul>\n<li>有了中断，才能实现多道程序并发执行。</li>\n</ul>\n<p><strong>注意</strong>：中断是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>唯一</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}唯一</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">唯一</span></span></span></span>途径</p>\n<p>&quot;<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>核心态</mtext><mo>−</mo><mo>&gt;</mo><mtext>用户态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}核心态-&gt;用户态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">核心态</span><span class=\"mord\" style=\"color:red;\">−</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">用户态</span></span></span></span> &quot; 的切换时通过执行一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>特权指令</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}特权指令</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">特权指令</span></span></span></span></p>\n<ul>\n<li>将程序状态字（<strong>PSW</strong>）的标志位设置为 &quot;用户态&quot;</li>\n</ul>\n<hr />\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230113223013098.png\" alt=\"image-20230113223013098\" /></p>\n<p>如上所示：例如单道批处理系统</p>\n<p>为了解决上述问题，人们发明了操作系统（作为计算机的管理者），引入中断机制，</p>\n<ul>\n<li>实现了<strong>多道程序并发执行</strong>（例如：多道批处理系统）</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>本质</mtext><mo>:</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}本质:</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">本质</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\" style=\"color:red;\">:</span></span></span></span></p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>发生中断</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}发生中断</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">发生中断</span></span></span></span>就意味着<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>需要操作系统介入，开展管理工作</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}需要操作系统介入，开展管理工作</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">需要操作系统介入，开展管理工作</span></span></span></span></li>\n</ul>\n<p>对于进程 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 若收到计时部件发出的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>中断信号</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}中断信号</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">中断信号</span></span></span></span></p>\n<ul>\n<li>切换为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>核心态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}核心态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">核心态</span></span></span></span>对中断进行处理</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230113223412900.png\" alt=\"image-20230113223412900\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230113223750363.png\" alt=\"image-20230113223750363\" /></p>\n<hr />\n<p>对于进程 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span>，若进程 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span> 发出系统调用</p>\n<ul>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>内中断信号</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}内中断信号</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">内中断信号</span></span></span></span></p>\n<p>请求输出（例如系统的输入、输出操作是属于<strong>特权指令</strong>）</p>\n<ul>\n<li>因此用户进程，这些普通的应用程序只能通过系统调用的方式，内中断信号的方式来主动的要求操作系统来完成操作</li>\n</ul>\n</li>\n<li>\n<p>切换为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>核心态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}核心态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">核心态</span></span></span></span>对中断进行处理</p>\n</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230113224047359.png\" alt=\"image-20230113224047359\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230113224305486.png\" alt=\"image-20230113224305486\" /></p>\n<p>其中：打印机是互斥设备</p>\n<hr />\n<p>进程 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span> 与 <strong>I/O</strong> 设备是并行的工作</p>\n<ul>\n<li>\n<p>并且当 <strong>I/O</strong> 设备工作完成之后，</p>\n<p>设备向 <strong>CPU</strong> 发出<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>中断信号</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}中断信号</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">中断信号</span></span></span></span></p>\n</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230113224651863.png\" alt=\"image-20230113224651863\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230113224916905.png\" alt=\"image-20230113224916905\" /></p>\n<hr />\n<h2 id=\"中断的分类\"><a class=\"anchor\" href=\"#中断的分类\">#</a> 中断的分类</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230113231212618.png\" alt=\"image-20230113231212618\" /></p>\n<hr />\n<p>另一种分类方式</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230113231315562.png\" alt=\"image-20230113231315562\" /></p>\n<h2 id=\"外中断的处理过程\"><a class=\"anchor\" href=\"#外中断的处理过程\">#</a> 外中断的处理过程</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230113231605864.png\" alt=\"image-20230113231605864\" /></p>\n<p><strong>Step 1</strong>：执行完每个指令之后，<strong>CPU</strong> 都要检查当前是否有外部中断信号</p>\n<p><strong>Step 2</strong>：如果检测到外部中断信号，则需要<strong>保护</strong>被中断进程的 <strong>CPU</strong> 环境（如程序状态字 <strong>PSW</strong>、程序计数器 <strong>PC</strong>、各种通用寄存器）</p>\n<p><strong>Step 3</strong>：根据中断信号类型转入相应的中断处理程序</p>\n<p><strong>Step 4</strong>：恢复原进程的 <strong>CPU</strong> 环境并退出中断，返回原进程继续往下执行</p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230113232026776.png\" alt=\"image-20230113232026776\" /></p>\n<h2 id=\"整体框架-4\"><a class=\"anchor\" href=\"#整体框架-4\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230113233754861.png\" alt=\"image-20230113233754861\" /></p>\n<p>通过 &quot; 中断信号来自 <strong>CPU</strong> 内部还是外部 &quot; 判断是内 / 外中断</p>\n<h1 id=\"系统调用\"><a class=\"anchor\" href=\"#系统调用\">#</a> 系统调用</h1>\n<p><strong>整体框架</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230117001107703.png\" alt=\"image-20230117001107703\" /></p>\n<h2 id=\"什么是系统调用有何用\"><a class=\"anchor\" href=\"#什么是系统调用有何用\">#</a> 什么是系统调用，有何用？</h2>\n<p>操作系统作为用户和计算机硬件之间的接口，需要向上提供一些简单易用的服务。主要包括命令接口和程序接口。</p>\n<ul>\n<li>其中，程序接口由一组<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>系统调用</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}系统调用</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">系统调用</span></span></span></span>组成。</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230114001217424.png\" alt=\"image-20230114001217424\" /></p>\n<p>“系统调用” 是操作系统提供给应用程序（程序员 / 编程人员）使用的接口，可以理解为一种<strong>可供应用程序调用的特殊函数</strong>，</p>\n<ul>\n<li>应用程序可以发出系统调用请求来获得操作系统的服务。</li>\n</ul>\n<hr />\n<p><strong>问题</strong>：操作系统为什么要提供 “系统调用” 功能？</p>\n<p>生活场景：你去学校打印店打印论文，当你按下 “打印” 之后，打印机开始工作。你的论文打印到一半时，另一位同学按下了 “打印” 按钮开始打印他自己的论文。</p>\n<ul>\n<li>最终，你的论文和该同学的论文页面并没有混杂在一起，都是按顺序依次打印的。</li>\n</ul>\n<p>思考：如果各个进程可以随意地使用打印机，会发生什么情况？</p>\n<ul>\n<li>\n<p>你的论文打印到一半时，另一位同学按下了 “打印” 按钮开始打印他自己的论文。</p>\n<p>结果，你的后半部分论文与该同学的页面混杂在一起了。。。</p>\n</li>\n</ul>\n<p><strong>解决方法</strong>：操作系统提供 “系统调用” 功能，用户进程想要使用打印机这种 共享资源，只能通过系统调用向操作系统发出请求。</p>\n<ul>\n<li>操作系统会对各个请求进行<strong>协调管理</strong>。</li>\n</ul>\n<hr />\n<p>应用程序通过<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>系统调用</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}系统调用</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">系统调用</span></span></span></span>请求操作系统的服务。</p>\n<p>系统中的各种共享资源都由操作系统统一掌管，</p>\n<ul>\n<li>因此在用户程序中，凡是与资源有关的操作（如存储分配、I/O 操作、文件管理等），都必须通过系统调用的方式向操作系统提出服务请求，由操作系统代为完成。</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>这样可以保证系统的稳定性和安全性</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}这样可以保证系统的稳定性和安全性</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">这样可以保证系统的稳定性和安全性</span></span></span></span>，防止用户进行非法操作。</p>\n<h2 id=\"系统调用按功能分类\"><a class=\"anchor\" href=\"#系统调用按功能分类\">#</a> 系统调用（按功能分类）</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230114204724801.png\" alt=\"image-20230114204724801\" /></p>\n<p>系统调用相关处理涉及到对系统资源的管理、对进程的控制，</p>\n<ul>\n<li>这些功能需要执行一些<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>特权指令</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}特权指令</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">特权指令</span></span></span></span>才能完成，</li>\n<li>因此系统调用的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>相关处理</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}相关处理</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">相关处理</span></span></span></span>需要在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>核心态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}核心态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">核心态</span></span></span></span>下进行</li>\n</ul>\n<h2 id=\"系统调用与库函数的区别\"><a class=\"anchor\" href=\"#系统调用与库函数的区别\">#</a> 系统调用与库函数的区别</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230116234652675.png\" alt=\"image-20230116234652675\" /></p>\n<table>\n<thead>\n<tr>\n<th>普通应用程序</th>\n<th>可直接进行系统调用，也可使用库函数。有的库函数涉及系统调用，有的不涉及</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>编程语言</td>\n<td>向上提供库函数。有时会将系统调用封装成库函数，以<strong>隐藏</strong>系统调用的一些细节，使上层进行系统调用更加方便。</td>\n</tr>\n<tr>\n<td>操作系统</td>\n<td>向上提供系统调用</td>\n</tr>\n<tr>\n<td>裸机</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>不涉及系统调用的库函数：如 “取绝对值” 的函数</p>\n<p>涉及系统调用的库函数：如 “创建一个新文件” 的函数</p>\n<h2 id=\"系统调用背后的过程\"><a class=\"anchor\" href=\"#系统调用背后的过程\">#</a> 系统调用背后的过程</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230116235050296.png\" alt=\"image-20230116235050296\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230116235554705.png\" alt=\"image-20230116235554705\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230116235455267.png\" alt=\"image-20230116235455267\" /></p>\n<p>传递系统调用参数</p>\n<p>→ 执行陷入指令（内中断）（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>用户态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}用户态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">用户态</span></span></span></span>）</p>\n<p>→ 执行系统调用相应服务程序（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>核心态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}核心态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">核心态</span></span></span></span>）</p>\n<p>→ 返回用户程序</p>\n<p>注意:</p>\n<ol>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>陷入指令</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}陷入指令</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">陷入指令</span></span></span></span>是在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>用户态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}用户态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">用户态</span></span></span></span>执行的，</p>\n<p>执行陷入指令之后立即引发一个<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>内中断</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}内中断</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">内中断</span></span></span></span>，</p>\n<p>从而 <strong>CPU</strong> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>进入核心态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}进入核心态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">进入核心态</span></span></span></span></p>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>发出系统调用请求</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}发出系统调用请求</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">发出系统调用请求</span></span></span></span>是在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>用户态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}用户态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">用户态</span></span></span></span>，</p>\n<p>而<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>对系统调用的相应处理</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}对系统调用的相应处理</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">对系统调用的相应处理</span></span></span></span>在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>核心态</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}核心态</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">核心态</span></span></span></span>下进行</p>\n</li>\n<li>\n<p>陷入指令是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle mathcolor=\"red\"><mtext>唯一一个</mtext></mstyle></mrow><annotation encoding=\"application/x-tex\">\\color{red}唯一一个</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\" style=\"color:red;\">唯一一个</span></span></span></span>只能在用户态执行，</p>\n<p>而不可在核心态执行的指令</p>\n</li>\n</ol>\n<h2 id=\"整体框架-5\"><a class=\"anchor\" href=\"#整体框架-5\">#</a> 整体框架</h2>\n<p><img loading=\"lazy\" data-src=\"https://gitcode.net/qq_67720621/img/-/raw/master/typora-user-images-new/image-20230117001057046.png\" alt=\"image-20230117001057046\" /></p>\n",
            "tags": [
                "操作系统"
            ]
        },
        {
            "id": "https://www.htired.top/2023/06/01/algorithm/%E5%9F%83%E5%BC%8F%E7%AD%9B-%E5%B8%A6%E9%98%88%E5%80%BC%E7%9A%84%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7/",
            "url": "https://www.htired.top/2023/06/01/algorithm/%E5%9F%83%E5%BC%8F%E7%AD%9B-%E5%B8%A6%E9%98%88%E5%80%BC%E7%9A%84%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7/",
            "title": "埃式筛-带阈值的图连通性",
            "date_published": "2023-06-01T05:02:45.000Z",
            "content_html": "<p><a href=\"https://leetcode.cn/problems/graph-connectivity-with-threshold/\">1627. 带阈值的图连通性</a></p>\n<p>难度困难</p>\n<p>有  <code>n</code>  座城市，编号从  <code>1</code>  到  <code>n</code>  。编号为  <code>x</code>  和  <code>y</code>  的两座城市直接连通的前提是：  <code>x</code>  和  <code>y</code>  的公因数中，至少有一个 <strong>严格大于</strong> 某个阈值  <code>threshold</code>  。更正式地说，如果存在整数  <code>z</code>  ，且满足以下所有条件，则编号  <code>x</code>  和  <code>y</code>  的城市之间有一条道路：</p>\n<ul>\n<li><code>x % z == 0</code></li>\n<li><code>y % z == 0</code></li>\n<li><code>z &gt; threshold</code></li>\n</ul>\n<p>给你两个整数  <code>n</code>  和  <code>threshold</code>  ，以及一个待查询数组，请你判断每个查询 <code> queries[i] = [ai, bi]</code>  指向的城市  <code>ai</code>  和  <code>bi</code>  是否连通（即，它们之间是否存在一条路径）。</p>\n<p>返回数组  <code>answer</code>  ，其中 <code>answer.length == queries.length</code>  。如果第  <code>i</code>  个查询中指向的城市  <code>ai</code>  和  <code>bi</code>  连通，则  <code>answer[i]</code>  为  <code>true</code>  ；如果不连通，则  <code>answer[i]</code>  为  <code>false</code>  。</p>\n<p><strong>示例 1：</strong></p>\n<p><img loading=\"lazy\" data-src=\"/images/graph-connectivity-with-threshold-1.png\" alt=\"img\" /></p>\n<blockquote>\n<p>输入：n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]]</p>\n<p>输出：[false,false,true]</p>\n<p>解释：每个数的因数如下：<br />\n1:   1<br />\n2:   1, 2<br />\n3:   1, 3<br />\n4:   1, 2, 4<br />\n5:   1, 5<br />\n6:   1, 2, 3, 6<br />\n 所有大于阈值的的因数已经加粗标识，只有城市 3 和 6 共享公约数 3 ，因此结果是：<br />\n[1,4]   1 与 4 不连通<br />\n [2,5]   2 与 5 不连通<br />\n [3,6]   3 与 6 连通，存在路径 3--6</p>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<p><img loading=\"lazy\" data-src=\"/images/graph-connectivity-with-threshold-2.png\" alt=\"img\" /></p>\n<blockquote>\n<p>输入：n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]]</p>\n<p>输出：[true,true,true,true,true]</p>\n<p>解释：每个数的因数与上一个例子相同。但是，由于阈值为 0 ，所有的因数都大于阈值。因为所有的数字共享公因数 1 ，所以所有的城市都互相连通。</p>\n</blockquote>\n<p><strong>示例 3：</strong></p>\n<p><img loading=\"lazy\" data-src=\"/images/graph-connectivity-with-threshold-3.png\" alt=\"img\" /></p>\n<blockquote>\n<p>输入：n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]]</p>\n<p>输出：[false,false,false,false,false]</p>\n<p>解释：只有城市 2 和 4 共享的公约数 2 严格大于阈值 1 ，所以只有这两座城市是连通的。</p>\n<p>注意，同一对节点 [x, y] 可以有多个查询，并且查询 [x，y] 等同于查询 [y，x] 。</p>\n</blockquote>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>2 &lt;= n &lt;= 10^4</code></li>\n<li><code>0 &lt;= threshold &lt;= n</code></li>\n<li><code>1 &lt;= queries.length &lt;= 10^5</code></li>\n<li><code>queries[i].length == 2</code></li>\n<li><code>1 &lt;= ai, bi &lt;= cities</code></li>\n<li><code>ai != bi</code></li>\n</ul>\n<h1 id=\"分解因数-并查集\"><a class=\"anchor\" href=\"#分解因数-并查集\">#</a> 分解因数 + 并查集</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">areConnected</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> threshold<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> queries<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 分解因数 + 并查集</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 以因数作为转折点</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 枚举公因数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> z <span class=\"token operator\">=</span> threshold <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> z <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> z<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> z<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 枚举两个 z 的倍数的点并连接</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">//  两两连接</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> z<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> z<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> z<span class=\"token punctuation\">,</span> j <span class=\"token operator\">+=</span> z<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token function\">union</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            // 直接枚举是 z 的倍数的点</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            for (int i = 1; i * z &lt;= n; i++) &#123;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                union (z, i * z);</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            &#125;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 检查连通分量</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> ans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> query <span class=\"token operator\">:</span> queries<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            ans<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> father<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        father <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            father<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">int</span> lAncestor <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">int</span> rAncestor <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 让质因数的父节点指向原数</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 这样在分组的时候使得父节点不会超过 n</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// - cnt[find(i)]++;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        father<span class=\"token punctuation\">[</span>rAncestor<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lAncestor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> father<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">return</span> father<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>father<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"埃式筛-并查集\"><a class=\"anchor\" href=\"#埃式筛-并查集\">#</a> 埃式筛 + 并查集</h1>\n<blockquote>\n<p><a href=\"https://baike.baidu.com/item/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95\">埃拉托斯特尼筛法</a>：</p>\n<ol>\n<li>\n<p>列出 2 以后的所有序列：</p>\n</li>\n<li>\n<ul>\n<li>2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</li>\n</ul>\n</li>\n<li>\n<p>标出序列中的第一个素数，也就是 2，序列变成：</p>\n</li>\n<li>\n<ul>\n<li>2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</li>\n</ul>\n</li>\n<li>\n<p>将剩下序列中，划掉 2 的倍数，序列变成：</p>\n</li>\n<li>\n<ul>\n<li>2 3 5 7 9 11 13 15 17 19 21 23 25</li>\n</ul>\n</li>\n<li>\n<p>如果这个序列中最大数小于最后一个标出的素数的平方，那么剩下的序列中所有的数都是素数，否则回到第二步。</p>\n</li>\n<li>\n<p>本例中，因为 25 大于 2 的平方，我们返回第二步：</p>\n</li>\n<li>\n<p>剩下的序列中第一个素数是 3，将主序列中 3 的倍数划掉，主序列变成：</p>\n</li>\n<li>\n<ul>\n<li>2 3 5 7 11 13 17 19 23 25</li>\n</ul>\n</li>\n<li>\n<p>我们得到的素数有：2，3</p>\n</li>\n<li>\n<p>25 仍然大于 3 的平方，所以我们还要返回第二步：</p>\n</li>\n<li>\n<p>序列中第一个素数是 5，同样将序列中 5 的倍数划掉，主序列成了：</p>\n</li>\n<li>\n<ul>\n<li>2 3 5 7 11 13 17 19 23</li>\n</ul>\n</li>\n<li>\n<p>我们得到的素数有：2，3，5 。</p>\n</li>\n<li>\n<p>因为 23 小于 5 的平方，跳出循环.</p>\n</li>\n</ol>\n<p>结论：2 到 25 之间的素数是：2 3 5 7 11 13 17 19 23。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 枚举公因数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> z <span class=\"token operator\">=</span> threshold <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> z <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> z<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>used<span class=\"token punctuation\">[</span>z<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> z<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 枚举两个 z 的倍数的点并连接</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//  两两连接</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> z<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> z<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> z<span class=\"token punctuation\">,</span> j <span class=\"token operator\">+=</span> z<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 剔除 j</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        used<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">union</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note info\">\n<p><strong>并查集 + 数学</strong></p>\n<ul>\n<li><a href=\"/2023/05/29/algorithm/%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E9%81%8D%E5%8E%86\">最大公约数遍历</a></li>\n<li><a href=\"/2023/06/01/algorithm/%E5%9F%83%E5%BC%8F%E7%AD%9B-%E5%B8%A6%E9%98%88%E5%80%BC%E7%9A%84%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7\">埃式筛 - 带阈值的图连通性</a></li>\n<li><a href=\"/2023/06/01/algorithm/%E6%8C%89%E5%85%AC%E5%9B%A0%E6%95%B0%E8%AE%A1%E7%AE%97%E6%9C%80%E5%A4%A7%E7%BB%84%E4%BB%B6%E5%A4%A7%E5%B0%8F\">按公因数计算最大组件大小</a></li>\n<li><a href=\"/2023/06/08/algorithm/%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%85%AC%E5%9B%A0%E6%95%B0%E6%8E%92%E5%BA%8F\">数组的最大公因数排序</a></li>\n<li><a href=\"/2023/06/03/algorithm/%E4%B9%98%E6%B3%95%E9%80%86%E5%85%83%EF%BC%8C%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86%EF%BC%8C%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%8C%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%B0%86%E5%AD%90%E6%95%B0%E7%BB%84%E9%87%8D%E6%96%B0%E6%8E%92%E5%BA%8F%E5%BE%97%E5%88%B0%E5%90%8C%E4%B8%80%E4%B8%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%96%B9%E6%A1%88%E6%95%B0\">乘法逆元，费马小定理，并查集，动态规划 - 将子数组重新排序得到同一个二叉搜索树的方案数</a></li>\n</ul>\n</div>\n",
            "tags": [
                "算法",
                "困难",
                "并查集",
                "数学"
            ]
        },
        {
            "id": "https://www.htired.top/2023/06/01/algorithm/%E6%8C%89%E5%85%AC%E5%9B%A0%E6%95%B0%E8%AE%A1%E7%AE%97%E6%9C%80%E5%A4%A7%E7%BB%84%E4%BB%B6%E5%A4%A7%E5%B0%8F/",
            "url": "https://www.htired.top/2023/06/01/algorithm/%E6%8C%89%E5%85%AC%E5%9B%A0%E6%95%B0%E8%AE%A1%E7%AE%97%E6%9C%80%E5%A4%A7%E7%BB%84%E4%BB%B6%E5%A4%A7%E5%B0%8F/",
            "title": "按公因数计算最大组件大小",
            "date_published": "2023-06-01T05:02:22.000Z",
            "content_html": "<p><a href=\"https://leetcode.cn/problems/largest-component-size-by-common-factor/\">952. 按公因数计算最大组件大小</a></p>\n<p>难度困难</p>\n<p>给定一个由不同正整数的组成的非空数组  <code>nums</code>  ，考虑下面的图：</p>\n<ul>\n<li>有  <code>nums.length</code>  个节点，按从  <code>nums[0]</code>  到  <code>nums[nums.length - 1]</code>  标记；</li>\n<li>只有当  <code>nums[i]</code>  和  <code>nums[j]</code>  共用一个大于 1 的公因数时， <code>nums[i]</code>  和  <code>nums[j]</code>  之间才有一条边。</li>\n</ul>\n<p>返回 <em>图中最大连通组件的大小</em> 。</p>\n<p><strong>示例 1：</strong></p>\n<p><img loading=\"lazy\" data-src=\"/images/largest-component-size-by-common-factor-1.png\" alt=\"img\" /></p>\n<blockquote>\n<p>输入：nums = [4,6,15,35]</p>\n<p>输出：4</p>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<p><img loading=\"lazy\" data-src=\"/images/largest-component-size-by-common-factor-2.png\" alt=\"img\" /></p>\n<blockquote>\n<p>输入：nums = [20,50,9,63]</p>\n<p>输出：2</p>\n</blockquote>\n<p><strong>示例 3：</strong></p>\n<p><img loading=\"lazy\" data-src=\"/images/largest-component-size-by-common-factor-3.png\" alt=\"img\" /></p>\n<blockquote>\n<p>输入：nums = [2,3,6,7,4,12,21,39]</p>\n<p>输出：8</p>\n</blockquote>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 2 * 10^4</code></li>\n<li><code>1 &lt;= nums[i] &lt;= 10^5</code></li>\n<li><code>nums</code>  中所有值都 <strong>不同</strong></li>\n</ul>\n<h1 id=\"分解质因数-并查集\"><a class=\"anchor\" href=\"#分解质因数-并查集\">#</a> 分解质因数 + 并查集</h1>\n<p>每个数看作一个点，那么只有二者的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">gcd &gt; 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 时，才会有边。</p>\n<blockquote>\n<p>若直接每两个元素建图，那么时间复杂度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> 级别。</p>\n</blockquote>\n<p>我们可以用质因数作为中间点，让元素与其所有的质因数构成边。最后检查连通分量的最大值即可</p>\n<p><img loading=\"lazy\" data-src=\"/images/largest-component-size-by-common-factor-4.png\" alt=\"img\" /></p>\n<p>由于每个数最多有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mtext> </mtext><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">log\\,n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 个质因数，即最终的时间复杂度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mtext> </mtext><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>⋅</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n\\,log(n\\cdot A))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">))</span></span></span></span>，其中 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> 为并查集的操作复杂度</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">largestComponentSize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 分解质因数 + 并查集</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 以质因数作为转折点</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token number\">200002</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 分解质因数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">*</span> i <span class=\"token operator\">&lt;=</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">boolean</span> f <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    f <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    num <span class=\"token operator\">/=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token comment\">// 合并 j, i</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token function\">union</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 若 num > 1，那么此时 num 也是一个质因数</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token function\">union</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 检查连通分量</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cnt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            ans <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">[</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> father<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        father <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            father<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">int</span> lAncestor <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">int</span> rAncestor <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 让质因数的父节点指向原数</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">// 这样在分组的时候使得父节点不会超过 n</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">// - cnt[find(i)]++;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        father<span class=\"token punctuation\">[</span>rAncestor<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> lAncestor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> father<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">return</span> father<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>father<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note info\">\n<p><strong>并查集 + 数学</strong></p>\n<ul>\n<li><a href=\"/2023/05/29/algorithm/%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E9%81%8D%E5%8E%86\">最大公约数遍历</a></li>\n<li><a href=\"/2023/06/01/algorithm/%E5%9F%83%E5%BC%8F%E7%AD%9B-%E5%B8%A6%E9%98%88%E5%80%BC%E7%9A%84%E5%9B%BE%E8%BF%9E%E9%80%9A%E6%80%A7\">埃式筛 - 带阈值的图连通性</a></li>\n<li><a href=\"/2023/06/01/algorithm/%E6%8C%89%E5%85%AC%E5%9B%A0%E6%95%B0%E8%AE%A1%E7%AE%97%E6%9C%80%E5%A4%A7%E7%BB%84%E4%BB%B6%E5%A4%A7%E5%B0%8F\">按公因数计算最大组件大小</a></li>\n<li><a href=\"/2023/06/08/algorithm/%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%85%AC%E5%9B%A0%E6%95%B0%E6%8E%92%E5%BA%8F\">数组的最大公因数排序</a></li>\n<li><a href=\"/2023/06/03/algorithm/%E4%B9%98%E6%B3%95%E9%80%86%E5%85%83%EF%BC%8C%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86%EF%BC%8C%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%8C%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%B0%86%E5%AD%90%E6%95%B0%E7%BB%84%E9%87%8D%E6%96%B0%E6%8E%92%E5%BA%8F%E5%BE%97%E5%88%B0%E5%90%8C%E4%B8%80%E4%B8%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%96%B9%E6%A1%88%E6%95%B0\">乘法逆元，费马小定理，并查集，动态规划 - 将子数组重新排序得到同一个二叉搜索树的方案数</a></li>\n</ul>\n</div>\n",
            "tags": [
                "算法",
                "困难",
                "并查集",
                "数学"
            ]
        },
        {
            "id": "https://www.htired.top/2023/05/31/algorithm/%E7%9F%A9%E9%98%B5%E4%B8%AD%E4%B8%A5%E6%A0%BC%E9%80%92%E5%A2%9E%E7%9A%84%E5%8D%95%E5%85%83%E6%A0%BC%E6%95%B0/",
            "url": "https://www.htired.top/2023/05/31/algorithm/%E7%9F%A9%E9%98%B5%E4%B8%AD%E4%B8%A5%E6%A0%BC%E9%80%92%E5%A2%9E%E7%9A%84%E5%8D%95%E5%85%83%E6%A0%BC%E6%95%B0/",
            "title": "矩阵中严格递增的单元格数",
            "date_published": "2023-05-31T14:57:27.000Z",
            "content_html": "<p><a href=\"https://leetcode.cn/problems/maximum-strictly-increasing-cells-in-a-matrix/\">2713. 矩阵中严格递增的单元格数</a></p>\n<p>难度困难</p>\n<p>给你一个下标从 <strong>1</strong> 开始、大小为  <code>m x n</code>  的整数矩阵  <code>mat</code> ，你可以选择任一单元格作为 <strong>起始单元格</strong> 。</p>\n<p>从起始单元格出发，你可以移动到 <strong>同一行或同一列</strong> 中的任何其他单元格，但前提是目标单元格的值 <strong>严格大于</strong> 当前单元格的值。</p>\n<p>你可以多次重复这一过程，从一个单元格移动到另一个单元格，直到无法再进行任何移动。</p>\n<p>请你找出从某个单元开始访问矩阵所能访问的 <strong>单元格的最大数量</strong> 。</p>\n<p>返回一个表示可访问单元格最大数量的整数。</p>\n<p><strong>示例 1：</strong></p>\n<p><img loading=\"lazy\" data-src=\"/images/maximum-strictly-increasing-cells-in-a-matrix-1.png\" alt=\"img\" /></p>\n<blockquote>\n<p>输入：mat = [[3,1],[3,4]]</p>\n<p>输出：2</p>\n<p>解释：上图展示了从第 1 行、第 2 列的单元格开始，可以访问 2 个单元格。可以证明，无论从哪个单元格开始，最多只能访问 2 个单元格，因此答案是 2 。</p>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<p><img loading=\"lazy\" data-src=\"/images/maximum-strictly-increasing-cells-in-a-matrix-2.png\" alt=\"img\" /></p>\n<blockquote>\n<p>输入：mat = [[1,1],[1,1]]</p>\n<p>输出：1</p>\n<p>解释：由于目标单元格必须严格大于当前单元格，在本示例中只能访问 1 个单元格。</p>\n</blockquote>\n<p><strong>示例 3：</strong></p>\n<p><img loading=\"lazy\" data-src=\"/images/maximum-strictly-increasing-cells-in-a-matrix-3.png\" alt=\"img\" /></p>\n<blockquote>\n<p>输入：mat = [[3,1,6],[-9,5,7]]</p>\n<p>输出：4</p>\n<p>解释：上图展示了从第 2 行、第 1 列的单元格开始，可以访问 4 个单元格。可以证明，无论从哪个单元格开始，最多只能访问 4 个单元格，因此答案是 4 。</p>\n</blockquote>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>m == mat.length </code></li>\n<li><code>n == mat[i].length </code></li>\n<li><code>1 &lt;= m, n &lt;= 10^5</code></li>\n<li><code>1 &lt;= m * n &lt;= 10^5</code></li>\n<li><code>-10^5 &lt;= mat[i][j] &lt;= 10^5</code></li>\n</ul>\n<h1 id=\"贪心-平衡树-记忆化搜索\"><a class=\"anchor\" href=\"#贪心-平衡树-记忆化搜索\">#</a> 贪心 + 平衡树 + 记忆化搜索</h1>\n<p>对于元素 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(i,j)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">)</span></span></span></span>，可以贪心的选择第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 行第一个比 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">mat[i][j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span> 大的元素的所有下标，选择第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> 列第一个比 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">mat[i][j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span> 大的元素的所有下标。然后将该元素作为元素 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(i,j)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">)</span></span></span></span> 递归下去。</p>\n<blockquote>\n<p>若 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>&lt;</mo><mi>x</mi><mo>&lt;</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">mat[i][j] &lt; x &lt; y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>，那么从 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">mat[i][j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span> 到达 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> 需要经过 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>，才可以使得答案更大</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.16em\" columnalign=\"center center center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>7</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>7</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>5</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>7</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>8</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\left[\\begin{matrix}7 &amp; 6 &amp; 3\\\\-7 &amp; -5 &amp; 6 \\\\-7 &amp; 0 &amp;4\\\\6&amp;6&amp;0\\\\-8&amp;6&amp;0\\end{matrix}\\right]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:6em;vertical-align:-2.75em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.25em;\"><span style=\"top:-5.25em;\"><span class=\"pstrut\" style=\"height:8em;\"></span><span style=\"width:0.667em;height:6.000em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.667em\" height=\"6.000em\" viewBox=\"0 0 667 6000\"><path d=\"M403 1759 V84 H666 V0 H319 V1759 v2400 v1759 h347 v-84\nH403z M403 1759 V0 H319 V1759 v2400 v1759 h84z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.25em;\"><span style=\"top:-5.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">7</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">7</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">7</span></span></span><span style=\"top:-1.81em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span></span></span><span style=\"top:-0.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">8</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.25em;\"><span style=\"top:-5.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-1.81em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span></span></span><span style=\"top:-0.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.25em;\"><span style=\"top:-5.41em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span></span></span><span style=\"top:-1.81em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-0.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.25em;\"><span style=\"top:-5.25em;\"><span class=\"pstrut\" style=\"height:8em;\"></span><span style=\"width:0.667em;height:6.000em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.667em\" height=\"6.000em\" viewBox=\"0 0 667 6000\"><path d=\"M347 1759 V0 H0 V84 H263 V1759 v2400 v1759 H0 v84 H347z\nM347 1759 V0 H263 V1759 v2400 v1759 h84z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n</blockquote>\n<p>可以枚举每一个元素 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(i,j)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">)</span></span></span></span></p>\n<ul>\n<li>对于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(i,j)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">)</span></span></span></span> 左边的元素即：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo>∼</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">mat[i][0\\sim j - 1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>。 可以使用有序集合平衡树升序保存 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo>∼</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">mat[i][0\\sim j-1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>，通过二分 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">mat[i][j] + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 可以查询到比 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">mat[i][j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span> 大的最小元素</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(i,j)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">)</span></span></span></span> 右边的元素，上边的元素，下边的元素同理</li>\n</ul>\n<p>可以使用 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">map</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">p</span></span></span></span> 保存每一行或者每一列的元素对应的下标集合</p>\n<blockquote>\n<p>例如：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>7</mn><mo>⟶</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>0</mn><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">-7\\longrightarrow (2,0),(3,0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">7</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟶</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">>></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> mapr2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">>></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> mapc2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxIncreasingCells</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> mat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        n <span class=\"token operator\">=</span> mat<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        m <span class=\"token operator\">=</span> mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        mapr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        mapc2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 上一个比它大的最小元素</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">,</span> o2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> o1 <span class=\"token operator\">-</span> o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">Map</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">>></span> map<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            mapr2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> map<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> list <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">computeIfAbsent</span><span class=\"token punctuation\">(</span>mat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> o <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token class-name\">Pair</span> pair <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token class-name\">Integer</span> v <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">ceiling</span><span class=\"token punctuation\">(</span>mat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    mapr<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>mat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">// 下一个比它大的最小元素</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            set<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token class-name\">Pair</span> pair <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token class-name\">Integer</span> v <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">ceiling</span><span class=\"token punctuation\">(</span>mat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token comment\">// 左右取较小者</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    mapr<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>mapr<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>mat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token class-name\">Map</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">>></span> map<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            mapc2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> map<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token comment\">// 上一个比它大的最小元素</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">,</span> o2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> o1 <span class=\"token operator\">-</span> o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> list <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">computeIfAbsent</span><span class=\"token punctuation\">(</span>mat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> o <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token class-name\">Pair</span> pair <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token class-name\">Integer</span> v <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">ceiling</span><span class=\"token punctuation\">(</span>mat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    mapc<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>mat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token comment\">// 下一个比它大的最小元素</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            set<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token class-name\">Pair</span> pair <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token class-name\">Integer</span> v <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">ceiling</span><span class=\"token punctuation\">(</span>mat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                    <span class=\"token comment\">// 上下取较小者</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                    mapc<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>mapc<span class=\"token punctuation\">.</span><span class=\"token function\">getOrDefault</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>mat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        memo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                ans <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> memo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token comment\">// 左右</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Pair</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> mapr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token comment\">// 上下</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Pair</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> mapc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>memo<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">>></span> r <span class=\"token operator\">=</span> mapr2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">>></span> c <span class=\"token operator\">=</span> mapc2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token class-name\">Pair</span> pair1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token comment\">// 左右</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token class-name\">Integer</span> v <span class=\"token operator\">=</span> mapr<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>pair1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token comment\">// 当前第 i 行</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> list <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ints <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                    ans <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>ints<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ints<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token comment\">// 上下</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        v <span class=\"token operator\">=</span> mapc<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>pair1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token comment\">// 当前第 i 列</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> list <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ints <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                    ans <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>ints<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ints<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ans <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Pair</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Pair</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>i <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>j <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token class-name\">Pair</span> pair <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Pair</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token keyword\">return</span> i <span class=\"token operator\">==</span> pair<span class=\"token punctuation\">.</span>i <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">==</span> pair<span class=\"token punctuation\">.</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note info\">\n<p>执行用时 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1828</mn><mi>m</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">1828ms</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1828</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">s</span></span></span></span>，现在超时了</p>\n</div>\n<h1 id=\"动态规划-排序优化\"><a class=\"anchor\" href=\"#动态规划-排序优化\">#</a> 动态规划 + 排序优化</h1>\n<p>对于元素 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">mat[i][j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span> 必然由 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 行 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> 列中比它小的元素所转移而来</p>\n<blockquote>\n<p>若枚举 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo separator=\"true\">,</mo><mn>0</mn><mo>∼</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(i,0\\sim j - 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> 的每个元素则会超时</p>\n</blockquote>\n<p>设 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">f[i][j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span> 为访问元素 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">mat[i][j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span> 的最大数量，由于由 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 行 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> 列中比它小的元素所转移而来，可以维护转移来源的最大值。</p>\n<p>转移来源也只能是第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 行或者第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> 列，所以可以使用数组维护最大值。</p>\n<p>对矩阵中的元素进行排序并保存元素的所有位置，枚举排序后的元素</p>\n<p>此时 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>o</mi><mi>l</mi><mi>M</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mi>c</mi><mi>o</mi><mi>l</mi><mi>M</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">f[i][j] = max(rolMax[i],colMax[j]) + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">ro</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">lM</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">co</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">lM</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">])</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></p>\n<blockquote>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>l</mi><mi>M</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">rolMax[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ro</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">lM</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>：第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 行当前的最大值</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>o</mi><mi>l</mi><mi>M</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">colMax[j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">co</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">lM</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span>：第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> 行当前的最大值</p>\n</blockquote>\n<p>此时遍历到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">mat[i][j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span>，那么小于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">mat[i][j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span> 的元素必然已经遍历完成，即此时 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 行 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> 列中比 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">mat[i][j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ma</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span> 小的元素早已计算完成，所以此时 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>l</mi><mi>M</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">rolMax[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ro</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">lM</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> 与 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>o</mi><mi>l</mi><mi>M</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">colMax[j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">co</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">lM</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span> 就是第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 行与第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> 列转移来源的最大值。</p>\n<blockquote>\n<p><img loading=\"lazy\" data-src=\"/images/maximum-strictly-increasing-cells-in-a-matrix-4.png\" alt=\"img\" /></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxIncreasingCells</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> mat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> mat<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">//[元素，下标集合]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">>></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> list <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">computeIfAbsent</span><span class=\"token punctuation\">(</span>mat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> o <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> rowMax <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> colMax <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 按照元素大小遍历</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> v <span class=\"token operator\">:</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 元素对应的下标集合</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> list <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 保存元素对应的最大值</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> mx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pos <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                mx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>rowMax<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> colMax<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                ans <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> mx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// 需要最后更新 rolMax [i], colMax [j], 防止一行或一列的重复元素相互影响</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">//  - 1, 7, 7</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">//   若更新第一个 7 后直接更新 rolMax，</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">//   那么第二个 7 则会由第一个 7 转移而来，错误</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pos <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                rowMax<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> rowMax<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                colMax<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> colMax<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "有序集合",
                "贪心",
                "排序",
                "动态规划",
                "困难",
                "记忆化搜索"
            ]
        },
        {
            "id": "https://www.htired.top/2023/05/31/algorithm/%E4%BD%BF%E6%89%80%E6%9C%89%E5%AD%97%E7%AC%A6%E7%9B%B8%E7%AD%89%E7%9A%84%E6%9C%80%E5%B0%8F%E6%88%90%E6%9C%AC/",
            "url": "https://www.htired.top/2023/05/31/algorithm/%E4%BD%BF%E6%89%80%E6%9C%89%E5%AD%97%E7%AC%A6%E7%9B%B8%E7%AD%89%E7%9A%84%E6%9C%80%E5%B0%8F%E6%88%90%E6%9C%AC/",
            "title": "使所有字符相等的最小成本",
            "date_published": "2023-05-31T14:57:20.000Z",
            "content_html": "<p><a href=\"https://leetcode.cn/problems/minimum-cost-to-make-all-characters-equal/\">2712. 使所有字符相等的最小成本</a></p>\n<p>难度中等</p>\n<p>给你一个下标从 <strong>0</strong> 开始、长度为  <code>n</code>  的二进制字符串  <code>s</code>  ，你可以对其执行两种操作：</p>\n<ul>\n<li>选中一个下标  <code>i</code>  并且反转从下标  <code>0</code>  到下标  <code>i</code> （包括下标  <code>0</code>  和下标  <code>i</code>  ）的所有字符，成本为  <code>i + 1</code>  。</li>\n<li>选中一个下标  <code>i</code>  并且反转从下标  <code>i</code>  到下标  <code>n - 1</code> （包括下标  <code>i</code>  和下标  <code>n - 1</code>  ）的所有字符，成本为  <code>n - i</code>  。</li>\n</ul>\n<p>返回使字符串内所有字符 <strong>相等</strong> 需要的 <strong>最小成本</strong> 。</p>\n<p><strong>反转</strong> 字符意味着：如果原来的值是 '0' ，则反转后值变为 '1' ，反之亦然。</p>\n<p><strong>示例 1：</strong></p>\n<blockquote>\n<p>输入：s = &quot;0011&quot;</p>\n<p>输出：2</p>\n<p>解释：执行第二种操作，选中下标 i = 2 ，可以得到 s = &quot;0000&quot; ，成本为 2 。可以证明 2 是使所有字符相等的最小成本。</p>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<blockquote>\n<p>输入：s = &quot;010101&quot;</p>\n<p>输出：9</p>\n<p>解释：执行第一种操作，选中下标 i = 2 ，可以得到 s = &quot;101101&quot; ，成本为 3 。<br />\n执行第一种操作，选中下标 i = 1 ，可以得到 s = &quot;011101&quot; ，成本为 2 。<br />\n执行第一种操作，选中下标 i = 0 ，可以得到 s = &quot;111101&quot; ，成本为 1 。<br />\n执行第二种操作，选中下标 i = 4 ，可以得到 s = &quot;111110&quot; ，成本为 2 。<br />\n执行第一种操作，选中下标 i = 5 ，可以得到 s = &quot;111111&quot; ，成本为 1 。<br />\n使所有字符相等的总成本等于 9 。可以证明 9 是使所有字符相等的最小成本。</p>\n</blockquote>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= s.length == n &lt;= 10^5</code></li>\n<li><code>s[i]</code>  为  <code>'0'</code>  或  <code>'1'</code></li>\n</ul>\n<h1 id=\"前后缀分解\"><a class=\"anchor\" href=\"#前后缀分解\">#</a> 前后缀分解</h1>\n<blockquote>\n<p>前后缀分解是分割数组分别为前缀和后缀两部分，最后枚举分割点计算总的</p>\n</blockquote>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">pre[i][0]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">re</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span></span></span></span> 将前缀变为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> 的最小代价，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">pre[i][1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">re</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> 将前缀变为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 的最小代价</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">pre[i][0]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">re</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span></span></span></span></p>\n<ul>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><msup><mo>=</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><msup><mn>0</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">s[i] == &#x27;0&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mrel\"><span class=\"mrel\">=</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mi>p</mi><mi>r</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">pre[i][0] = pre[i - 1][0]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">re</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">re</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span></span></span></span></li>\n</ul>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><msup><mo>=</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><msup><mn>1</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">s[i] == &#x27;1&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mrel\"><span class=\"mrel\">=</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<ul>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mi>p</mi><mi>r</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>+</mo><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">pre[i][0] = pre[i - 1][1] + i + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">re</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">re</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></p>\n<blockquote>\n<p>由于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><msup><mo>=</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><msup><mn>1</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">s[i] ==&#x27;1&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mrel\"><span class=\"mrel\">=</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>，所以只能将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 前缀为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 的变为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">i-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 变为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 的最小代价 + 当前代价</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">pre[i][1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">re</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span></p>\n<ul>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><msup><mo>=</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><msup><mn>1</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">s[i] == &#x27;1&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mrel\"><span class=\"mrel\">=</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mi>p</mi><mi>r</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">pre[i][1] = pre[i - 1][1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">re</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">re</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span></li>\n</ul>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><msup><mo>=</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><msup><mn>0</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">s[i] == &#x27;0&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mrel\"><span class=\"mrel\">=</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>r</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mi>p</mi><mi>r</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo><mo>+</mo><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">pre[i][1] = pre[i - 1][0] + i + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">re</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">re</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n</ul>\n</li>\n</ul>\n<hr />\n<p>同理也需要计算后缀</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>u</mi><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">suf[i][0]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span></span></span></span> 将后缀变为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> 的最小代价，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>u</mi><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">suf[i][1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> 将后缀变为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 的最小代价</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>u</mi><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">suf[i][0]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span></span></span></span></p>\n<ul>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><msup><mo>=</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><msup><mn>0</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">s[i] == &#x27;0&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mrel\"><span class=\"mrel\">=</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>u</mi><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mi>s</mi><mi>u</mi><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">suf[i][0] = suf[i - 1][0]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span></span></span></span></li>\n</ul>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><msup><mo>=</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><msup><mn>1</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">s[i] == &#x27;1&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mrel\"><span class=\"mrel\">=</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<ul>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>u</mi><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mi>s</mi><mi>u</mi><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>+</mo><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">suf[i][0] = suf[i - 1][1] + i + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></p>\n<blockquote>\n<p>由于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>u</mi><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><msup><mo>=</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><msup><mn>1</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">suf[i] ==&#x27;1&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mrel\"><span class=\"mrel\">=</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>，所以只能将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 前缀为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 的变为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">i-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 变为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 的最小代价 + 当前代价</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>u</mi><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">suf[i][1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span></p>\n<ul>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><msup><mo>=</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><msup><mn>1</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">s[i] == &#x27;1&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mrel\"><span class=\"mrel\">=</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>u</mi><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mi>s</mi><mi>u</mi><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">suf[i][1] = suf[i - 1][1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span></li>\n</ul>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><msup><mo>=</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><msup><mn>0</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">s[i] == &#x27;0&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mrel\"><span class=\"mrel\">=</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>u</mi><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mi>s</mi><mi>u</mi><mi>f</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo><mo>+</mo><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">suf[i][1] = suf[i - 1][0] + i + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7429em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n</ul>\n</li>\n</ul>\n<hr />\n<ol>\n<li>\n<p>一组操作的具体顺序不影响操作后的结果</p>\n</li>\n<li>\n<p>最优解中一个前缀翻转区间与一个后缀翻转区间必然没有交集，实际效果等于两个更小成本的两个翻转区间。所以最优方案一定可以划分成一组前缀操作和一组后缀操作，同时两组内的操作没有交集</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">minimumCost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 前缀</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token comment\">// 将 i 及之前翻转为 0 的数翻转为 1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token comment\">// 将 i 及之前翻转为 0 的数翻转为 1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 后缀</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> suf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                suf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> suf<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                suf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> suf<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> n <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                suf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> suf<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                suf<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> suf<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> n <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 枚举分割点</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">long</span> ans <span class=\"token operator\">=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">// 前后缀翻转为 0 的最小成本</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            ans <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> pre<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> suf<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            ans <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> pre<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> suf<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"贪心\"><a class=\"anchor\" href=\"#贪心\">#</a> 贪心</h1>\n<p>对于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>000</mn><mtext> </mtext><mn>1111</mn></mrow><annotation encoding=\"application/x-tex\">000\\,1111</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">000</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1111</span></span></span></span></p>\n<p>由于需要让所有字符相等，所以翻转可以全为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 或者全为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>。那么就可以贪心的选择所需要的操作次数少的一方</p>\n<p>即：</p>\n<ul>\n<li>选择 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>000</mn></mrow><annotation encoding=\"application/x-tex\">000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">000</span></span></span></span>，翻转为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>111</mn></mrow><annotation encoding=\"application/x-tex\">111</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">111</span></span></span></span> 所需的操作次数为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span></li>\n<li>选择 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1111</mn></mrow><annotation encoding=\"application/x-tex\">1111</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1111</span></span></span></span>，翻转为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0000</mn></mrow><annotation encoding=\"application/x-tex\">0000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0000</span></span></span></span> 所需的操作次数为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">4</span></span></span></span></li>\n</ul>\n<hr />\n<p>对于 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0000</mn><mtext> </mtext><mn>11</mn></mrow><annotation encoding=\"application/x-tex\">0000\\,11</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0000</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">11</span></span></span></span>，翻转只需将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0000</mn></mrow><annotation encoding=\"application/x-tex\">0000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0000</span></span></span></span> 翻转为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1111</mn></mrow><annotation encoding=\"application/x-tex\">1111</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1111</span></span></span></span> 或者将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>11</mn></mrow><annotation encoding=\"application/x-tex\">11</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">11</span></span></span></span> 翻转为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>00</mn></mrow><annotation encoding=\"application/x-tex\">00</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">00</span></span></span></span></p>\n<blockquote>\n<p>选择 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0000</mn></mrow><annotation encoding=\"application/x-tex\">0000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0000</span></span></span></span> 翻转为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1111</mn></mrow><annotation encoding=\"application/x-tex\">1111</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1111</span></span></span></span>，若将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><munder accentunder=\"true\"><mn>00</mn><mo stretchy=\"true\">‾</mo></munder><mn>00</mn></mrow><annotation encoding=\"application/x-tex\">\\underline{00}00</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.2em;\"></span><span class=\"mord underline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6444em;\"><span style=\"top:-2.84em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"underline-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">00</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2em;\"><span></span></span></span></span></span><span class=\"mord\">00</span></span></span></span> 变为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><munder accentunder=\"true\"><mn>11</mn><mo stretchy=\"true\">‾</mo></munder><mn>00</mn></mrow><annotation encoding=\"application/x-tex\">\\underline{11}00</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.2em;\"></span><span class=\"mord underline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6444em;\"><span style=\"top:-2.84em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"underline-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">11</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2em;\"><span></span></span></span></span></span><span class=\"mord\">00</span></span></span></span> 则只会让操作次数变大，因为还需要翻转回来。</p>\n</blockquote>\n<hr />\n<p>当前元素为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>，只需考虑 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mtext> </mtext><mo stretchy=\"false\">!</mo><mo>=</mo><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">s[i] \\,!= s[i - 1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mclose\">!</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> 部分。要么把 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 前面的元素翻转为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">s[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>，或者将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 以及后面的元素翻转为前面的元素。</p>\n<blockquote>\n<p>此时 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 前面部分已经全部相等。</p>\n<p>而 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6595em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 以后的部分翻转后性质是一样的</p>\n<ul>\n<li>例如：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>10010</mn></mrow><annotation encoding=\"application/x-tex\">10010</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">10010</span></span></span></span> 翻转后 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>01101</mn></mrow><annotation encoding=\"application/x-tex\">01101</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">01101</span></span></span></span>，此时相邻部分相等或者不相等更不反转一样</li>\n</ul>\n</blockquote>\n<p>例如：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>010101</mn></mrow><annotation encoding=\"application/x-tex\">010101</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">010101</span></span></span></span></p>\n<ul>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><munder accentunder=\"true\"><mn>0</mn><mo stretchy=\"true\">‾</mo></munder><mn>1</mn><munder accentunder=\"true\"><mn>0101</mn><mo stretchy=\"true\">‾</mo></munder></mrow><annotation encoding=\"application/x-tex\">\\underline{0}1\\underline{0101}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.2em;\"></span><span class=\"mord underline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6444em;\"><span style=\"top:-2.84em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"underline-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2em;\"><span></span></span></span></span></span><span class=\"mord\">1</span><span class=\"mord underline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6444em;\"><span style=\"top:-2.84em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"underline-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0101</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2em;\"><span></span></span></span></span></span></span></span></span>：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> 变为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></p>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><munder accentunder=\"true\"><mn>11</mn><mo stretchy=\"true\">‾</mo></munder><mn>0</mn><munder accentunder=\"true\"><mn>101</mn><mo stretchy=\"true\">‾</mo></munder></mrow><annotation encoding=\"application/x-tex\">\\underline{11}0\\underline{101}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.2em;\"></span><span class=\"mord underline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6444em;\"><span style=\"top:-2.84em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"underline-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">11</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2em;\"><span></span></span></span></span></span><span class=\"mord\">0</span><span class=\"mord underline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6444em;\"><span style=\"top:-2.84em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"underline-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">101</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2em;\"><span></span></span></span></span></span></span></span></span>：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>11</mn></mrow><annotation encoding=\"application/x-tex\">11</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">11</span></span></span></span> 变为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>00</mn></mrow><annotation encoding=\"application/x-tex\">00</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">00</span></span></span></span></p>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><munder accentunder=\"true\"><mn>000</mn><mo stretchy=\"true\">‾</mo></munder><mn>1</mn><munder accentunder=\"true\"><mn>01</mn><mo stretchy=\"true\">‾</mo></munder></mrow><annotation encoding=\"application/x-tex\">\\underline{000}1\\underline{01}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.2em;\"></span><span class=\"mord underline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6444em;\"><span style=\"top:-2.84em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"underline-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">000</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2em;\"><span></span></span></span></span></span><span class=\"mord\">1</span><span class=\"mord underline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6444em;\"><span style=\"top:-2.84em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"underline-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">01</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2em;\"><span></span></span></span></span></span></span></span></span>：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>000</mn></mrow><annotation encoding=\"application/x-tex\">000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">000</span></span></span></span> 变为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>111</mn></mrow><annotation encoding=\"application/x-tex\">111</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">111</span></span></span></span></p>\n<blockquote>\n<p>也可以 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>101</mn></mrow><annotation encoding=\"application/x-tex\">101</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">101</span></span></span></span> 变为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>010</mn></mrow><annotation encoding=\"application/x-tex\">010</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">010</span></span></span></span></p>\n</blockquote>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><munder accentunder=\"true\"><mn>1111</mn><mo stretchy=\"true\">‾</mo></munder><mn>0</mn><munder accentunder=\"true\"><mn>1</mn><mo stretchy=\"true\">‾</mo></munder></mrow><annotation encoding=\"application/x-tex\">\\underline{1111}0\\underline{1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.2em;\"></span><span class=\"mord underline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6444em;\"><span style=\"top:-2.84em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"underline-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1111</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2em;\"><span></span></span></span></span></span><span class=\"mord\">0</span><span class=\"mord underline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6444em;\"><span style=\"top:-2.84em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"underline-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2em;\"><span></span></span></span></span></span></span></span></span>：将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>01</mn></mrow><annotation encoding=\"application/x-tex\">01</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">01</span></span></span></span> 变为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">10</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">10</span></span></span></span></p>\n</li>\n<li>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><munder accentunder=\"true\"><mn>11111</mn><mo stretchy=\"true\">‾</mo></munder><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\underline{11111}0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.2em;\"></span><span class=\"mord underline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6444em;\"><span style=\"top:-2.84em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"underline-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">11111</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2em;\"><span></span></span></span></span></span><span class=\"mord\">0</span></span></span></span>：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> 变为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">minimumCost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">long</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token comment\">// 由于只需要变为相等，左右部分选择较小者</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                ans <span class=\"token operator\">+=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "贪心",
                "前后缀分解"
            ]
        },
        {
            "id": "https://www.htired.top/2023/05/31/algorithm/%E5%AF%B9%E8%A7%92%E7%BA%BF%E4%B8%8A%E4%B8%8D%E5%90%8C%E5%80%BC%E7%9A%84%E6%95%B0%E9%87%8F%E5%B7%AE/",
            "url": "https://www.htired.top/2023/05/31/algorithm/%E5%AF%B9%E8%A7%92%E7%BA%BF%E4%B8%8A%E4%B8%8D%E5%90%8C%E5%80%BC%E7%9A%84%E6%95%B0%E9%87%8F%E5%B7%AE/",
            "title": "对角线上不同值的数量差",
            "date_published": "2023-05-31T14:57:11.000Z",
            "content_html": "<p><a href=\"https://leetcode.cn/problems/difference-of-number-of-distinct-values-on-diagonals/\">2711. 对角线上不同值的数量差</a></p>\n<p>难度中等</p>\n<p>给你一个下标从  <code>0</code>  开始、大小为  <code>m x n</code>  的二维矩阵  <code>grid</code>  ，请你求解大小同样为  <code>m x n</code>  的答案矩阵  <code>answer</code>  。</p>\n<p>矩阵  <code>answer</code>  中每个单元格  <code>(r, c)</code>  的值可以按下述方式进行计算：</p>\n<ul>\n<li>令  <code>topLeft[r][c]</code>  为矩阵  <code>grid</code>  中单元格  <code>(r, c)</code>  左上角对角线上 <strong>不同值</strong> 的数量。</li>\n<li>令  <code>bottomRight[r][c]</code>  为矩阵  <code>grid</code>  中单元格  <code>(r, c)</code>  右下角对角线上 <strong>不同值</strong> 的数量。</li>\n</ul>\n<p>然后  <code>answer[r][c] = |topLeft[r][c] - bottomRight[r][c]|</code>  。</p>\n<p>返回矩阵  <code>answer</code>  。</p>\n<p><strong>矩阵对角线</strong> 是从最顶行或最左列的某个单元格开始，向右下方向走到矩阵末尾的对角线。</p>\n<p>如果单元格  <code>(r1, c1)</code>  和单元格  <code>(r, c) </code> 属于同一条对角线且  <code>r1 &lt; r</code>  ，则单元格  <code>(r1, c1)</code>  属于单元格  <code>(r, c)</code>  的左上对角线。类似地，可以定义右下对角线。</p>\n<p><strong>示例 1：</strong></p>\n<p><img loading=\"lazy\" data-src=\"/images/difference-of-number-of-distinct-values-on-diagonals.png\" alt=\"img\" /></p>\n<blockquote>\n<p>输入：grid = [[1,2,3],[3,1,5],[3,2,1]]</p>\n<p>输出：[[1,1,0],[1,0,1],[0,1,1]]</p>\n<p>解释：第 1 个图表示最初的矩阵 grid 。</p>\n<ul>\n<li>\n<p>第 2 个图表示对单元格 (0,0) 计算，其中蓝色单元格是位于右下对角线的单元格。</p>\n</li>\n<li>\n<p>第 3 个图表示对单元格 (1,2) 计算，其中红色单元格是位于左上对角线的单元格。</p>\n</li>\n<li>\n<p>第 4 个图表示对单元格 (1,1) 计算，其中蓝色单元格是位于右下对角线的单元格，红色单元格是位于左上对角线的单元格。</p>\n<blockquote>\n<p>单元格 (0,0) 的右下对角线包含 [1,1] ，而左上对角线包含 [] 。对应答案是 |1 - 0| = 1 。</p>\n<p>单元格 (1,2) 的右下对角线包含 [] ，而左上对角线包含 [2] 。对应答案是 |0 - 1| = 1 。</p>\n<p>单元格 (1,1) 的右下对角线包含 [1] ，而左上对角线包含 [1] 。对应答案是 |1 - 1| = 0 。</p>\n</blockquote>\n</li>\n<li>\n<p>其他单元格的对应答案也可以按照这样的流程进行计算。</p>\n</li>\n</ul>\n</blockquote>\n<p><strong>示例 2：</strong></p>\n<blockquote>\n<p>输入：grid = [[1]]</p>\n<p>输出：[[0]]</p>\n<p>解释：</p>\n<ul>\n<li>单元格 (0,0) 的右下对角线包含 [] ，左上对角线包含 [] 。对应答案是 |0 - 0| = 0 。</li>\n</ul>\n</blockquote>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>m == grid.length</code></li>\n<li><code>n == grid[i].length</code></li>\n<li><code>1 &lt;= m, n, grid[i][j] &lt;= 50</code></li>\n</ul>\n<h1 id=\"模拟\"><a class=\"anchor\" href=\"#模拟\">#</a> 模拟</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">differenceOfDistinctValues</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> grid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token comment\">// 左上</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i1 <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j1 <span class=\"token operator\">=</span> j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i1 <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> j1 <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i1<span class=\"token operator\">--</span><span class=\"token punctuation\">,</span> j1<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    l<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token comment\">// 右下</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                set<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i1 <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j1 <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i1 <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> j1 <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i1<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j1<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    r<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">-</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"前后缀分解-哈希表\"><a class=\"anchor\" href=\"#前后缀分解-哈希表\">#</a> 前后缀分解 + 哈希表</h1>\n<p>对于前缀，采用哈希表保存每一层的元素。</p>\n<ul>\n<li>\n<p>若此时位置为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">i,j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span>。获取上一层的哈希表 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">set[i-1][j-1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">se</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span></p>\n<p>此时 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>e</mi><mi>f</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>s</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">left[i][j]=set[i -1][j-1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">se</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>，并更新当前层的哈希表 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>s</mi><mi>e</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">set[i][j] = set[i - 1][j - 1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">se</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">se</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span></p>\n</li>\n</ul>\n<p>对于后缀也同理。</p>\n<p>由于每一层哈希表只更上一层有关，可采用滚动哈希表。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">differenceOfDistinctValues</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> grid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 左上角不同值的数量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> setl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            setl<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            setl<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            temp<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                left<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                temp<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> t <span class=\"token operator\">=</span> setl<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                setl<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                temp <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 右下角不同值的数量</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> setr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            setr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            setr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            temp<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> m <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                right<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                temp<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> t <span class=\"token operator\">=</span> setr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                setr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                temp <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> right<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法",
                "前后缀分解",
                "哈希表",
                "模拟"
            ]
        }
    ]
}